<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LeetCode破局攻略</title>
      <link href="2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/"/>
      <url>2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本专栏转载于<a href="https://github.com/labuladong/fucking-algorithm">Githublabuladong/fucking-algorithm</a>. 用于个人学习算法所需.</p><p>本仓库总共 60 多篇原创文章，基本上都是基于 LeetCode 的题目，涵盖了所有题型和技巧，而且一定要做到<strong>举一反三，通俗易懂</strong>，绝不是简单的代码堆砌，后面有目录。<br>我先吐槽几句。<strong>刷题刷题，刷的是题，培养的是思维，本仓库的目的就是传递这种算法思维</strong>。我要是只写一个包含 LeetCode 题目代码的仓库，有个锤子用？没有思路解释，没有思维框架，顶多写个时间复杂度，那玩意一眼就能看出来。<br>只想要答案的话很容易，题目评论区五花八门的答案，动不动就秀 python 一行代码解决，有那么多人点赞。问题是，你去做算法题，是去学习编程语言的奇技淫巧的，还是学习算法思维的呢？你的快乐，到底源自复制别人的一行代码通过测试，已完成题目 +1，还是源自自己通过逻辑推理和算法框架不看答案写出解法？<br>网上总有大佬喷我，说我写这玩意太基础了，根本没必要啰嗦。我只能说大家刷算法就是找工作吃饭的，不是打竞赛的，我也是一路摸爬滚打过来的，我们要的是清楚明白有所得，不是故弄玄虚无所指。不想办法做到通俗易懂，难道要上来先把《算法导论》吹上天，然后把人家都心怀敬仰地劝退？别的不说，公众号几万读者，PDF 版本上万次下载，联系我的出版社都好几家，说明质量还过得去吧？<br><strong>做啥事情做多了，都能发现套路的，我把各种算法套路框架总结出来，相信可以帮助其他人少走弯路</strong>。我这个纯靠自学的小童鞋，花了一年时间刷题和总结，自己写了一份算法小抄，后面有目录，这里就不废话了。</p><p><strong>PS：如果想下载此仓库到本地学习，不要用 git 命令下载，点击 GitHub 网页上的下载按钮直接下载 zip 文件，这样就不会下载 git 历史，大大加快下载速度</strong>。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li>第零章、必读系列<ul><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%AD%A6%E4%B9%A0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E7%9A%84%E9%AB%98%E6%95%88%E6%96%B9%E6%B3%95">学习算法和刷题的框架思维</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%954">学习数据结构和算法读什么书</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3%E8%BF%9B%E9%98%B6">动态规划解题框架</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E6%9C%80%E4%BC%98%E5%AD%90%E7%BB%93%E6%9E%84">动态规划答疑篇</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E4%BF%AE%E8%AE%A2%E7%89%88">回溯算法解题框架</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E8%AF%A6%E8%A7%A3">二分查找解题框架</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%8A%80%E5%B7%A7">滑动窗口解题框架</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7">双指针技巧解题框架</a></li><li><a href="/2016/01/01/%E6%8A%80%E6%9C%AF/linux%E8%BF%9B%E7%A8%8B">Linux的进程、线程、文件描述符是什么</a></li><li><a href="/2016/01/01/%E6%8A%80%E6%9C%AF/%E5%9C%A8%E7%BA%BF%E7%BB%83%E4%B9%A0%E5%B9%B3%E5%8F%B0">Git/SQL/正则表达式的在线练习平台</a></li></ul></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97">第一章、动态规划系列</a><ul><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3%E8%BF%9B%E9%98%B6">动态规划详解</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E6%9C%80%E4%BC%98%E5%AD%90%E7%BB%93%E6%9E%84">动态规划答疑篇</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AE%BE%E8%AE%A1%EF%BC%9A%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97">动态规划设计：最长递增子序列</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB">编辑距离</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E9%AB%98%E6%A5%BC%E6%89%94%E9%B8%A1%E8%9B%8B%E9%97%AE%E9%A2%98">经典动态规划问题：高楼扔鸡蛋</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E9%AB%98%E6%A5%BC%E6%89%94%E9%B8%A1%E8%9B%8B%E8%BF%9B%E9%98%B6">经典动态规划问题：高楼扔鸡蛋（进阶）</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%E6%A8%A1%E6%9D%BF">动态规划之子序列问题解题模板</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E5%8D%9A%E5%BC%88%E9%97%AE%E9%A2%98">动态规划之博弈问题</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E4%B9%8B%E5%8C%BA%E9%97%B4%E8%B0%83%E5%BA%A6%E9%97%AE%E9%A2%98">贪心算法之区间调度问题</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8BKMP%E5%AD%97%E7%AC%A6%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95">动态规划之KMP字符匹配算法</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%9B%A2%E7%81%AD%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98">团灭 LeetCode 股票买卖问题</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E6%8A%A2%E6%88%BF%E5%AD%90">团灭 LeetCode 打家劫舍问题</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E5%9B%9B%E9%94%AE%E9%94%AE%E7%9B%98">动态规划之四键键盘</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE">动态规划之正则表达</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97">最长公共子序列</a></li></ul></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97">第二章、数据结构系列</a><ul><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%AD%A6%E4%B9%A0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E7%9A%84%E9%AB%98%E6%95%88%E6%96%B9%E6%B3%95">学习算法和刷题的思路指南</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%954">学习数据结构和算法读什么书</a></li><li><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%8F%89%E5%A0%86%E8%AF%A6%E8%A7%A3%E5%AE%9E%E7%8E%B0%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97">二叉堆详解实现优先级队列</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/LRU%E7%AE%97%E6%B3%95">LRU算法详解</a></li><li><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E6%93%8D%E4%BD%9C%E9%9B%86%E9%94%A6">二叉搜索树操作集锦</a></li><li><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E5%8D%95%E8%B0%83%E6%A0%88">特殊数据结构：单调栈</a></li><li><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97">特殊数据结构：单调队列</a></li><li><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E8%AE%BE%E8%AE%A1Twitter">设计Twitter</a></li><li><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E9%80%92%E5%BD%92%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86">递归反转链表的一部分</a></li><li><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97">队列实现栈|栈实现队列</a></li></ul></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97">第三章、算法思维系列</a><ul><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF">算法学习之路</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E4%BF%AE%E8%AE%A2%E7%89%88">回溯算法详解</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%AD%90%E9%9B%86%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88">回溯算法团灭排列、组合、子集问题</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E8%AF%A6%E8%A7%A3">二分查找详解</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7">双指针技巧总结</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%8A%80%E5%B7%A7">滑动窗口技巧</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/twoSum%E9%97%AE%E9%A2%98%E7%9A%84%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3">twoSum问题的核心思想</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BD%8D%E6%93%8D%E4%BD%9C">常用的位操作</a></li><li><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E5%AE%9E%E7%8E%B0%E8%AE%A1%E7%AE%97%E5%99%A8">拆解复杂问题：实现计算器</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E7%83%A7%E9%A5%BC%E6%8E%92%E5%BA%8F">烧饼排序</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%89%8D%E7%BC%80%E5%92%8C%E6%8A%80%E5%B7%A7">前缀和技巧</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%98%E6%B3%95">字符串乘法</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/FloodFill%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8">FloodFill算法详解及应用</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%8C%BA%E9%97%B4%E8%B0%83%E5%BA%A6%E9%97%AE%E9%A2%98%E4%B9%8B%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6">区间调度之区间合并问题</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%8C%BA%E9%97%B4%E4%BA%A4%E9%9B%86%E9%97%AE%E9%A2%98">区间调度之区间交集问题</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%BF%A1%E5%B0%81%E5%B5%8C%E5%A5%97%E9%97%AE%E9%A2%98">信封嵌套问题</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%87%A0%E4%B8%AA%E5%8F%8D%E7%9B%B4%E8%A7%89%E7%9A%84%E6%A6%82%E7%8E%87%E9%97%AE%E9%A2%98">几个反直觉的概率问题</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95">洗牌算法</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E9%80%92%E5%BD%92%E8%AF%A6%E8%A7%A3">递归详解</a></li></ul></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97">第四章、高频面试系列</a><ul><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/LRU%E7%AE%97%E6%B3%95">如何实现LRU算法</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%89%93%E5%8D%B0%E7%B4%A0%E6%95%B0">如何高效寻找素数</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB">如何计算编辑距离</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/koko%E5%81%B7%E9%A6%99%E8%95%89">如何运用二分查找算法</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%8E%A5%E9%9B%A8%E6%B0%B4">如何高效解决接雨水问题</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%A6%82%E4%BD%95%E5%8E%BB%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0">如何去除有序数组的重复元素</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2">如何寻找最长回文子串</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/k%E4%B8%AA%E4%B8%80%E7%BB%84%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8">如何k个一组反转链表</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%90%88%E6%B3%95%E6%8B%AC%E5%8F%B7%E5%88%A4%E5%AE%9A">如何判定括号合法性</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%B6%88%E5%A4%B1%E7%9A%84%E5%85%83%E7%B4%A0">如何寻找消失的元素</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E7%BC%BA%E5%A4%B1%E5%92%8C%E9%87%8D%E5%A4%8D%E7%9A%84%E5%85%83%E7%B4%A0">如何寻找缺失和重复的元素</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%88%A4%E6%96%AD%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8">如何判断回文链表</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%B0%B4%E5%A1%98%E6%8A%BD%E6%A0%B7">如何在无限序列中随机抽取元素</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%BA%A7%E4%BD%8D%E8%B0%83%E5%BA%A6">如何调度考生的座位</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/UnionFind%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3">Union-Find算法详解</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/UnionFind%E7%AE%97%E6%B3%95%E5%BA%94%E7%94%A8">Union-Find算法应用</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E8%A7%A3%E5%86%B3%E7%9A%84%E6%99%BA%E5%8A%9B%E9%A2%98">一行代码就能解决的算法题</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%88%A4%E5%AE%9A%E5%AD%90%E5%BA%8F%E5%88%97">二分查找高效判定子序列</a></li></ul></li><li>第五章、计算机技术<ul><li><a href="/2016/01/01/%E6%8A%80%E6%9C%AF/linux%E8%BF%9B%E7%A8%8B">Linux的进程、线程、文件描述符是什么</a></li><li><a href="/2016/01/01/%E6%8A%80%E6%9C%AF/session%E5%92%8Ccookie">一文看懂 session 和 cookie</a></li><li><a href="/2016/01/01/%E6%8A%80%E6%9C%AF/linuxshell">关于 Linux shell 你必须知道的</a></li><li><a href="/2016/01/01/%E6%8A%80%E6%9C%AF/%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF">加密算法的前身今世</a></li><li><a href="/2016/01/01/%E6%8A%80%E6%9C%AF/%E5%9C%A8%E7%BA%BF%E7%BB%83%E4%B9%A0%E5%B9%B3%E5%8F%B0">Git/SQL/正则表达式的在线练习平台</a><h1 id="感谢如下大佬参与翻译"><a href="#感谢如下大佬参与翻译" class="headerlink" title="感谢如下大佬参与翻译"></a>感谢如下大佬参与翻译</h1>按照昵称字典序排名：<br><a href="https://github.com/ABCpril">ABCpril</a>,<br><a href="https://github.com/andavid">andavid</a>,<br><a href="https://github.com/bryceustc">bryceustc</a>,<br><a href="https://github.com/build2645">build2645</a>,<br><a href="https://github.com/CarrieOn">CarrieOn</a>,<br><a href="https://github.com/xiaochuhub">cooker</a>,<br><a href="https://github.com/Coder2Programmer">Dong Wang</a>,<br><a href="https://github.com/ExcaliburEX">ExcaliburEX</a>,<br><a href="https://github.com/floatLig">floatLig</a>,<br><a href="https://github.com/foreversolar">ForeverSolar</a>,<br><a href="https://fulinli.github.io/">Fulin Li</a>,<br><a href="https://github.com/Funnyyanne">Funnyyanne</a>,<br><a href="https://github.com/GYHHAHA">GYHHAHA</a>,<br><a href="https://hiarcher.top/">Hi_archer</a>,<br><a href="https://github.com/Iruze">Iruze</a>,<br><a href="https://github.com/Jieyixia">Jieyixia</a>,<br><a href="https://github.com/Justin-YGG">Justin</a>,<br><a href="https://github.com/Kevin-free">Kevin</a>,<br><a href="https://github.com/Lrc123">Lrc123</a>,<br><a href="https://github.com/lriy">lriy</a>,<br><a href="https://github.com/Lyjeeq">Lyjeeq</a>,<br><a href="https://greenwichmt.github.io/">MasonShu</a>,<br><a href="https://github.com/Master-cai">Master-cai</a>,<br><a href="https://github.com/miaoxiaozui2017">miaoxiaozui2017</a>,<br><a href="https://github.com/natsunoyoru97">natsunoyoru97</a>,<br><a href="https://github.com/nettee">nettee</a>,<br><a href="https://github.com/PaperJets">PaperJets</a>,<br><a href="https://github.com/qy-yang">qy-yang</a>,<br><a href="https://github.com/realism0331">realism0331</a>,<br><a href="https://github.com/HuangZiSheng001">SCUhzs</a>,<br><a href="https://github.com/Seaworth">Seaworth</a>,<br><a href="https://github.com/shazi4399">shazi4399</a>,<br><a href="https://github.com/ShuoZheLi/">ShuozheLi</a>,<br><a href="https://blog.csdn.net/SinjoyWong">sinjoywong</a>,<br><a href="https://github.com/sunqiuming526">sunqiuming526</a>,<br><a href="https://github.com/tianhaoz95">Tianhao Zhou</a>,<br><a href="https://github.com/timmmGZ">timmmGZ</a>,<br><a href="https://github.com/tommytim0515">tommytim0515</a>,<br><a href="https://github.com/upbin">upbin</a>,<br><a href="https://github.com/wadegrc">wadegrc</a>,<br><a href="https://github.com/walsvid">walsvid</a>,<br><a href="https://github.com/warmingkkk">warmingkkk</a>,<br><a href="https://github.com/Wonderxie">Wonderxie</a>,<br><a href="https://github.com/wsyzxxxx">wsyzxxxx</a>,<br><a href="https://github.com/xiaodp">xiaodp</a>,<br><a href="https://github.com/youyun">youyun</a>,<br><a href="https://github.com/yx-tan">yx-tan</a>,<br><a href="https://github.com/Mr2er0">Zero</a>,<br><a href="https://github.com/ML-ZimingMeng/LeetCode-Python3">Ziming</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jupyterlab汉化</title>
      <link href="2021/03/08/jupyterlab%E6%B1%89%E5%8C%96/"/>
      <url>2021/03/08/jupyterlab%E6%B1%89%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>mac安装jupyterlab，使用<code>pip3 install jupyterlab</code>实际上安装的还是jupyter，并不起作用，仍然需要一系列操作来完成。可以使用<code>brew install jupyterlab</code>的方式完成安装。</p><p>但此时<code>jupyterlab</code>和<code>python3</code>是什么关系呢？</p><p>实际上，<code>jupyterlab</code>依旧是引用的<code>python3</code>,而非独立安装了一份python，且两者的<code>pip</code>库通用。<code>jupyterlab</code>的库的位置在<code>/usr/local/Cellar/jupyterlab/3.0.9/libexec/lib/python3.9/site-packages</code>，而<code>python3</code>的库位置在<code>/usr/local/lib/python3.9/site-packages</code>。对于在<code>jupyterlab</code>网页界面安装的插件，会同步安装，但是通过系统<code>pip3</code>安装的，则只会安装到<code>python3</code>所在的库位置，并不会同步，且不会作用于<code>jupyterlab</code>。</p><p>比如这里我们所需要的汉化插件，<code>jupyterlab-language-pack-zh-CN</code>，若只采用默认安装的方式，并不能汉化成功，而同步安装在<code>jupyterlab</code>库的位置之后，汉化正常。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>完全卸载jupyter</title>
      <link href="2021/03/08/%E5%AE%8C%E5%85%A8%E5%8D%B8%E8%BD%BDjupyter/"/>
      <url>2021/03/08/%E5%AE%8C%E5%85%A8%E5%8D%B8%E8%BD%BDjupyter/</url>
      
        <content type="html"><![CDATA[<p>使用<code>pip(3) uninstall jupyter</code>的方式无法卸载完全，使用<code>pip-autoremove</code>包也如此，因而只能采用以下方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 uninstall -y jupyter<br>pip3 uninstall -y jupyter_core<br>pip3 uninstall -y jupyter-client<br>pip3 uninstall -y jupyter-console<br>pip3 uninstall -y notebook<br>pip3 uninstall -y qtconsole<br>pip3 uninstall -y nbconvert<br>pip3 uninstall -y nbformat<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透-可视化frp</title>
      <link href="2020/09/14/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F-%E5%8F%AF%E8%A7%86%E5%8C%96frp/"/>
      <url>2020/09/14/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F-%E5%8F%AF%E8%A7%86%E5%8C%96frp/</url>
      
        <content type="html"><![CDATA[<h2 id="软件工具"><a href="#软件工具" class="headerlink" title="软件工具"></a>软件工具</h2><p><a href="https://www.natfrp.com/">Sakura Frp</a>(Frp二次开发，可视化)</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li>注册账号并登陆</li><li>每日领取流量</li></ol><p><img src="/images/pasted-14.png" alt="upload successful"></p><ol start="3"><li>软件下载</li></ol><p><img src="/images/pasted-15.png" alt="upload successful"></p><p>推荐使用自动安装脚本，按照提示填入id和秘钥</p><p><img src="/images/pasted-16.png" alt="upload successful"></p><ol start="4"><li>添加和管理隧道</li></ol><p><img src="/images/pasted-17.png" alt="upload successful"></p><p>隧道协议分为tcp,udp,http,https,xtcp等，不同协议的区别参见网页右下方。<br>    <br>  <img src="/images/pasted-19.png" alt="upload successful"><br>  对于我们常用的远程桌面(rdp)，ssh，均可用这种方式。         </p><h3 id="服务器选择"><a href="#服务器选择" class="headerlink" title="服务器选择"></a>服务器选择</h3><p>        <br><img src="/images/pasted-20.png" alt="upload successful"><br>可建站表示支持http隧道服务映射。？M表示带宽，优先使用国内的服务器，速度较快。        </p><h3 id="TCP隧道设置"><a href="#TCP隧道设置" class="headerlink" title="TCP隧道设置"></a>TCP隧道设置</h3><p><img src="/images/pasted-21.png" alt="upload successful"></p><p>隧道名称和备注随意设置，本机地址留空即可，本地端口即为内网服务器的端口，比如ssh默认22，rdp默认3389，远程端口可以自己设置，符合规则即可，默认留空也可以。</p><p>下方的加密传输和压缩数据可打开。        </p><h3 id="HTTP隧道设置"><a href="#HTTP隧道设置" class="headerlink" title="HTTP隧道设置"></a>HTTP隧道设置</h3><p>        <br><img src="/images/pasted-22.png" alt="upload successful"><br>        和TCP协议对比，域名替代了远程端口。需要自己注册域名。绑定自己域名后，可以直接不带端口地访问自己域名。<br>        <br><img src="/images/pasted-23.png" alt="upload successful"></p><ul><li><p>备注：选择服务器时需选择 可建站的类型！</p></li><li><p>备注：建站也未必需要http隧道，使用tcp隧道也可以，但需要带端口访问。 <a href="https://gitproxy.qianqu.me/wiki/#/panel/faq?id=%e5%ae%9e%e5%90%8d%e8%ae%a4%e8%af%81%e5%88%b0%e5%ba%95%e5%8f%af%e4%bb%a5%e5%81%9a%e4%bb%80%e4%b9%88">参考链接</a>.          </p><h3 id="配置文件："><a href="#配置文件：" class="headerlink" title="配置文件："></a>配置文件：</h3><p>使用脚本安装软件后，会提示创建系统服务，按照提示输入token和隧道之后，会自动创建systemd服务。根据自身需要，可以对配置文件进行修改。<br>     <br>服务脚本类似如下：</p></li></ul><p><img src="/images/pasted-24.png" alt="upload successful"></p><p>其中被遮挡的部分为个人秘钥，数字部分为隧道列表<br>    <br><img src="/images/pasted-25.png" alt="upload successful"><br>    <br>可以看出，355729隧道正常启动，通过yfsonline.top即可访问.</p><p>对于同一个服务器的不同隧道端口，可以修改配置文件<br>    <br><img src="/images/pasted-26.png" alt="upload successful"></p><p>对于不同的服务器，比如上面所列，则对于每一个服务器需要额外配置。目前所采用的方式为新建systemd服务(很蠢但有效)，如下：<br>    <br><img src="/images/pasted-27.png" alt="upload successful"></p><p>随后通过<code>systemctl enable/restart *.service</code>的方式即可配置好服务。</p><h2 id="可能遇到的部分很蠢的问题"><a href="#可能遇到的部分很蠢的问题" class="headerlink" title="可能遇到的部分很蠢的问题"></a>可能遇到的部分很蠢的问题</h2><ol><li><p>服务无法正常启动<br>检查服务配置文件的隧道ID，里面的id为初次配置时生成的，在反复测试的过程中可能这个隧道已经被你删除了。</p></li><li><p>按教程配置好之后，依旧无法远程访问ssh服务<br>sshd端口是否输入正确？ sshd服务有没有开启？</p></li><li><p>服务配置文件中使用’command1 &amp;&amp; command2’开启两个服务后，无法正常访问服务<br>systemctl如何在一个service中开启两个进程，这个目前还没搞明白，就很蠢地手动创建另一个服务吧！</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Pandas Series方法 性能测试</title>
      <link href="2020/08/14/Pandas-Series%E6%96%B9%E6%B3%95-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
      <url>2020/08/14/Pandas-Series%E6%96%B9%E6%B3%95-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>对于pandas的Series数据，进行整体的数据变换是常见的事，包括类型转换，字符串切割，数据计算等等，如何高性能地完成这些数据变换，对于大规模的数据处理至关重要。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python3">import numpy as np<br>import pandas as pd<br>import timeit<br><br>a &#x3D; pd.Series(range(1000))<br><br># %timeit a.apply(lambda x:x+2)  385us<br><br>def func1(x):<br>return x + 2<br><br># %timeit func1(a) 88us<br><br># %timeit a.astype(&#39;str&#39;) 524us<br><br>def func2(x):<br>return str(x)<br><br># %timeit func2(a) 383us<br><br>b &#x3D; pd.Series([&#39;abcdefg&#39; for i in range(1000)])<br><br># %timeit b.str[3:5]  287us<br><br>def func3(x):<br>return x[3:5]<br>    <br># func3(b) mistake<br><br># 3    abcdefg<br># 4    abcdefg<br># dtype: object<br></code></pre></td></tr></table></figure><h3 id="series作为函数参数传入"><a href="#series作为函数参数传入" class="headerlink" title="series作为函数参数传入"></a>series作为函数参数传入</h3><p>series作为函数参数传入，由于未指定函数参数类型，因而该函数可以传入标量，也可以传入向量，传入向量则为向量运算。但需要注意的是，对于<code>[]</code>切片运算，如果传入的是向量，并不会对内部标量进行切割，而是对向量本身进行切割，这也导致了执行<code>func3(b)</code>的时候，没能达成我们想要的目标。由于是向量运算，这种方式执行的速度比较快。</p><h3 id="series作为主体，调用函数"><a href="#series作为主体，调用函数" class="headerlink" title="series作为主体，调用函数"></a>series作为主体，调用函数</h3><p>series作为主题，通过<code>.func</code>的形式调用函数，这种方式的速度较慢，耗时较长。尤其是通常使用的<code>.astype</code>和<code>.apply</code>，会降低运行效率。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python 学习笔记</title>
      <link href="2020/08/14/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2020/08/14/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<ul><li><code>str</code>是<code>python</code>的内建数据类型</li></ul><h2 id="Pandas-Series-字符串操作"><a href="#Pandas-Series-字符串操作" class="headerlink" title="Pandas Series 字符串操作"></a>Pandas Series 字符串操作</h2><p><code>pandas</code>的series内元素为<code>str</code>类型时，如果需要对整列的字符串进行变换，是无法直接调用字符串函数的，如<code>[]</code>截取操作，<code>count</code>计数，<code>split</code>分割操作等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python3">s &#x3D; pd.Series([&#39;A&#39;,&#39;b&#39;,&#39;C&#39;,&#39;bbhello&#39;,&#39;123&#39;,np.nan,&#39;hj&#39;])<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">0          A<br>1          b<br>2          C<br>3    bbhello<br>4        123<br>5        NaN<br>6         hj<br>dtype: object<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">type(s)<br>&lt;class &#39;pandas.core.series.Series&#39;&gt;<br></code></pre></td></tr></table></figure><p>如<code>s[0:1]</code>实际上截取的是<code>series</code>的第一个元素，即<code>A</code>，而不是所有数据的第一个字母组成的<code>series</code>. 使用<code>s.count(&#39;b&#39;)</code>会提示非法调用。</p><p>为了实现序列元素的批操作，可以将<code>series</code>转化为<code>strings.StringMethods</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python3">type(s.str)<br>&lt;class &#39;pandas.core.strings.StringMethods&#39;&gt;<br></code></pre></td></tr></table></figure><p>再对<code>s.str</code>进行字符串操作就可以成功了。如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">s.str.count(&#39;b&#39;)<br>0    0.0<br>1    1.0<br>2    0.0<br>3    2.0<br>4    0.0<br>5    NaN<br>6    0.0<br>dtype: float64<br></code></pre></td></tr></table></figure><p>如何对<code>Series</code>进行内部元素数据类型转换，可以使用<code>s.astype(&#39;&#39;)</code>来实现。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>windows rdp服务开启</title>
      <link href="2020/08/12/windows-rdp%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%90%AF/"/>
      <url>2020/08/12/windows-rdp%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%90%AF/</url>
      
        <content type="html"><![CDATA[<p>经过对办公室电脑一系列猛如虎的操作(安装rdpwrapper、升级企业版、升级专业版)但依旧无法远程连接rdp之后，我几乎放弃了rdp这条路，无奈地向向日葵投降。虽然能够通过网云穿和utools NAT来访问办公室电脑的jupyter服务，但处理起来数据总归是不太爽。看看高额的蒲公英rdp映射服务，还是放弃了氪金。然而，俗话说，“有志者，事竟成”，在不懈的坚持下，还是成功地得以在家连上办公室的电脑。Bingo！</p><p>远程桌面的访问其实分为三个部分：</p><h2 id="远程桌面服务器的搭建"><a href="#远程桌面服务器的搭建" class="headerlink" title="远程桌面服务器的搭建"></a>远程桌面服务器的搭建</h2><p>其实用搭建这个词不算很合适，但一时找不到合适的词，暂用此。<code>win10</code>家庭版比较尴尬的一点是，并不自带远程桌面服务器，只有企业版和专业版提供。尽管我们可以用<code>Github</code>的<code>RDP wrapper</code>来‘曲线救国’，但在当时测试时，也是bug连连，及其烦人。为了省事起见，先是用密钥升级了企业版，又用密钥升级了专业版…(我也不懂为啥当初有这种神奇操作)。考虑到使用的是公司的电脑，会不会产生法律风险。。。暂时还不知道，先不管了。</p><h2 id="公网ip"><a href="#公网ip" class="headerlink" title="公网ip"></a>公网ip</h2><p>这一步也是最为烦人的一步。我之前的<code>vps</code>服务器基本到期，没有额外的公网ip做映射。网云穿等一些列服务商也由于政策原因(真的，还是接口？)，关闭了免费的3389映射服务，并将其设为收费专线服务，一年几百大洋，太黑了。一想到自己搭建<code>vps</code>，还得买主机，配置<code>frp</code>，妈耶，要疯了。</p><p>后来发现了知乎上有人推荐的两款工具，<a href="http://www.natfrp.com/">SakuraLauncher</a>和<a href="http://www.zerotier.com/">ZeroTiger</a>. 前者是基于<code>frp</code>，开放了免费的<code>frp</code>服务线路，后者应用<code>VPN异地组网技术</code>。简单的设置后，即可实现公网<code>ip</code>的映射。</p><h2 id="rdp服务开启"><a href="#rdp服务开启" class="headerlink" title="rdp服务开启"></a>rdp服务开启</h2><p>理论上来说，以上两步完成之后，就已经可以愉快地远程办公了。但很不幸，failed。</p><p>防火墙的问题？关闭防火墙也不行。允许应用通过防火墙？该通过不该通过的都通过了也不行… = = </p><p>看着<code>frp log</code>不断地报错，心都要碎了。一直拒绝、拒绝、拒绝连接。以为是有其他应用抢占<code>3389</code>端口，但用 <code>netstat -ano | findstr 3389</code> 一直为空。</p><p>此时，灵光一现，这他喵不会是没有开启远程桌面服务导致的吧？然后赶快把本机执行了一下上面命令：</p><p><img src="/images/pasted-12.png" alt="upload successful"></p><p>你说尴尬不尴尬，办公室那台，没有开启3389服务？什么鬼，我明明什么都没有做啊！</p><p>硬着头皮上网搜，“如何开启3389服务”，找到救命稻草<a href="https://www.cnblogs.com/dsli/p/7452535.html">cmd开启3389</a><br>启发下，打开注册表，定位到<code>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Terminal Server</code>，修改<code>fDenyTSConnections</code>的字段为<code>0</code>，即不阻止远程连接。</p><p>备注：修改端口可以通过修改<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\Wds\rdpwd\Tds\tcp</code>字段<code>PortNumber</code>来实现。</p><h2 id="总结"><a href="#总结" class="headerlink" title=" 总结"></a> 总结</h2><p>回顾这一路，也是坑位连连。有系统的限制、网络资源的限制以及潜在的各种深坑。其中注册表那部分最初最令人困惑。怀疑是从家庭版升级到企业版后，安全策略会禁止远程访问，导致注册表字段修改。而升级到专业版后，则继承了这一点。表现为系统设置处显示可用，但本地并没监听3389端口，导致实际无法连接。<br><img src="/images/pasted-13.png" alt="upload successful"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>windows 批处理解压缩文件</title>
      <link href="2020/08/06/windows-%E6%89%B9%E5%A4%84%E7%90%86%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6/"/>
      <url>2020/08/06/windows-%E6%89%B9%E5%A4%84%E7%90%86%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>今天在黑翼实习的过程中，廖师兄提到接下来数据处理要放到linux下的原因是数据解压的考虑。观察数据压缩的格式为7z后缀，而windows其实是有7z压缩软件的，相比能够通过命令行的形式来实现解压缩，从而结合脚本完成批量解压。</p><p>数据处理用的语言为python，最初的想法是调用python的逻辑来实现解压，后来觉得又没有太大的必要。因而考虑用bat脚本来实现。</p><p>7z的使用说明如下：</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>7z，全称7-Zip， 是一款开源软件。是目前公认的压缩比例最大的压缩解压软件。</p><ul><li>主页：<a href="http://www.7-zip.org/">http://www.7-zip.org/</a></li><li>中文主页：<a href="http://7z.sparanoid.com/">http://7z.sparanoid.com/</a></li><li>命令行版本下载：<a href="http://7z.sparanoid.com/download.html">http://7z.sparanoid.com/download.html</a></li><li>主要特征：<ul><li>全新的LZMA算法加大了7z格式的压缩比</li><li>支持格式：<ul><li>压缩 / 解压缩：7z, XZ, BZIP2, GZIP, TAR, ZIP</li><li>仅解压缩：ARJ, CAB, CHM, CPIO, DEB, DMG, FAT, HFS, ISO, LZH, LZMA, MBR, MSI, NSIS, NTFS, RAR, RPM, UDF, VHD, WIM, XAR, Z</li></ul></li></ul></li></ul><h3 id="退出代码"><a href="#退出代码" class="headerlink" title="退出代码"></a>退出代码</h3><ul><li>0 ： 正常，没有错误；</li><li>1 ： 警告，没有致命的错误，例如某些文件正在被使用，没有被压缩；</li><li>2 ： 致命错误；</li><li>7 ： 命令行错误；</li><li>8 ： 没有足够的内存；</li><li>255 ： 用户停止了操作；</li></ul><h3 id="使用语法"><a href="#使用语法" class="headerlink" title="使用语法"></a>使用语法</h3><p>7z &lt;命令行&gt; [&lt;选项&gt;…] &lt;基本档案名称&gt; [&lt;参数变量&gt;…]</p><ul><li>在方括号内的表达式(“[” 和 “]”之间的字符)是可选的。</li><li>在书名号内的表达式(“&lt;” 和 “&gt;”之间的字符)是必须替换的表达式(而且要去掉括号)。</li></ul><p>7-Zip 支持和 Windows 相类似的通配符：</p><ul><li>“*”可以使用星号代替零个或多个字符。 </li><li>“?”可以用问号代替名称中的单个字符。</li></ul><p>如果只用*，7-Zip 会将其视为任何扩展名的全部文件。</p><h3 id="命令及实例"><a href="#命令及实例" class="headerlink" title="命令及实例"></a>命令及实例</h3><ol><li><p>a 添加文件到压缩档案。</p><ul><li>7z a archive1.zip subdir\ ：增加subdir文件夹下的所有的文件和子文件夹到archive1.zip中，archived1.zip中的文件名包含subdir\前缀。</li><li>7z a archive2.zip .\subdir* ：增加subdir文件夹下的所有的文件和子文件夹到archive1.zip中，archived2.zip中的文件名不包含subdir\前缀。</li><li>cd /D c:\dir1\ </li><li>7z a c:\archive3.zip dir2\dir3\ ：archiive3.zip中的文件名将包含dir2\dir3\前缀，但是不包含c:\dir1前缀。</li><li>7z a Files.7z *.txt -r ： 增加当前文件夹及其子文件夹下的所有的txt文件到Files.7z中。</li></ul></li><li><p>b 测试 CPU 运行速度及检查内存错误。</p></li><li><p>d 从压缩档案删除文件。</p><ul><li>7z d archive.zip *.bak -r ：从archive.zip中删除所有的bak文件。</li></ul></li><li><p>e 从压缩档案中释放文件到当前目录中。或者到指定的输出文件夹。输出文件夹设置可以通过 -o (设置输出文件夹) 选项来更改。此命令会将所有被释放的文件放置到一个文件夹。如果您想使用完整路径释放文件，您必须使用 x (完整路径释放) 命令。 </p><ul><li>7z e archive.zip ：从压缩档案 archive.zip 中释放所有文件到当前文件夹。</li><li>7z e archive.zip -oc:\soft *.cpp ：从压缩档案 archive.zip 中释放 *.cpp 文件到 c:\soft 文件夹。</li></ul></li><li><p>l 列出压缩档案内容。</p><ul><li>7z l archiv.zip ：列出压缩档案 archive.zip 的内容。</li></ul></li><li><p>t 测试压缩档案文件的完整性。</p><ul><li>7z t archive.zip *.doc ：在压缩档案 archive.zip 中测试 *.doc 文件的完整性。</li></ul></li><li><p>u 在压缩档案文件中使用较新的文件替换掉较旧的文件。</p><ul><li>7z u archive.zip *.doc ：在压缩档案 archive.zip 中更新 *.doc 文件。</li></ul></li><li><p>x 在当前目录中，使用完整路径从压缩档案中释放文件.或者到指定的输出文件夹。<br> -7z x archive.zip ：从压缩档案 archive.zip 中释放所有文件到当前文件夹。<br> -7z x archive.zip -oc:\soft *.cpp ：从压缩档案 archive.zip 中释放 *.cpp 文件到 c:\soft 文件夹。</p></li></ol><h3 id="更多的选项"><a href="#更多的选项" class="headerlink" title="更多的选项"></a>更多的选项</h3><ol><li><p>–在命令行中使“–”后的选项开关“-”都失效。这样就允许在命令行中使用文件名以“-”开头的文件。</p><ul><li>7z t – -ArchiveName.7z ：测试 -ArchiveName.7z 压缩档案.</li></ul></li><li><p>-i 指定压缩时附加文件或一类文件。此选项可附件添加多个类型。</p><ul><li>i[<recurse_type>]<file_ref> 其中<recurse_type>为可以为r[- | 0]（具体的-r选项见后面-r），<file_ref>可以为@{listfile} | !{wildcard}。</li><li>7z a -tzip src.zip <em>.txt -ir!DIR1\</em>.cpp ：从当前目录中添加 *.txt 文件，和 DIR1 目录及其子目录中的 *.cpp 文件到 src.zip 压缩档案。</li></ul></li><li><p>-x 指定某一文件或某一类文件从操作中排除。此选项可同时排除多个类型。</p><ul><li>x[<recurse_type>]<file_ref> 其中<recurse_type>为可以为r[- | 0]（具体的-r选项见后面-r），<file_ref>可以为@{listfile} | !{wildcard}。</li><li>7z a -tzip archive.zip <em>.txt -x!temp.</em> ：添加除 temp.* 文件之外的所有 *.txt 文件到压缩档案 archive.zip。</li></ul></li><li><p>-o 指定释放文件的输出文件夹。此选项只能和释放命令配合使用。</p><ul><li>7z x archive.zip -oc:\Doc ：从 archive.zip 压缩档案释放所有文件到 c:\Doc 文件夹。</li></ul></li><li><p>-r 递归子目录选项。</p></li><li><p>-r 开启递归子目录。对于 e (释放)、l (列表)、t (测试)、x (完整路径释放) 这些在压缩档案中操作的命令， 会默认使用此选项。 </p></li><li><p>-r- 关闭递归子目录。对于 a (添加)、d (删除)、u (更新) 等所有需扫描磁盘文件的命令，会默认使用此选项。 </p></li><li><p>-r0 开启递归子目录。但只应用于通配符。 </p><ul><li>7z l archive.zip -r- *.doc ：列出在 archive.zip 压缩档案中根目录下的 *.doc 文件。 </li><li>7z a -tzip archive.zip -r src*.cpp src*.h ：将 src 目录及其子目录中的 *.cpp 及 *.h 文件添加到 archive.zip 压缩档案。</li></ul></li><li><p>-t 指定压缩档案格式。指定压缩档案格式。它们可以是：zip、7z、rar、cab、gzip、bzip2、tar 或其它格式。而 默认值是 7z 格式。 </p><ul><li>7z a -tzip archive.zip *.txt ：使用 zip 格式从当前目录中添加所有 *.txt 文件到压缩档案 archive.zip。</li></ul></li><li><p>-y 使 7-Zip 执行命令时的大多数提示失效。您可以使用此选项来阻止在 e (释放) 和 x (完整路径释放) 命令中文件覆盖时的提示。</p><ul><li>7z x src.zip -y ：从 src.zip 释放所有文件。所有的覆盖提示将被阻止且所有相同文件名的文件将被覆盖。</li></ul></li><li><p>-v指定分卷大小。</p><ul><li>{Size}[b | k | m | g] </li><li>指定分卷大小，可以使用字节、KB(1 KB＝1024 字节)，MB(1 MB = 1024 KB)或 GB(1 GB = 1024 MB)。如果您只指定了 {Size}，7-zip 将把它视为字。 </li><li>7z a a.7z *.txt -v10k -v15k -v2m ： 创建 a.7z 分卷压缩档案。第一个分卷为 10 KB，第二个为 15 KB，剩下全部为 2 MB。</li></ul></li><li><p>-p 指定密码。</p><ul><li>7z x archive.zip -psecret ：将设有密码“secret”的压缩档案 archive.zip 中所有文件释放。</li></ul></li><li><p>-ao 指定在释放期间如何覆盖硬盘上现有的同名文件。</p><ul><li>语法：-ao[a | s | u ]</li><li>-aoa 直接覆盖现有文件，而没有任何提示。 </li><li>-aos 跳过现有文件，其不会被覆盖。 </li><li>-aou 如果相同文件名的文件以存在，将自动重命名被释放的文件。举个例子，文件 file.txt 将被自动重命名为 file_1.txt。 </li><li>-aot 如果相同文件名的文件以存在，将自动重命名现有的文件。举个例子，文件 file.txt 将被自动重命名为 file_1.txt。 </li><li>7z x test.zip -aoa ：从压缩档案 test.zip 中释放所有文件并却不做提示直接覆盖现有文件。</li></ul></li><li><p>-an 不解析命令行中的 archive_name 区域。此选项必须和 -i (附加文件) 开关一起使用。比如您为压缩档案使用列表文件，您就需要指定 -ai 选项，所以您需要禁止解析命令行中的 archive_name 区域。<br>实例见后面的-ai和-ax中。</p></li><li><p>-ai 指定附加文件，包括压缩档案文件名及通配符。此选项可同时附加多个类型。</p><ul><li>ai[<recurse_type>]<file_ref> 其中<recurse_type>为可以为r[- | 0]（具体的-r选项见后面-r），<file_ref>可以为@{listfile} | !{wildcard}。</li><li>7z t -an -air!*.7z ： 在当前目录及子目录下测试 *.7z 压缩档案。</li></ul></li><li><p>-ax 指定必须从操作中排除的压缩档案。此选项可同时排除多个类型。</p><ul><li>ax[<recurse_type>]<file_ref> 其中<recurse_type>为可以为r[- | 0]（具体的-r选项见后面-r），<file_ref>可以为@{listfile} | !{wildcard}。</li><li>7z t -an -ai!<em>.7z -ax!a</em>.7z ：测试除 a*.7z 之外的 *.7z 压缩档案。</li></ul></li></ol><p>更多的不常用的选项，可以查看帮助。例如：-m设置压缩算法；-scs 设置要压缩的文件的列表文件的字符集；-seml通过电子邮件发送压缩档；-sfx创建自释放档；-si从标准输入读入数据，-so从输出到标准输出；-slp设置大内存模式；-slt显示技术信息；-ssc设置区分大小写；-ssw压缩正在写入的文件；-u更新选项。</p><p><code>7z -e</code> 后面跟的是相对路径，<code>7z -x</code>后面跟的是绝对路径。</p><p>下面是bat的脚本</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br><span class="hljs-comment">REM %cd% 终端当前目录</span><br><span class="hljs-comment">REM %%~dp0 为脚本所在目录</span><br><span class="hljs-comment">REM %%用在脚本中</span><br><span class="hljs-comment">REM %s用在命令行中</span><br><span class="hljs-comment">REM 7z x 后面跟绝对路径</span><br><span class="hljs-comment">REM 7z e 后面跟相对路径</span><br><span class="hljs-comment">REM 7z -aos 表示若文件已存在，跳过解压</span><br><span class="hljs-comment">REM 两行cd 源于 7z x -aos %%s -o%%~dps 在for循环中无法正常执行，用反复进退目录的方式曲线救国。这么做效率会下降，以后再修正。</span><br><span class="hljs-comment">REM /R 表示递归搜索</span><br><br><span class="hljs-built_in">set</span> work_path=&quot;<span class="hljs-variable">%cd%</span>&quot;<br><span class="hljs-built_in">echo</span> work_path=<span class="hljs-variable">%work_path%</span><br><span class="hljs-keyword">for</span> /R <span class="hljs-variable">%work_path%</span> <span class="hljs-variable">%%s</span> <span class="hljs-keyword">in</span> (*.<span class="hljs-number">7</span>z.<span class="hljs-number">001</span>) <span class="hljs-keyword">do</span> (<br>    <span class="hljs-built_in">cd</span> <span class="hljs-variable">%%~</span>dps<br>    <span class="hljs-number">7</span>z x -aos <span class="hljs-variable">%%s</span><br>    <span class="hljs-built_in">cd</span> <span class="hljs-variable">%work_path%</span><br>)<br></code></pre></td></tr></table></figure><ul><li>REM 表示bat脚本的注释</li><li><code>7z x -aos</code> 表示 解压到当前目录</li><li>%%s表示与<code>*.7z.001</code>匹配的文件全路径</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs log">%I 引用I<br>%~I         - expands %I removing any surrounding quotes (&quot;)<br>%~fI        - expands %I to a fully qualified path name<br>%~dI        - expands %I to a drive letter only<br>%~pI        - expands %I to a path only<br>%~nI        - expands %I to a file name only<br>%~xI        - expands %I to a file extension only<br>%~sI        - expanded path contains short names only<br>%~aI        - expands %I to file attributes of file<br>%~tI        - expands %I to date&#x2F;time of file<br>%~zI        - expands %I to size of file<br><br>The modifiers can be combined to get compound results:<br>%~dpI       - expands %I to a drive letter and path only<br>%~nxI       - expands %I to a file name and extension only<br>%~fsI       - expands %I to a full path name with short names only<br></code></pre></td></tr></table></figure><p>在上面，给出了cmd下提取路径或文件名的一些操作，如果用在脚本中，<code>%</code>改为<code>%%</code>即可。其中<code>I</code>表示变量，在这里，我们用的是<code>S</code>. </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>工作方向</title>
      <link href="2020/07/05/%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%90%91/"/>
      <url>2020/07/05/%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h2 id="晚饭"><a href="#晚饭" class="headerlink" title="晚饭"></a>晚饭</h2><p>董必杰、郭爽什么身份，开会内容主要是什么？我参与的意义在哪里？</p><h2 id="基金"><a href="#基金" class="headerlink" title="基金"></a>基金</h2><p>晚饭时提及，项目可能要延期开展（这部分确认一下），确认是否可行，大概日期，需要准备什么，任职岗位及预期待遇，发展前景。</p><h2 id="投资顾问"><a href="#投资顾问" class="headerlink" title="投资顾问"></a>投资顾问</h2><p>感兴趣的几个方向：</p><ol><li>教育，感觉市场比较大，投资者对这个领域关注比较多，尤其是在线教育这个行业。</li><li>文娱，受众面比较广，受舆论、热评比较较大，需要对不同产品方向的受众有一定了解。</li><li>环保，新兴领域，受政府扶持较大。</li></ol><p>教育依赖教育部，文娱依赖大企业，环保依赖政府机构。这几点都是初步的想法，有什么建议及推荐的方向，如果要做到的话，需要准备些什么？</p><h2 id="会计"><a href="#会计" class="headerlink" title="会计"></a>会计</h2><p>用友，能否进，怎么进，做什么，需要准备什么？</p><p>管理方向的会计</p><p>根据简历适合投递什么岗位？</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>windows 开机自启</title>
      <link href="2020/05/14/windows-%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/"/>
      <url>2020/05/14/windows-%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/</url>
      
        <content type="html"><![CDATA[<p>windows开机自启软件的方式有很多，有些可以通过软件自身设置完成，有些可以通过win10 自带任务管理完成。比较便捷的方式，直接把快捷方式移到指定目录即可。</p><p><code>C:\Users\[yourname]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code></p><p>打开此目录的便捷方式为 打开<code>运行</code>，输入<code>shell:startup</code>.</p><p><img src="/images/pasted-10.png" alt="upload successful"></p><p><img src="/images/pasted-11.png" alt="upload successful"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vcxsrv 载入配置文件</title>
      <link href="2020/05/14/vcxsrv-%E8%BD%BD%E5%85%A5%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>2020/05/14/vcxsrv-%E8%BD%BD%E5%85%A5%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>vcxsrv每次通过xlauch打开时，都要用鼠标进行一系列点点点。如何能够一步到位？</p><p>只需要将快捷方式中加上参数 <code>-run</code> 即可。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">xlauch.exe -run pathofconfig<br></code></pre></td></tr></table></figure><p>如下图：</p><p><img src="/images/pasted-9.png" alt="upload successful"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>金融杠杆支撑天价片酬</title>
      <link href="2020/05/10/%E9%87%91%E8%9E%8D%E6%9D%A0%E6%9D%86%E6%94%AF%E6%92%91%E5%A4%A9%E4%BB%B7%E7%89%87%E9%85%AC/"/>
      <url>2020/05/10/%E9%87%91%E8%9E%8D%E6%9D%A0%E6%9D%86%E6%94%AF%E6%92%91%E5%A4%A9%E4%BB%B7%E7%89%87%E9%85%AC/</url>
      
        <content type="html"><![CDATA[<ul><li>天价片酬谁来买单？</li></ul><p><video src='https://vdn3.vzuu.com/LD/199938f0-04fd-11e9-9e14-0a580a415826.mp4?disable_local_cache=1&bu=http-com&expiration=1589112809&auth_key=1589112809-0-0-7b9c1fbcd7a294e6edcb992ecb0e227c&f=mp4'        type='video/mp4'        controls='controls'         preload="auto"       width='100%'        height='100%'><br></video></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>V2ray 共享热点</title>
      <link href="2020/05/02/V2ray-%E5%85%B1%E4%BA%AB%E7%83%AD%E7%82%B9/"/>
      <url>2020/05/02/V2ray-%E5%85%B1%E4%BA%AB%E7%83%AD%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>最近肺炎爆发, 虽然上班了但是因为公司要节省口罩, 所以大部分时间都在家里待岗, 正好电脑上已经不再用ss, ssr也准备不用了 (越来越不稳定了) 于是尝试了一下共享V2Ray的局域网连接, 很快就成功了, 闲得无事写篇博客记录一下.<br>准备</p><ol><li>电脑1台</li><li>安装好V2RayN<br>详细步骤<br>设置V2RayN<br>因为现在懒得自己弄, 所以随便找个机场, 拿到订阅链接后在V2RayN中更新节点并在设置中允许局域网连接, 同时留意一下本地监听端口, 如图显示是10808端口.</li></ol><p><img src="/images/pasted-4.png" alt="upload successful"><br>打开移动热点<br>以win10系统为例, 在设置中打开移动热点:</p><p><img src="/images/pasted-5.png" alt="upload successful"><br>然后在网络适配器选项中, 查看已经开启的热点并获取ip地址:</p><p><img src="/images/pasted-6.png" alt="upload successful"><br>连接热点<br>首先在设置中查看已开启的代理的手动设置项, 可以看到端口为10809.</p><p><img src="/images/pasted-7.png" alt="upload successful"><br>在手机上连接热点, 并手动设置代理服务器ip以及端口, 从上面步骤可知分别为: 192.168.137.1和10809.</p><p><img src="/images/pasted-8.png" alt="upload successful"><br>到这里就大功告成了, 其他类似的共享到局域网的热点都是差不多的步骤, ssr的设置也一样.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jupyter修改外观配置</title>
      <link href="2020/04/22/Jupyter%E4%BF%AE%E6%94%B9%E5%A4%96%E8%A7%82%E9%85%8D%E7%BD%AE/"/>
      <url>2020/04/22/Jupyter%E4%BF%AE%E6%94%B9%E5%A4%96%E8%A7%82%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>jupyter默认的宽度比较小，当将浏览器全屏的时候，仅有一半的页面宽度能够得以利用，画图的时候展示的范围比较小。为了解决这个问题，只需要在设置主题时修改配置即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jt -t grade3 -cellw 90% -T<br></code></pre></td></tr></table></figure><ul><li><code>jt</code>为主题配置命令</li><li><code>-t grade3</code> 为使用<code>grade3</code>主题</li><li><code>-cellw 90%</code> 为设置单元格宽度为页面宽度的90%</li><li><code>-T</code> 为显示工具栏。</li></ul><p>效果如下图：</p><p><img src="/images/pasted-3.png" alt="upload successful"></p><p><font color='red'>备注：若使图片的宽度也变大，需要在设定TCanvas修改默认的宽度。</font></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>批量导入markdown文件为Hexo博客md文件</title>
      <link href="2020/04/11/%E6%89%B9%E9%87%8F%E5%AF%BC%E5%85%A5markdown%E6%96%87%E4%BB%B6%E4%B8%BAHexo%E5%8D%9A%E5%AE%A2md%E6%96%87%E4%BB%B6/"/>
      <url>2020/04/11/%E6%89%B9%E9%87%8F%E5%AF%BC%E5%85%A5markdown%E6%96%87%E4%BB%B6%E4%B8%BAHexo%E5%8D%9A%E5%AE%A2md%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>相比于普通的markdown文件，hexo的markdown文件有文件头数据，用来设定标题，创建日期，类别等信息，有时候需要批量将普通markdown文件添加头部文件数据，可以通过以下脚本实现。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> */*<br><span class="hljs-keyword">do</span><br>    name=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;file%.*&#125;</span>`<br>    sed -i <span class="hljs-string">&quot;1i\title: `echo <span class="hljs-variable">$&#123;name##*/&#125;</span>`&quot;</span> <span class="hljs-variable">$file</span><br>    sed -i <span class="hljs-string">&quot;2i\author: 远方&quot;</span> <span class="hljs-variable">$file</span><br>    sed -i <span class="hljs-string">&quot;3i\tags:&quot;</span> <span class="hljs-variable">$file</span><br>    sed -i <span class="hljs-string">&quot;4i\  - LeetCode&quot;</span> <span class="hljs-variable">$file</span><br>    sed -i <span class="hljs-string">&quot;5i\  - 算法&quot;</span> <span class="hljs-variable">$file</span><br>    sed -i <span class="hljs-string">&quot;6i\categories:&quot;</span> <span class="hljs-variable">$file</span><br>    sed -i <span class="hljs-string">&quot;7i\  - LeetCode破局攻略&quot;</span> <span class="hljs-variable">$file</span><br>    sed -i <span class="hljs-string">&quot;8i\date: 2016-01-01 19:20:00&quot;</span> <span class="hljs-variable">$file</span><br>    sed -i <span class="hljs-string">&quot;9i\---&quot;</span> <span class="hljs-variable">$file</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>其中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">name=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;file%.*&#125;</span>`<br></code></pre></td></tr></table></figure><p>截取<code>.*</code>前的字符串，表现为去后缀名，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -i <span class="hljs-string">&quot;1i\title: `echo <span class="hljs-variable">$&#123;name##*/&#125;</span>`&quot;</span> <span class="hljs-variable">$file</span><br></code></pre></td></tr></table></figure><p>从左往右截取<code>*/</code>后的数据，<code>##</code>标识截取到最后一个满足条件的，表现为去除中间路径，保留文件名。</p><ul><li><a href="https://www.cnblogs.com/kiko2014551511/p/11531558.html">参考链接</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo忽略渲染某些文件</title>
      <link href="2020/04/10/Hexo%E5%BF%BD%E7%95%A5%E6%B8%B2%E6%9F%93%E6%9F%90%E4%BA%9B%E6%96%87%E4%BB%B6/"/>
      <url>2020/04/10/Hexo%E5%BF%BD%E7%95%A5%E6%B8%B2%E6%9F%93%E6%9F%90%E4%BA%9B%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>hexo运行时会渲染source目录下所有文件，如果需要跳过某些文件，需要在hexo根目录下的<code>_config.yml</code>文件中修改配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">skip_render:</span> <br></code></pre></td></tr></table></figure><p>为</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">skip_render:</span> <span class="hljs-string">&quot;attachments/*&quot;</span><br></code></pre></td></tr></table></figure><p>如果需要跳过某些文件（如html），可以更改为</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">skip_render:</span> <span class="hljs-string">&quot;attachments/*.html&quot;</span><br></code></pre></td></tr></table></figure><p>这里提一下渲染<code>html</code>与否的区别：</p><ol><li>渲染会增加hexo启动的时常</li><li>渲染后html会内嵌入hexo框架中，成为其子界面</li><li>非渲染的html会跳转到html文件，和原来的html界面一样。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo挂载本地文件</title>
      <link href="2020/04/10/Hexo%E6%8C%82%E8%BD%BD%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/"/>
      <url>2020/04/10/Hexo%E6%8C%82%E8%BD%BD%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>在Hexo<code>source</code>目录下建立<code>attachments</code>目录，将本地文件拷贝到该目录下，然后通过链接的形式加载，如<code>[file](attachments/file)</code>.</p><ul><li><a href="attachments/jupyter%E7%B2%BE%E7%AE%80%E9%85%8D%E7%BD%AE.pdf">pdf测试文件</a></li><li><a href="attachments/p%CE%B3%E6%95%88%E7%8E%87%E5%88%BB%E5%BA%A6(%E6%96%B0).xlsx">office测试文件</a></li><li><a href="attachments/sed%E8%B7%A8%E8%A1%8C%E6%9B%BF%E6%8D%A2.md">markdown测试文件</a><br>html和pdf文件可以直接在浏览器中打开。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>markdown链接跳转</title>
      <link href="2020/04/10/markdown%E9%93%BE%E6%8E%A5%E8%B7%B3%E8%BD%AC/"/>
      <url>2020/04/10/markdown%E9%93%BE%E6%8E%A5%E8%B7%B3%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<p>此部分内容主要应用于在线markdown链接跳转，包括Hexo和jupyter，而离线本底的链接跳转比较简单，这部分跳过。</p><h2 id="jupyter链接跳转"><a href="#jupyter链接跳转" class="headerlink" title="jupyter链接跳转"></a>jupyter链接跳转</h2><p>markdown的语法中，链接一般用<code>[描述链接](链接地址)</code>这种形式表示，图片可以理解为特殊的链接，语法为<code>![图片描述](图片地址)</code>。<br>加入两个jupyter在同一目录下，分别为1.ipynb和2.ipynb. 在2中引用1可以用相对链接的形式<code>[描述1](1.ipynb)</code>，反之也可以。另外，即使不在同一个目录，只要给出相对路径也可实现跳转。比较完整的表述可以加上全连接，但一般必要性不大，不便于迁移。比如需要把文件夹整个迁移到GitHub，使用相对链接的话，跳转依旧生效。<br>如果指定跳转到jupyter内部某个地方，则可以通过添加标签的形式来实现。在跳转的目的地处添加<code>&lt;a id=link&gt;目的地&lt;/a&gt;</code>，在跳转的起点添加<code>[起点](#link)</code>，即可完整跳转链接操作。<code>&lt;a id=link&gt;目的地&lt;/a&gt;</code>的目的在于生成一个名字为link的标签(任意名字，避免重名冲突即可)，<code>[起点](#link)</code>则直接引用该标签地址(在本文档内部，省略了链接地址，只有标签地址)。由此可以知道，地址栏#的含义为跳转到文档内部的标签。如果要在其他文档中跳转到该标签，只需要在地址栏后面加上<code>#link</code>即可，如<code>[从2跳转到1的link所在处](1.ipynb#link)</code><br><font color='red'><code>#</code>后面紧跟<code>link</code>不要加空格</font><br>此外，实际上jupyter内部在新建标题的时候(<code>#</code>一级标题 <code>##</code>二级标题…)的时候，会自动在页面创建标签，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain"># 论文题目名字<br>## 第一章名字<br>### 第一节名字<br>### 第二节名字<br>## 第二章名字<br>...<br></code></pre></td></tr></table></figure><p>通过<code>[跳转到第一章第二节](pathof.ipynb#第二节名字)</code>即可便捷实现跳转。<br><font color='red'>无论是几级标题，在引用时是等价的，都只需要一个<code>#</code>，再次强调<code>#</code>的含义是引用标签</font></p><h2 id="Hexo-链接跳转"><a href="#Hexo-链接跳转" class="headerlink" title="Hexo 链接跳转"></a>Hexo 链接跳转</h2><p>有时候需要在hexo博客中引用其他文章，此时需要处理链接的问题，和jupyter类似，需要考虑到Github平台后链接怎么处理。类似地，也可以采用相对链接的方式，但需要留意到此时引用的应该是发布后的html文件，而非原来的md文件。引用相对链接先打开目标链接，比如<code>http://localhost:4000/2020/04/01/日程表/</code>，删去<code>http://localhost:4000</code>，则<code>/2020/04/01/日程表/</code>为相对链接。<br>引用该相对链接即可实现本地和Github同步跳转。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sed跨行替换</title>
      <link href="2020/04/08/sed%E8%B7%A8%E8%A1%8C%E6%9B%BF%E6%8D%A2/"/>
      <url>2020/04/08/sed%E8%B7%A8%E8%A1%8C%E6%9B%BF%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p><code>sed</code>、<code>awk</code>、<code>grep</code>一般认为是对行操作，而实际上<code>sed</code>可以跨行操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -e <span class="hljs-string">&#x27;/替换起始字符串/!b;:a;/替换终止字符串/bb;$!&#123;N;ba&#125;;:b;s/替换起始字符串.*中间包含的特定字符串，进行限制，可以为空.*替换终止字符串/替换后的字符串/&#x27;</span> -i 操作的文件<br></code></pre></td></tr></table></figure><p>需要留意，对于特殊字符需要进行转义。</p><ul><li><code>sed -e</code>表示执行后面的脚本</li><li>每一个分号表示一行命令</li><li><code>/替换起始字符串/!b;</code></li><li><code>:a;</code></li><li><code>/替换终止字符串/bb;</code></li><li><code>$!&#123;N;ba&#125;;</code></li><li><code>:b;</code></li><li><code>s/替换起始字符串.\*中间包含的特定字符串，进行限制，可以为空.\*替换终止字符串/替换后的字符串/</code>  替换命令</li><li><code>-i</code> 修改文件</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jupyter导出html无法显示图像</title>
      <link href="2020/04/08/Jupyter%E5%AF%BC%E5%87%BAhtml%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E5%83%8F/"/>
      <url>2020/04/08/Jupyter%E5%AF%BC%E5%87%BAhtml%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<p>此问题是由于root版本变更引起的。<br>在<code>root v620</code><a href="https://root.cern/doc/v620/release-notes.html#release-6.2004">更新日志</a>中可以看到关于网络部分做了诸多变更。</p><h1 id="Core-Libraries"><a href="#Core-Libraries" class="headerlink" title="Core Libraries"></a>Core Libraries</h1><ul><li>Speed-up startup, in particular in case of no or poor network accesibility, by avoiding a network access that was used as input to generate a globally unique ID for the current process.</li><li>This network access is replaced by a passive scan of the network interface. This reduces somewhat the uniqueness of the unique ID as the IP address is no longer guaranteed by the DNS server to be unique. Note that this was already the case when the network access (used to look up the hostname and its IP address) failed.<h1 id="Language-Bindings"><a href="#Language-Bindings" class="headerlink" title="Language Bindings"></a>Language Bindings</h1><h2 id="Jupyter-Notebook-Integration"><a href="#Jupyter-Notebook-Integration" class="headerlink" title="Jupyter Notebook Integration"></a>Jupyter Notebook Integration</h2></li><li>When starting Jupyter server with <code>root --notebook</code> arg1 arg2 …, extra arguments can be provided. All these arguments delivered as is to jupyter executable and can be used for configuration. Like server binding to specific host <code>root --notebook --ip=hostname</code></li><li>Remove <code>c.NotebookApp.ip = &#39;*&#39; from default jupyter config</code>. One has to provide ip address for server binding using <code>root --notebook --ip=&lt;hostaddr&gt;</code> arguments</li><li>Now Jupyter Notebooks will use JSROOT provided with ROOT installation. This allows to use notebooks without internet connection (offline).<h1 id="JavaScript-ROOT"><a href="#JavaScript-ROOT" class="headerlink" title="JavaScript ROOT"></a>JavaScript ROOT</h1></li><li>Provide monitoring capabilities for TGeoManager object. Now geomtry with some tracks can be displayed and updated in web browser, using THttpServer monitoring capability like histogram objects.</li><li>JSROOT graphics are now supported in the JupyterLab interface. They are activated in the same way as in the classic Jupyter, i.e. by typing at the beginning of a notebook cell:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">%jsroon on<br></code></pre></td></tr></table></figure>从上述变更中可以解释最近版本为什么突然jupyter无法正常显示图像了。<br>root官方为了解决弱网络连接下jupyter显示问题，把jupyter的js运行库放在了新版本root安装包中，运行jupyter时会自动调用这个js库。 但是需要留意的是 <font color='red'>仅使用root –notebook这种方式启动jupyter才会生效！使用jupyter-notebook的方式启动并不会生效！！图依旧无法正常显示。</font> 而前面的博客<a href="/2020/03/25/Jupyter%E7%A6%BB%E7%BA%BF%E9%85%8D%E7%BD%AE/">Jupyter离线配置</a>中已经提过，为了解决这个问题，在jupyter的配置文件中可以新增<code>static</code>路径来解决，解决了在jupyter运行时的绘图问题。<br>但这个问题也带来了其他的问题。其一是，无法自由地分享<code>.ipynb</code>和对应导出的<code>.html</code>。分享的文件在nbviewer中无法显示图像。猜测是root更新之后把原来的链接进行了替换。<br>为了做验证，新建了一个测试linux环境，编译安装了<code>root v61902</code>，发现问题和<code>v620</code>一致，下载<code>v61802</code>并安装jupyter环境，无需任何配置，输入<code>jupyter-notebook</code>即可正常显示图像和导出有图的html文件，<code>nbviewer</code>也可正常显示上传到github的<code>.ipynb</code>文件。显然，这个版本和最初用的版本一致，在弱网条件下无法正常显示。<br>把<code>v620</code>和<code>v618</code>导出的<code>html</code>文件做对比，我们把<code>v620</code>和<code>v618</code>分别定义为<code>offline</code>和<code>online</code>。两者对应的测试文件为<a href="/attachments/offline.html"><code>offline.html</code></a>和<a href="/attachments/online.html"><code>online.html</code></a>. 点击链接即可查看.<br><del><font color='red'><br>需要留意，在本机localhost打开hexo时，online.html也无法正常画图，这是由于html挂在了localhost:4000服务上，js判断根据服务判断跳过了绘图。把该文件下载下来，用浏览器打开可以正常显示。<br></font> 此问题已修复，Hexo跳过渲染html文件之后正常运行</del></li></ul><p>用文件比对工具对比，发现两者的差异</p><h4 id="offline"><a href="#offline" class="headerlink" title="offline"></a>offline</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">require</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="javascript">    <span class="hljs-comment">// All requirements met (we are in jupyter notebooks or we loaded requirejs before).</span></span><br>    display_root_plot_1586256162911();<br><span class="javascript">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">    <span class="hljs-comment">// We are in jupyterlab, we need to insert requirejs and configure it.</span></span><br><span class="javascript">    <span class="hljs-comment">// Jupyterlab might be installed in a different base_url so we need to know it.</span></span><br><span class="javascript">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> base_url = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;jupyter-config-data&#x27;</span>).innerHTML).baseUrl;</span><br><span class="javascript">    &#125; <span class="hljs-keyword">catch</span>(_) &#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> base_url = <span class="hljs-string">&#x27;/&#x27;</span>;</span><br>    &#125;<br><span class="javascript">    <span class="hljs-comment">// Try loading a local version of requirejs and fallback to cdn if not possible.</span></span><br><span class="javascript">    requirejs_load(base_url + <span class="hljs-string">&#x27;static/components/requirejs/require.js&#x27;</span>, requirejs_success(base_url), <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        requirejs_load(<span class="hljs-string">&#x27;https://cdnjs.cloudflare.com/ajax/libs/require.js/2.2.0/require.min.js&#x27;</span>, requirejs_success(base_url), <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;root_plot_1586256162911&quot;</span>).innerHTML = <span class="hljs-string">&quot;Failed to load requireJs&quot;</span>;</span><br>        &#125;);<br>    &#125;);<br>&#125;<br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">requirejs_load</span>(<span class="hljs-params">src, on_load, on_error</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);</span><br>    script.src = src;<br>    script.onload = on_load;<br>    script.onerror = on_error;<br><span class="javascript">    <span class="hljs-built_in">document</span>.head.appendChild(script);</span><br>&#125;<br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">requirejs_success</span>(<span class="hljs-params">base_url</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">require</span>.config(&#123;</span><br><span class="javascript">            baseUrl: base_url + <span class="hljs-string">&#x27;static/&#x27;</span></span><br>        &#125;);<br>        display_root_plot_1586256162911();<br>    &#125;<br>&#125;<br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">display_root_plot_1586256162911</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">require</span>([<span class="hljs-string">&#x27;scripts/JSRootCore&#x27;</span>],</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">Core</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> obj = Core.JSONR_unref(&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TCanvas&quot;</span>,<span class="hljs-string">&quot;fUniqueID&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits&quot;</span>:<span class="hljs-number">3342344</span>,<span class="hljs-string">&quot;fLineColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineStyle&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineWidth&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fFillColor&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fFillStyle&quot;</span>:<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;fLeftMargin&quot;</span>:<span class="hljs-number">0.1</span>,<span class="hljs-string">&quot;fRightMargin&quot;</span>:<span class="hljs-number">0.1</span>,<span class="hljs-string">&quot;fBottomMargin&quot;</span>:<span class="hljs-number">0.1</span>,<span class="hljs-string">&quot;fTopMargin&quot;</span>:<span class="hljs-number">0.1</span>,<span class="hljs-string">&quot;fXfile&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;fYfile&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;fAfile&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fXstat&quot;</span>:<span class="hljs-number">0.99</span>,<span class="hljs-string">&quot;fYstat&quot;</span>:<span class="hljs-number">0.99</span>,<span class="hljs-string">&quot;fAstat&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;fFrameFillColor&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fFrameLineColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fFrameFillStyle&quot;</span>:<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;fFrameLineStyle&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fFrameLineWidth&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fFrameBorderSize&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fFrameBorderMode&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fX1&quot;</span>:<span class="hljs-number">-91.2875068014492</span>,<span class="hljs-string">&quot;fY1&quot;</span>:<span class="hljs-number">-136.475010235236</span>,<span class="hljs-string">&quot;fX2&quot;</span>:<span class="hljs-number">821.587506801449</span>,<span class="hljs-string">&quot;fY2&quot;</span>:<span class="hljs-number">1237.27501023524</span>,<span class="hljs-string">&quot;fXtoAbsPixelk&quot;</span>:<span class="hljs-number">69.6000541484835</span>,<span class="hljs-string">&quot;fXtoPixelk&quot;</span>:<span class="hljs-number">69.6000541484835</span>,<span class="hljs-string">&quot;fXtoPixel&quot;</span>:<span class="hljs-number">0.762426388748505</span>,<span class="hljs-string">&quot;fYtoAbsPixelk&quot;</span>:<span class="hljs-number">425.109273751662</span>,<span class="hljs-string">&quot;fYtoPixelk&quot;</span>:<span class="hljs-number">425.109273751662</span>,<span class="hljs-string">&quot;fYtoPixel&quot;</span>:<span class="hljs-number">-0.343585072223222</span>,<span class="hljs-string">&quot;fUtoAbsPixelk&quot;</span>:<span class="hljs-number">5e-5</span>,<span class="hljs-string">&quot;fUtoPixelk&quot;</span>:<span class="hljs-number">5e-5</span>,<span class="hljs-string">&quot;fUtoPixel&quot;</span>:<span class="hljs-number">696</span>,<span class="hljs-string">&quot;fVtoAbsPixelk&quot;</span>:<span class="hljs-number">472.00005</span>,<span class="hljs-string">&quot;fVtoPixelk&quot;</span>:<span class="hljs-number">472</span>,<span class="hljs-string">&quot;fVtoPixel&quot;</span>:<span class="hljs-number">-472</span>,<span class="hljs-string">&quot;fAbsPixeltoXk&quot;</span>:<span class="hljs-number">-91.2875068014492</span>,<span class="hljs-string">&quot;fPixeltoXk&quot;</span>:<span class="hljs-number">-91.2875068014492</span>,<span class="hljs-string">&quot;fPixeltoX&quot;</span>:<span class="hljs-number">1.31160203103865</span>,<span class="hljs-string">&quot;fAbsPixeltoYk&quot;</span>:<span class="hljs-number">1237.27501023524</span>,<span class="hljs-string">&quot;fPixeltoYk&quot;</span>:<span class="hljs-number">-136.475010235236</span>,<span class="hljs-string">&quot;fPixeltoY&quot;</span>:<span class="hljs-number">-2.91048733150524</span>,<span class="hljs-string">&quot;fXlowNDC&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fYlowNDC&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fXUpNDC&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fYUpNDC&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fWNDC&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fHNDC&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fAbsXlowNDC&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fAbsYlowNDC&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fAbsWNDC&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fAbsHNDC&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fUxmin&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fUymin&quot;</span>:<span class="hljs-number">0.9</span>,<span class="hljs-string">&quot;fUxmax&quot;</span>:<span class="hljs-number">730.3</span>,<span class="hljs-string">&quot;fUymax&quot;</span>:<span class="hljs-number">1099.9</span>,<span class="hljs-string">&quot;fTheta&quot;</span>:<span class="hljs-number">30</span>,<span class="hljs-string">&quot;fPhi&quot;</span>:<span class="hljs-number">30</span>,<span class="hljs-string">&quot;fAspectRatio&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fNumber&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTickx&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTicky&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fLogx&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fLogy&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fLogz&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fPadPaint&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fCrosshair&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fCrosshairPos&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBorderSize&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;fBorderMode&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fModified&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;fGridx&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;fGridy&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;fAbsCoord&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;fEditable&quot;</span>:<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;fFixedAspectRatio&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;fPrimitives&quot;</span>:&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TList&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;TList&quot;</span>,<span class="hljs-string">&quot;arr&quot;</span>:[&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TFrame&quot;</span>,<span class="hljs-string">&quot;fUniqueID&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits&quot;</span>:<span class="hljs-number">8</span>,<span class="hljs-string">&quot;fLineColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineStyle&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineWidth&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fFillColor&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fFillStyle&quot;</span>:<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;fX1&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fY1&quot;</span>:<span class="hljs-number">0.9</span>,<span class="hljs-string">&quot;fX2&quot;</span>:<span class="hljs-number">730.3</span>,<span class="hljs-string">&quot;fY2&quot;</span>:<span class="hljs-number">1099.9</span>,<span class="hljs-string">&quot;fBorderSize&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fBorderMode&quot;</span>:<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TGraph&quot;</span>,<span class="hljs-string">&quot;fUniqueID&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits&quot;</span>:<span class="hljs-number">1032</span>,<span class="hljs-string">&quot;fName&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;fTitle&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;fLineColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineStyle&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineWidth&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fFillColor&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fFillStyle&quot;</span>:<span class="hljs-number">1000</span>,<span class="hljs-string">&quot;fMarkerColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fMarkerStyle&quot;</span>:<span class="hljs-number">3</span>,<span class="hljs-string">&quot;fMarkerSize&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fNpoints&quot;</span>:<span class="hljs-number">664</span>,<span class="hljs-string">&quot;fX&quot;</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">26</span>,<span class="hljs-number">27</span>,<span class="hljs-number">28</span>,<span class="hljs-number">29</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">32</span>,<span class="hljs-number">33</span>,<span class="hljs-number">34</span>,<span class="hljs-number">35</span>,<span class="hljs-number">36</span>,<span class="hljs-number">37</span>,<span class="hljs-number">38</span>,<span class="hljs-number">39</span>,<span class="hljs-number">40</span>,<span class="hljs-number">41</span>,<span class="hljs-number">42</span>,<span class="hljs-number">43</span>,<span class="hljs-number">44</span>,<span class="hljs-number">45</span>,<span class="hljs-number">46</span>,<span class="hljs-number">47</span>,<span class="hljs-number">48</span>,<span class="hljs-number">49</span>,<span class="hljs-number">50</span>,<span class="hljs-number">51</span>,<span class="hljs-number">52</span>,<span class="hljs-number">53</span>,<span class="hljs-number">54</span>,<span class="hljs-number">55</span>,<span class="hljs-number">56</span>,<span class="hljs-number">57</span>,<span class="hljs-number">58</span>,<span class="hljs-number">59</span>,<span class="hljs-number">60</span>,<span class="hljs-number">61</span>,<span class="hljs-number">62</span>,<span class="hljs-number">63</span>,<span class="hljs-number">64</span>,<span class="hljs-number">65</span>,<span class="hljs-number">66</span>,<span class="hljs-number">67</span>,<span class="hljs-number">68</span>,<span class="hljs-number">69</span>,<span class="hljs-number">70</span>,<span class="hljs-number">71</span>,<span class="hljs-number">72</span>,<span class="hljs-number">73</span>,<span class="hljs-number">74</span>,<span class="hljs-number">75</span>,<span class="hljs-number">76</span>,<span class="hljs-number">77</span>,<span class="hljs-number">78</span>,<span class="hljs-number">79</span>,<span class="hljs-number">80</span>,<span class="hljs-number">81</span>,<span class="hljs-number">82</span>,<span class="hljs-number">83</span>,<span class="hljs-number">84</span>,<span class="hljs-number">85</span>,<span class="hljs-number">86</span>,<span class="hljs-number">87</span>,<span class="hljs-number">88</span>,<span class="hljs-number">89</span>,<span class="hljs-number">90</span>,<span class="hljs-number">91</span>,<span class="hljs-number">92</span>,<span class="hljs-number">93</span>,<span class="hljs-number">94</span>,<span class="hljs-number">95</span>,<span class="hljs-number">96</span>,<span class="hljs-number">97</span>,<span class="hljs-number">98</span>,<span class="hljs-number">99</span>,<span class="hljs-number">100</span>,<span class="hljs-number">101</span>,<span class="hljs-number">102</span>,<span class="hljs-number">103</span>,<span class="hljs-number">104</span>,<span class="hljs-number">105</span>,<span class="hljs-number">106</span>,<span class="hljs-number">107</span>,<span class="hljs-number">108</span>,<span class="hljs-number">109</span>,<span class="hljs-number">110</span>,<span class="hljs-number">111</span>,<span class="hljs-number">112</span>,<span class="hljs-number">113</span>,<span class="hljs-number">114</span>,<span class="hljs-number">115</span>,<span class="hljs-number">116</span>,<span class="hljs-number">117</span>,<span class="hljs-number">118</span>,<span class="hljs-number">119</span>,<span class="hljs-number">120</span>,<span class="hljs-number">121</span>,<span class="hljs-number">122</span>,<span class="hljs-number">123</span>,<span class="hljs-number">124</span>,<span class="hljs-number">125</span>,<span class="hljs-number">126</span>,<span class="hljs-number">127</span>,<span class="hljs-number">128</span>,<span class="hljs-number">129</span>,<span class="hljs-number">130</span>,<span class="hljs-number">131</span>,<span class="hljs-number">132</span>,<span class="hljs-number">133</span>,<span class="hljs-number">134</span>,<span class="hljs-number">135</span>,<span class="hljs-number">136</span>,<span class="hljs-number">137</span>,<span class="hljs-number">138</span>,<span class="hljs-number">139</span>,<span class="hljs-number">140</span>,<span class="hljs-number">141</span>,<span class="hljs-number">142</span>,<span class="hljs-number">143</span>,<span class="hljs-number">144</span>,<span class="hljs-number">145</span>,<span class="hljs-number">146</span>,<span class="hljs-number">147</span>,<span class="hljs-number">148</span>,<span class="hljs-number">149</span>,<span class="hljs-number">150</span>,<span class="hljs-number">151</span>,<span class="hljs-number">152</span>,<span class="hljs-number">153</span>,<span class="hljs-number">154</span>,<span class="hljs-number">155</span>,<span class="hljs-number">156</span>,<span class="hljs-number">157</span>,<span class="hljs-number">158</span>,<span class="hljs-number">159</span>,<span class="hljs-number">160</span>,<span class="hljs-number">161</span>,<span class="hljs-number">162</span>,<span class="hljs-number">163</span>,<span class="hljs-number">164</span>,<span class="hljs-number">165</span>,<span class="hljs-number">166</span>,<span class="hljs-number">167</span>,<span class="hljs-number">168</span>,<span class="hljs-number">169</span>,<span class="hljs-number">170</span>,<span class="hljs-number">171</span>,<span class="hljs-number">172</span>,<span class="hljs-number">173</span>,<span class="hljs-number">174</span>,<span class="hljs-number">175</span>,<span class="hljs-number">176</span>,<span class="hljs-number">177</span>,<span class="hljs-number">178</span>,<span class="hljs-number">179</span>,<span class="hljs-number">180</span>,<span class="hljs-number">181</span>,<span class="hljs-number">182</span>,<span class="hljs-number">183</span>,<span class="hljs-number">184</span>,<span class="hljs-number">185</span>,<span class="hljs-number">186</span>,<span class="hljs-number">187</span>,<span class="hljs-number">188</span>,<span class="hljs-number">189</span>,<span class="hljs-number">190</span>,<span class="hljs-number">191</span>,<span class="hljs-number">192</span>,<span class="hljs-number">193</span>,<span class="hljs-number">194</span>,<span class="hljs-number">195</span>,<span class="hljs-number">196</span>,<span class="hljs-number">197</span>,<span class="hljs-number">198</span>,<span class="hljs-number">199</span>,<span class="hljs-number">200</span>,<span class="hljs-number">201</span>,<span class="hljs-number">202</span>,<span class="hljs-number">203</span>,<span class="hljs-number">204</span>,<span class="hljs-number">205</span>,<span class="hljs-number">206</span>,<span class="hljs-number">207</span>,<span class="hljs-number">208</span>,<span class="hljs-number">209</span>,<span class="hljs-number">210</span>,<span class="hljs-number">211</span>,<span class="hljs-number">212</span>,<span class="hljs-number">213</span>,<span class="hljs-number">214</span>,<span class="hljs-number">215</span>,<span class="hljs-number">216</span>,<span class="hljs-number">217</span>,<span class="hljs-number">218</span>,<span class="hljs-number">219</span>,<span class="hljs-number">220</span>,<span class="hljs-number">221</span>,<span class="hljs-number">222</span>,<span class="hljs-number">223</span>,<span class="hljs-number">224</span>,<span class="hljs-number">225</span>,<span class="hljs-number">226</span>,<span class="hljs-number">227</span>,<span class="hljs-number">228</span>,<span class="hljs-number">229</span>,<span class="hljs-number">230</span>,<span class="hljs-number">231</span>,<span class="hljs-number">232</span>,<span class="hljs-number">233</span>,<span class="hljs-number">234</span>,<span class="hljs-number">235</span>,<span class="hljs-number">236</span>,<span class="hljs-number">237</span>,<span class="hljs-number">238</span>,<span class="hljs-number">239</span>,<span class="hljs-number">240</span>,<span class="hljs-number">241</span>,<span class="hljs-number">242</span>,<span class="hljs-number">243</span>,<span class="hljs-number">244</span>,<span class="hljs-number">245</span>,<span class="hljs-number">246</span>,<span class="hljs-number">247</span>,<span class="hljs-number">248</span>,<span class="hljs-number">249</span>,<span class="hljs-number">250</span>,<span class="hljs-number">251</span>,<span class="hljs-number">252</span>,<span class="hljs-number">253</span>,<span class="hljs-number">254</span>,<span class="hljs-number">255</span>,<span class="hljs-number">256</span>,<span class="hljs-number">257</span>,<span class="hljs-number">258</span>,<span class="hljs-number">259</span>,<span class="hljs-number">260</span>,<span class="hljs-number">261</span>,<span class="hljs-number">262</span>,<span class="hljs-number">263</span>,<span class="hljs-number">264</span>,<span class="hljs-number">265</span>,<span class="hljs-number">266</span>,<span class="hljs-number">267</span>,<span class="hljs-number">268</span>,<span class="hljs-number">269</span>,<span class="hljs-number">270</span>,<span class="hljs-number">271</span>,<span class="hljs-number">272</span>,<span class="hljs-number">273</span>,<span class="hljs-number">274</span>,<span class="hljs-number">275</span>,<span class="hljs-number">276</span>,<span class="hljs-number">277</span>,<span class="hljs-number">278</span>,<span class="hljs-number">279</span>,<span class="hljs-number">280</span>,<span class="hljs-number">281</span>,<span class="hljs-number">282</span>,<span class="hljs-number">283</span>,<span class="hljs-number">284</span>,<span class="hljs-number">285</span>,<span class="hljs-number">286</span>,<span class="hljs-number">287</span>,<span class="hljs-number">288</span>,<span class="hljs-number">289</span>,<span class="hljs-number">290</span>,<span class="hljs-number">291</span>,<span class="hljs-number">292</span>,<span class="hljs-number">293</span>,<span class="hljs-number">294</span>,<span class="hljs-number">295</span>,<span class="hljs-number">296</span>,<span class="hljs-number">297</span>,<span class="hljs-number">298</span>,<span class="hljs-number">299</span>,<span class="hljs-number">300</span>,<span class="hljs-number">301</span>,<span class="hljs-number">302</span>,<span class="hljs-number">303</span>,<span class="hljs-number">304</span>,<span class="hljs-number">305</span>,<span class="hljs-number">306</span>,<span class="hljs-number">307</span>,<span class="hljs-number">308</span>,<span class="hljs-number">309</span>,<span class="hljs-number">310</span>,<span class="hljs-number">311</span>,<span class="hljs-number">312</span>,<span class="hljs-number">313</span>,<span class="hljs-number">314</span>,<span class="hljs-number">315</span>,<span class="hljs-number">316</span>,<span class="hljs-number">317</span>,<span class="hljs-number">318</span>,<span class="hljs-number">319</span>,<span class="hljs-number">320</span>,<span class="hljs-number">321</span>,<span class="hljs-number">322</span>,<span class="hljs-number">323</span>,<span class="hljs-number">324</span>,<span class="hljs-number">325</span>,<span class="hljs-number">326</span>,<span class="hljs-number">327</span>,<span class="hljs-number">328</span>,<span class="hljs-number">329</span>,<span class="hljs-number">330</span>,<span class="hljs-number">331</span>,<span class="hljs-number">332</span>,<span class="hljs-number">333</span>,<span class="hljs-number">334</span>,<span class="hljs-number">335</span>,<span class="hljs-number">336</span>,<span class="hljs-number">337</span>,<span class="hljs-number">338</span>,<span class="hljs-number">339</span>,<span class="hljs-number">340</span>,<span class="hljs-number">341</span>,<span class="hljs-number">342</span>,<span class="hljs-number">343</span>,<span class="hljs-number">344</span>,<span class="hljs-number">345</span>,<span class="hljs-number">346</span>,<span class="hljs-number">347</span>,<span class="hljs-number">348</span>,<span class="hljs-number">349</span>,<span class="hljs-number">350</span>,<span class="hljs-number">351</span>,<span class="hljs-number">352</span>,<span class="hljs-number">353</span>,<span class="hljs-number">354</span>,<span class="hljs-number">355</span>,<span class="hljs-number">356</span>,<span class="hljs-number">357</span>,<span class="hljs-number">358</span>,<span class="hljs-number">359</span>,<span class="hljs-number">360</span>,<span class="hljs-number">361</span>,<span class="hljs-number">362</span>,<span class="hljs-number">363</span>,<span class="hljs-number">364</span>,<span class="hljs-number">365</span>,<span class="hljs-number">366</span>,<span class="hljs-number">367</span>,<span class="hljs-number">368</span>,<span class="hljs-number">369</span>,<span class="hljs-number">370</span>,<span class="hljs-number">371</span>,<span class="hljs-number">372</span>,<span class="hljs-number">373</span>,<span class="hljs-number">374</span>,<span class="hljs-number">375</span>,<span class="hljs-number">376</span>,<span class="hljs-number">377</span>,<span class="hljs-number">378</span>,<span class="hljs-number">379</span>,<span class="hljs-number">380</span>,<span class="hljs-number">381</span>,<span class="hljs-number">382</span>,<span class="hljs-number">383</span>,<span class="hljs-number">384</span>,<span class="hljs-number">385</span>,<span class="hljs-number">386</span>,<span class="hljs-number">387</span>,<span class="hljs-number">388</span>,<span class="hljs-number">389</span>,<span class="hljs-number">390</span>,<span class="hljs-number">391</span>,<span class="hljs-number">392</span>,<span class="hljs-number">393</span>,<span class="hljs-number">394</span>,<span class="hljs-number">395</span>,<span class="hljs-number">396</span>,<span class="hljs-number">397</span>,<span class="hljs-number">398</span>,<span class="hljs-number">399</span>,<span class="hljs-number">400</span>,<span class="hljs-number">401</span>,<span class="hljs-number">402</span>,<span class="hljs-number">403</span>,<span class="hljs-number">404</span>,<span class="hljs-number">405</span>,<span class="hljs-number">406</span>,<span class="hljs-number">407</span>,<span class="hljs-number">408</span>,<span class="hljs-number">409</span>,<span class="hljs-number">410</span>,<span class="hljs-number">411</span>,<span class="hljs-number">412</span>,<span class="hljs-number">413</span>,<span class="hljs-number">414</span>,<span class="hljs-number">415</span>,<span class="hljs-number">416</span>,<span class="hljs-number">417</span>,<span class="hljs-number">418</span>,<span class="hljs-number">419</span>,<span class="hljs-number">420</span>,<span class="hljs-number">421</span>,<span class="hljs-number">422</span>,<span class="hljs-number">423</span>,<span class="hljs-number">424</span>,<span class="hljs-number">425</span>,<span class="hljs-number">426</span>,<span class="hljs-number">427</span>,<span class="hljs-number">428</span>,<span class="hljs-number">429</span>,<span class="hljs-number">430</span>,<span class="hljs-number">431</span>,<span class="hljs-number">432</span>,<span class="hljs-number">433</span>,<span class="hljs-number">434</span>,<span class="hljs-number">435</span>,<span class="hljs-number">436</span>,<span class="hljs-number">437</span>,<span class="hljs-number">438</span>,<span class="hljs-number">439</span>,<span class="hljs-number">440</span>,<span class="hljs-number">441</span>,<span class="hljs-number">442</span>,<span class="hljs-number">443</span>,<span class="hljs-number">444</span>,<span class="hljs-number">445</span>,<span class="hljs-number">446</span>,<span class="hljs-number">447</span>,<span class="hljs-number">448</span>,<span class="hljs-number">449</span>,<span class="hljs-number">450</span>,<span class="hljs-number">451</span>,<span class="hljs-number">452</span>,<span class="hljs-number">453</span>,<span class="hljs-number">454</span>,<span class="hljs-number">455</span>,<span class="hljs-number">456</span>,<span class="hljs-number">457</span>,<span class="hljs-number">458</span>,<span class="hljs-number">459</span>,<span class="hljs-number">460</span>,<span class="hljs-number">461</span>,<span class="hljs-number">462</span>,<span class="hljs-number">463</span>,<span class="hljs-number">464</span>,<span class="hljs-number">465</span>,<span class="hljs-number">466</span>,<span class="hljs-number">467</span>,<span class="hljs-number">468</span>,<span class="hljs-number">469</span>,<span class="hljs-number">470</span>,<span class="hljs-number">471</span>,<span class="hljs-number">472</span>,<span class="hljs-number">473</span>,<span class="hljs-number">474</span>,<span class="hljs-number">475</span>,<span class="hljs-number">476</span>,<span class="hljs-number">477</span>,<span class="hljs-number">478</span>,<span class="hljs-number">479</span>,<span class="hljs-number">480</span>,<span class="hljs-number">481</span>,<span class="hljs-number">482</span>,<span class="hljs-number">483</span>,<span class="hljs-number">484</span>,<span class="hljs-number">485</span>,<span class="hljs-number">486</span>,<span class="hljs-number">487</span>,<span class="hljs-number">488</span>,<span class="hljs-number">489</span>,<span class="hljs-number">490</span>,<span class="hljs-number">491</span>,<span class="hljs-number">492</span>,<span class="hljs-number">493</span>,<span class="hljs-number">494</span>,<span class="hljs-number">495</span>,<span class="hljs-number">496</span>,<span class="hljs-number">497</span>,<span class="hljs-number">498</span>,<span class="hljs-number">499</span>,<span class="hljs-number">500</span>,<span class="hljs-number">501</span>,<span class="hljs-number">502</span>,<span class="hljs-number">503</span>,<span class="hljs-number">504</span>,<span class="hljs-number">505</span>,<span class="hljs-number">506</span>,<span class="hljs-number">507</span>,<span class="hljs-number">508</span>,<span class="hljs-number">509</span>,<span class="hljs-number">510</span>,<span class="hljs-number">511</span>,<span class="hljs-number">512</span>,<span class="hljs-number">513</span>,<span class="hljs-number">514</span>,<span class="hljs-number">515</span>,<span class="hljs-number">516</span>,<span class="hljs-number">517</span>,<span class="hljs-number">518</span>,<span class="hljs-number">519</span>,<span class="hljs-number">520</span>,<span class="hljs-number">521</span>,<span class="hljs-number">522</span>,<span class="hljs-number">523</span>,<span class="hljs-number">524</span>,<span class="hljs-number">525</span>,<span class="hljs-number">526</span>,<span class="hljs-number">527</span>,<span class="hljs-number">528</span>,<span class="hljs-number">529</span>,<span class="hljs-number">530</span>,<span class="hljs-number">531</span>,<span class="hljs-number">532</span>,<span class="hljs-number">533</span>,<span class="hljs-number">534</span>,<span class="hljs-number">535</span>,<span class="hljs-number">536</span>,<span class="hljs-number">537</span>,<span class="hljs-number">538</span>,<span class="hljs-number">539</span>,<span class="hljs-number">540</span>,<span class="hljs-number">541</span>,<span class="hljs-number">542</span>,<span class="hljs-number">543</span>,<span class="hljs-number">544</span>,<span class="hljs-number">545</span>,<span class="hljs-number">546</span>,<span class="hljs-number">547</span>,<span class="hljs-number">548</span>,<span class="hljs-number">549</span>,<span class="hljs-number">550</span>,<span class="hljs-number">551</span>,<span class="hljs-number">552</span>,<span class="hljs-number">553</span>,<span class="hljs-number">554</span>,<span class="hljs-number">555</span>,<span class="hljs-number">556</span>,<span class="hljs-number">557</span>,<span class="hljs-number">558</span>,<span class="hljs-number">559</span>,<span class="hljs-number">560</span>,<span class="hljs-number">561</span>,<span class="hljs-number">562</span>,<span class="hljs-number">563</span>,<span class="hljs-number">564</span>,<span class="hljs-number">565</span>,<span class="hljs-number">566</span>,<span class="hljs-number">567</span>,<span class="hljs-number">568</span>,<span class="hljs-number">569</span>,<span class="hljs-number">570</span>,<span class="hljs-number">571</span>,<span class="hljs-number">572</span>,<span class="hljs-number">573</span>,<span class="hljs-number">574</span>,<span class="hljs-number">575</span>,<span class="hljs-number">576</span>,<span class="hljs-number">577</span>,<span class="hljs-number">578</span>,<span class="hljs-number">579</span>,<span class="hljs-number">580</span>,<span class="hljs-number">581</span>,<span class="hljs-number">582</span>,<span class="hljs-number">583</span>,<span class="hljs-number">584</span>,<span class="hljs-number">585</span>,<span class="hljs-number">586</span>,<span class="hljs-number">587</span>,<span class="hljs-number">588</span>,<span class="hljs-number">589</span>,<span class="hljs-number">590</span>,<span class="hljs-number">591</span>,<span class="hljs-number">592</span>,<span class="hljs-number">593</span>,<span class="hljs-number">594</span>,<span class="hljs-number">595</span>,<span class="hljs-number">596</span>,<span class="hljs-number">597</span>,<span class="hljs-number">598</span>,<span class="hljs-number">599</span>,<span class="hljs-number">600</span>,<span class="hljs-number">601</span>,<span class="hljs-number">602</span>,<span class="hljs-number">603</span>,<span class="hljs-number">604</span>,<span class="hljs-number">605</span>,<span class="hljs-number">606</span>,<span class="hljs-number">607</span>,<span class="hljs-number">608</span>,<span class="hljs-number">609</span>,<span class="hljs-number">610</span>,<span class="hljs-number">611</span>,<span class="hljs-number">612</span>,<span class="hljs-number">613</span>,<span class="hljs-number">614</span>,<span class="hljs-number">615</span>,<span class="hljs-number">616</span>,<span class="hljs-number">617</span>,<span class="hljs-number">618</span>,<span class="hljs-number">619</span>,<span class="hljs-number">620</span>,<span class="hljs-number">621</span>,<span class="hljs-number">622</span>,<span class="hljs-number">623</span>,<span class="hljs-number">624</span>,<span class="hljs-number">625</span>,<span class="hljs-number">626</span>,<span class="hljs-number">627</span>,<span class="hljs-number">628</span>,<span class="hljs-number">629</span>,<span class="hljs-number">630</span>,<span class="hljs-number">631</span>,<span class="hljs-number">632</span>,<span class="hljs-number">633</span>,<span class="hljs-number">634</span>,<span class="hljs-number">635</span>,<span class="hljs-number">636</span>,<span class="hljs-number">637</span>,<span class="hljs-number">638</span>,<span class="hljs-number">639</span>,<span class="hljs-number">640</span>,<span class="hljs-number">641</span>,<span class="hljs-number">642</span>,<span class="hljs-number">643</span>,<span class="hljs-number">644</span>,<span class="hljs-number">645</span>,<span class="hljs-number">646</span>,<span class="hljs-number">647</span>,<span class="hljs-number">648</span>,<span class="hljs-number">649</span>,<span class="hljs-number">650</span>,<span class="hljs-number">651</span>,<span class="hljs-number">652</span>,<span class="hljs-number">653</span>,<span class="hljs-number">654</span>,<span class="hljs-number">655</span>,<span class="hljs-number">656</span>,<span class="hljs-number">657</span>,<span class="hljs-number">658</span>,<span class="hljs-number">659</span>,<span class="hljs-number">660</span>,<span class="hljs-number">661</span>,<span class="hljs-number">662</span>,<span class="hljs-number">663</span>,<span class="hljs-number">664</span>],<span class="hljs-string">&quot;fY&quot;</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">12</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">18</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">26</span>,<span class="hljs-number">27</span>,<span class="hljs-number">29</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">36</span>,<span class="hljs-number">37</span>,<span class="hljs-number">38</span>,<span class="hljs-number">42</span>,<span class="hljs-number">44</span>,<span class="hljs-number">45</span>,<span class="hljs-number">48</span>,<span class="hljs-number">49</span>,<span class="hljs-number">52</span>,<span class="hljs-number">53</span>,<span class="hljs-number">54</span>,<span class="hljs-number">55</span>,<span class="hljs-number">58</span>,<span class="hljs-number">60</span>,<span class="hljs-number">62</span>,<span class="hljs-number">63</span>,<span class="hljs-number">64</span>,<span class="hljs-number">66</span>,<span class="hljs-number">70</span>,<span class="hljs-number">71</span>,<span class="hljs-number">72</span>,<span class="hljs-number">73</span>,<span class="hljs-number">74</span>,<span class="hljs-number">76</span>,<span class="hljs-number">79</span>,<span class="hljs-number">80</span>,<span class="hljs-number">82</span>,<span class="hljs-number">85</span>,<span class="hljs-number">87</span>,<span class="hljs-number">88</span>,<span class="hljs-number">90</span>,<span class="hljs-number">91</span>,<span class="hljs-number">93</span>,<span class="hljs-number">94</span>,<span class="hljs-number">95</span>,<span class="hljs-number">96</span>,<span class="hljs-number">97</span>,<span class="hljs-number">98</span>,<span class="hljs-number">100</span>,<span class="hljs-number">102</span>,<span class="hljs-number">104</span>,<span class="hljs-number">105</span>,<span class="hljs-number">107</span>,<span class="hljs-number">109</span>,<span class="hljs-number">110</span>,<span class="hljs-number">111</span>,<span class="hljs-number">112</span>,<span class="hljs-number">113</span>,<span class="hljs-number">114</span>,<span class="hljs-number">115</span>,<span class="hljs-number">116</span>,<span class="hljs-number">118</span>,<span class="hljs-number">119</span>,<span class="hljs-number">120</span>,<span class="hljs-number">121</span>,<span class="hljs-number">122</span>,<span class="hljs-number">123</span>,<span class="hljs-number">124</span>,<span class="hljs-number">125</span>,<span class="hljs-number">127</span>,<span class="hljs-number">132</span>,<span class="hljs-number">133</span>,<span class="hljs-number">134</span>,<span class="hljs-number">137</span>,<span class="hljs-number">139</span>,<span class="hljs-number">140</span>,<span class="hljs-number">142</span>,<span class="hljs-number">143</span>,<span class="hljs-number">144</span>,<span class="hljs-number">147</span>,<span class="hljs-number">149</span>,<span class="hljs-number">150</span>,<span class="hljs-number">151</span>,<span class="hljs-number">153</span>,<span class="hljs-number">154</span>,<span class="hljs-number">155</span>,<span class="hljs-number">156</span>,<span class="hljs-number">157</span>,<span class="hljs-number">159</span>,<span class="hljs-number">160</span>,<span class="hljs-number">161</span>,<span class="hljs-number">162</span>,<span class="hljs-number">164</span>,<span class="hljs-number">166</span>,<span class="hljs-number">167</span>,<span class="hljs-number">169</span>,<span class="hljs-number">170</span>,<span class="hljs-number">172</span>,<span class="hljs-number">175</span>,<span class="hljs-number">177</span>,<span class="hljs-number">179</span>,<span class="hljs-number">183</span>,<span class="hljs-number">186</span>,<span class="hljs-number">187</span>,<span class="hljs-number">190</span>,<span class="hljs-number">191</span>,<span class="hljs-number">192</span>,<span class="hljs-number">193</span>,<span class="hljs-number">194</span>,<span class="hljs-number">197</span>,<span class="hljs-number">198</span>,<span class="hljs-number">200</span>,<span class="hljs-number">201</span>,<span class="hljs-number">204</span>,<span class="hljs-number">205</span>,<span class="hljs-number">206</span>,<span class="hljs-number">207</span>,<span class="hljs-number">208</span>,<span class="hljs-number">209</span>,<span class="hljs-number">211</span>,<span class="hljs-number">212</span>,<span class="hljs-number">213</span>,<span class="hljs-number">214</span>,<span class="hljs-number">215</span>,<span class="hljs-number">216</span>,<span class="hljs-number">218</span>,<span class="hljs-number">220</span>,<span class="hljs-number">221</span>,<span class="hljs-number">224</span>,<span class="hljs-number">225</span>,<span class="hljs-number">228</span>,<span class="hljs-number">230</span>,<span class="hljs-number">231</span>,<span class="hljs-number">233</span>,<span class="hljs-number">235</span>,<span class="hljs-number">237</span>,<span class="hljs-number">240</span>,<span class="hljs-number">241</span>,<span class="hljs-number">242</span>,<span class="hljs-number">243</span>,<span class="hljs-number">246</span>,<span class="hljs-number">247</span>,<span class="hljs-number">248</span>,<span class="hljs-number">250</span>,<span class="hljs-number">251</span>,<span class="hljs-number">254</span>,<span class="hljs-number">255</span>,<span class="hljs-number">256</span>,<span class="hljs-number">257</span>,<span class="hljs-number">258</span>,<span class="hljs-number">261</span>,<span class="hljs-number">263</span>,<span class="hljs-number">264</span>,<span class="hljs-number">265</span>,<span class="hljs-number">268</span>,<span class="hljs-number">269</span>,<span class="hljs-number">272</span>,<span class="hljs-number">274</span>,<span class="hljs-number">275</span>,<span class="hljs-number">276</span>,<span class="hljs-number">277</span>,<span class="hljs-number">278</span>,<span class="hljs-number">279</span>,<span class="hljs-number">280</span>,<span class="hljs-number">281</span>,<span class="hljs-number">282</span>,<span class="hljs-number">283</span>,<span class="hljs-number">285</span>,<span class="hljs-number">286</span>,<span class="hljs-number">288</span>,<span class="hljs-number">291</span>,<span class="hljs-number">292</span>,<span class="hljs-number">294</span>,<span class="hljs-number">296</span>,<span class="hljs-number">298</span>,<span class="hljs-number">300</span>,<span class="hljs-number">301</span>,<span class="hljs-number">303</span>,<span class="hljs-number">304</span>,<span class="hljs-number">305</span>,<span class="hljs-number">306</span>,<span class="hljs-number">307</span>,<span class="hljs-number">312</span>,<span class="hljs-number">314</span>,<span class="hljs-number">315</span>,<span class="hljs-number">316</span>,<span class="hljs-number">317</span>,<span class="hljs-number">318</span>,<span class="hljs-number">319</span>,<span class="hljs-number">320</span>,<span class="hljs-number">321</span>,<span class="hljs-number">322</span>,<span class="hljs-number">323</span>,<span class="hljs-number">325</span>,<span class="hljs-number">326</span>,<span class="hljs-number">327</span>,<span class="hljs-number">329</span>,<span class="hljs-number">330</span>,<span class="hljs-number">331</span>,<span class="hljs-number">333</span>,<span class="hljs-number">335</span>,<span class="hljs-number">337</span>,<span class="hljs-number">338</span>,<span class="hljs-number">339</span>,<span class="hljs-number">340</span>,<span class="hljs-number">341</span>,<span class="hljs-number">342</span>,<span class="hljs-number">343</span>,<span class="hljs-number">344</span>,<span class="hljs-number">346</span>,<span class="hljs-number">348</span>,<span class="hljs-number">349</span>,<span class="hljs-number">351</span>,<span class="hljs-number">353</span>,<span class="hljs-number">354</span>,<span class="hljs-number">355</span>,<span class="hljs-number">356</span>,<span class="hljs-number">359</span>,<span class="hljs-number">360</span>,<span class="hljs-number">362</span>,<span class="hljs-number">364</span>,<span class="hljs-number">365</span>,<span class="hljs-number">366</span>,<span class="hljs-number">367</span>,<span class="hljs-number">368</span>,<span class="hljs-number">369</span>,<span class="hljs-number">372</span>,<span class="hljs-number">373</span>,<span class="hljs-number">377</span>,<span class="hljs-number">378</span>,<span class="hljs-number">379</span>,<span class="hljs-number">380</span>,<span class="hljs-number">381</span>,<span class="hljs-number">383</span>,<span class="hljs-number">386</span>,<span class="hljs-number">387</span>,<span class="hljs-number">388</span>,<span class="hljs-number">389</span>,<span class="hljs-number">390</span>,<span class="hljs-number">391</span>,<span class="hljs-number">392</span>,<span class="hljs-number">393</span>,<span class="hljs-number">395</span>,<span class="hljs-number">396</span>,<span class="hljs-number">397</span>,<span class="hljs-number">398</span>,<span class="hljs-number">401</span>,<span class="hljs-number">402</span>,<span class="hljs-number">403</span>,<span class="hljs-number">406</span>,<span class="hljs-number">407</span>,<span class="hljs-number">408</span>,<span class="hljs-number">411</span>,<span class="hljs-number">413</span>,<span class="hljs-number">415</span>,<span class="hljs-number">416</span>,<span class="hljs-number">417</span>,<span class="hljs-number">420</span>,<span class="hljs-number">421</span>,<span class="hljs-number">424</span>,<span class="hljs-number">427</span>,<span class="hljs-number">429</span>,<span class="hljs-number">431</span>,<span class="hljs-number">433</span>,<span class="hljs-number">434</span>,<span class="hljs-number">435</span>,<span class="hljs-number">437</span>,<span class="hljs-number">440</span>,<span class="hljs-number">443</span>,<span class="hljs-number">447</span>,<span class="hljs-number">448</span>,<span class="hljs-number">449</span>,<span class="hljs-number">452</span>,<span class="hljs-number">453</span>,<span class="hljs-number">455</span>,<span class="hljs-number">456</span>,<span class="hljs-number">457</span>,<span class="hljs-number">458</span>,<span class="hljs-number">460</span>,<span class="hljs-number">462</span>,<span class="hljs-number">463</span>,<span class="hljs-number">465</span>,<span class="hljs-number">467</span>,<span class="hljs-number">468</span>,<span class="hljs-number">471</span>,<span class="hljs-number">472</span>,<span class="hljs-number">475</span>,<span class="hljs-number">477</span>,<span class="hljs-number">479</span>,<span class="hljs-number">480</span>,<span class="hljs-number">482</span>,<span class="hljs-number">484</span>,<span class="hljs-number">486</span>,<span class="hljs-number">487</span>,<span class="hljs-number">489</span>,<span class="hljs-number">490</span>,<span class="hljs-number">491</span>,<span class="hljs-number">492</span>,<span class="hljs-number">495</span>,<span class="hljs-number">496</span>,<span class="hljs-number">498</span>,<span class="hljs-number">499</span>,<span class="hljs-number">500</span>,<span class="hljs-number">502</span>,<span class="hljs-number">503</span>,<span class="hljs-number">504</span>,<span class="hljs-number">505</span>,<span class="hljs-number">507</span>,<span class="hljs-number">508</span>,<span class="hljs-number">509</span>,<span class="hljs-number">510</span>,<span class="hljs-number">512</span>,<span class="hljs-number">513</span>,<span class="hljs-number">514</span>,<span class="hljs-number">515</span>,<span class="hljs-number">517</span>,<span class="hljs-number">518</span>,<span class="hljs-number">519</span>,<span class="hljs-number">520</span>,<span class="hljs-number">521</span>,<span class="hljs-number">523</span>,<span class="hljs-number">524</span>,<span class="hljs-number">526</span>,<span class="hljs-number">527</span>,<span class="hljs-number">529</span>,<span class="hljs-number">530</span>,<span class="hljs-number">532</span>,<span class="hljs-number">533</span>,<span class="hljs-number">535</span>,<span class="hljs-number">536</span>,<span class="hljs-number">537</span>,<span class="hljs-number">538</span>,<span class="hljs-number">540</span>,<span class="hljs-number">542</span>,<span class="hljs-number">544</span>,<span class="hljs-number">546</span>,<span class="hljs-number">548</span>,<span class="hljs-number">552</span>,<span class="hljs-number">553</span>,<span class="hljs-number">555</span>,<span class="hljs-number">556</span>,<span class="hljs-number">558</span>,<span class="hljs-number">559</span>,<span class="hljs-number">560</span>,<span class="hljs-number">562</span>,<span class="hljs-number">563</span>,<span class="hljs-number">564</span>,<span class="hljs-number">565</span>,<span class="hljs-number">566</span>,<span class="hljs-number">567</span>,<span class="hljs-number">568</span>,<span class="hljs-number">569</span>,<span class="hljs-number">570</span>,<span class="hljs-number">571</span>,<span class="hljs-number">572</span>,<span class="hljs-number">573</span>,<span class="hljs-number">576</span>,<span class="hljs-number">578</span>,<span class="hljs-number">579</span>,<span class="hljs-number">580</span>,<span class="hljs-number">581</span>,<span class="hljs-number">582</span>,<span class="hljs-number">583</span>,<span class="hljs-number">584</span>,<span class="hljs-number">585</span>,<span class="hljs-number">586</span>,<span class="hljs-number">588</span>,<span class="hljs-number">589</span>,<span class="hljs-number">590</span>,<span class="hljs-number">592</span>,<span class="hljs-number">594</span>,<span class="hljs-number">595</span>,<span class="hljs-number">596</span>,<span class="hljs-number">597</span>,<span class="hljs-number">598</span>,<span class="hljs-number">600</span>,<span class="hljs-number">601</span>,<span class="hljs-number">603</span>,<span class="hljs-number">605</span>,<span class="hljs-number">606</span>,<span class="hljs-number">607</span>,<span class="hljs-number">608</span>,<span class="hljs-number">609</span>,<span class="hljs-number">611</span>,<span class="hljs-number">612</span>,<span class="hljs-number">614</span>,<span class="hljs-number">617</span>,<span class="hljs-number">618</span>,<span class="hljs-number">619</span>,<span class="hljs-number">621</span>,<span class="hljs-number">622</span>,<span class="hljs-number">624</span>,<span class="hljs-number">625</span>,<span class="hljs-number">626</span>,<span class="hljs-number">627</span>,<span class="hljs-number">628</span>,<span class="hljs-number">629</span>,<span class="hljs-number">631</span>,<span class="hljs-number">632</span>,<span class="hljs-number">633</span>,<span class="hljs-number">635</span>,<span class="hljs-number">636</span>,<span class="hljs-number">639</span>,<span class="hljs-number">641</span>,<span class="hljs-number">643</span>,<span class="hljs-number">644</span>,<span class="hljs-number">646</span>,<span class="hljs-number">648</span>,<span class="hljs-number">651</span>,<span class="hljs-number">653</span>,<span class="hljs-number">654</span>,<span class="hljs-number">655</span>,<span class="hljs-number">656</span>,<span class="hljs-number">657</span>,<span class="hljs-number">659</span>,<span class="hljs-number">660</span>,<span class="hljs-number">662</span>,<span class="hljs-number">664</span>,<span class="hljs-number">665</span>,<span class="hljs-number">669</span>,<span class="hljs-number">670</span>,<span class="hljs-number">671</span>,<span class="hljs-number">672</span>,<span class="hljs-number">673</span>,<span class="hljs-number">674</span>,<span class="hljs-number">675</span>,<span class="hljs-number">677</span>,<span class="hljs-number">679</span>,<span class="hljs-number">680</span>,<span class="hljs-number">682</span>,<span class="hljs-number">683</span>,<span class="hljs-number">685</span>,<span class="hljs-number">686</span>,<span class="hljs-number">687</span>,<span class="hljs-number">688</span>,<span class="hljs-number">689</span>,<span class="hljs-number">690</span>,<span class="hljs-number">691</span>,<span class="hljs-number">692</span>,<span class="hljs-number">693</span>,<span class="hljs-number">694</span>,<span class="hljs-number">695</span>,<span class="hljs-number">696</span>,<span class="hljs-number">697</span>,<span class="hljs-number">698</span>,<span class="hljs-number">699</span>,<span class="hljs-number">701</span>,<span class="hljs-number">706</span>,<span class="hljs-number">707</span>,<span class="hljs-number">708</span>,<span class="hljs-number">709</span>,<span class="hljs-number">710</span>,<span class="hljs-number">711</span>,<span class="hljs-number">713</span>,<span class="hljs-number">714</span>,<span class="hljs-number">715</span>,<span class="hljs-number">718</span>,<span class="hljs-number">719</span>,<span class="hljs-number">720</span>,<span class="hljs-number">722</span>,<span class="hljs-number">725</span>,<span class="hljs-number">726</span>,<span class="hljs-number">727</span>,<span class="hljs-number">728</span>,<span class="hljs-number">729</span>,<span class="hljs-number">730</span>,<span class="hljs-number">731</span>,<span class="hljs-number">732</span>,<span class="hljs-number">734</span>,<span class="hljs-number">735</span>,<span class="hljs-number">736</span>,<span class="hljs-number">737</span>,<span class="hljs-number">738</span>,<span class="hljs-number">739</span>,<span class="hljs-number">740</span>,<span class="hljs-number">744</span>,<span class="hljs-number">746</span>,<span class="hljs-number">747</span>,<span class="hljs-number">748</span>,<span class="hljs-number">749</span>,<span class="hljs-number">751</span>,<span class="hljs-number">753</span>,<span class="hljs-number">754</span>,<span class="hljs-number">755</span>,<span class="hljs-number">757</span>,<span class="hljs-number">758</span>,<span class="hljs-number">759</span>,<span class="hljs-number">760</span>,<span class="hljs-number">763</span>,<span class="hljs-number">764</span>,<span class="hljs-number">765</span>,<span class="hljs-number">766</span>,<span class="hljs-number">767</span>,<span class="hljs-number">768</span>,<span class="hljs-number">770</span>,<span class="hljs-number">771</span>,<span class="hljs-number">772</span>,<span class="hljs-number">774</span>,<span class="hljs-number">776</span>,<span class="hljs-number">778</span>,<span class="hljs-number">779</span>,<span class="hljs-number">780</span>,<span class="hljs-number">781</span>,<span class="hljs-number">782</span>,<span class="hljs-number">783</span>,<span class="hljs-number">785</span>,<span class="hljs-number">788</span>,<span class="hljs-number">789</span>,<span class="hljs-number">791</span>,<span class="hljs-number">793</span>,<span class="hljs-number">795</span>,<span class="hljs-number">796</span>,<span class="hljs-number">797</span>,<span class="hljs-number">798</span>,<span class="hljs-number">799</span>,<span class="hljs-number">801</span>,<span class="hljs-number">803</span>,<span class="hljs-number">804</span>,<span class="hljs-number">806</span>,<span class="hljs-number">807</span>,<span class="hljs-number">808</span>,<span class="hljs-number">809</span>,<span class="hljs-number">812</span>,<span class="hljs-number">815</span>,<span class="hljs-number">817</span>,<span class="hljs-number">818</span>,<span class="hljs-number">819</span>,<span class="hljs-number">821</span>,<span class="hljs-number">824</span>,<span class="hljs-number">826</span>,<span class="hljs-number">827</span>,<span class="hljs-number">829</span>,<span class="hljs-number">830</span>,<span class="hljs-number">832</span>,<span class="hljs-number">833</span>,<span class="hljs-number">834</span>,<span class="hljs-number">835</span>,<span class="hljs-number">836</span>,<span class="hljs-number">837</span>,<span class="hljs-number">838</span>,<span class="hljs-number">839</span>,<span class="hljs-number">841</span>,<span class="hljs-number">842</span>,<span class="hljs-number">843</span>,<span class="hljs-number">844</span>,<span class="hljs-number">845</span>,<span class="hljs-number">846</span>,<span class="hljs-number">848</span>,<span class="hljs-number">850</span>,<span class="hljs-number">854</span>,<span class="hljs-number">855</span>,<span class="hljs-number">856</span>,<span class="hljs-number">858</span>,<span class="hljs-number">859</span>,<span class="hljs-number">861</span>,<span class="hljs-number">862</span>,<span class="hljs-number">864</span>,<span class="hljs-number">865</span>,<span class="hljs-number">866</span>,<span class="hljs-number">867</span>,<span class="hljs-number">868</span>,<span class="hljs-number">869</span>,<span class="hljs-number">871</span>,<span class="hljs-number">873</span>,<span class="hljs-number">874</span>,<span class="hljs-number">875</span>,<span class="hljs-number">876</span>,<span class="hljs-number">877</span>,<span class="hljs-number">878</span>,<span class="hljs-number">879</span>,<span class="hljs-number">880</span>,<span class="hljs-number">881</span>,<span class="hljs-number">883</span>,<span class="hljs-number">885</span>,<span class="hljs-number">886</span>,<span class="hljs-number">887</span>,<span class="hljs-number">888</span>,<span class="hljs-number">889</span>,<span class="hljs-number">890</span>,<span class="hljs-number">892</span>,<span class="hljs-number">893</span>,<span class="hljs-number">894</span>,<span class="hljs-number">895</span>,<span class="hljs-number">896</span>,<span class="hljs-number">897</span>,<span class="hljs-number">898</span>,<span class="hljs-number">900</span>,<span class="hljs-number">902</span>,<span class="hljs-number">905</span>,<span class="hljs-number">906</span>,<span class="hljs-number">907</span>,<span class="hljs-number">908</span>,<span class="hljs-number">909</span>,<span class="hljs-number">910</span>,<span class="hljs-number">912</span>,<span class="hljs-number">914</span>,<span class="hljs-number">916</span>,<span class="hljs-number">917</span>,<span class="hljs-number">918</span>,<span class="hljs-number">920</span>,<span class="hljs-number">922</span>,<span class="hljs-number">924</span>,<span class="hljs-number">925</span>,<span class="hljs-number">928</span>,<span class="hljs-number">931</span>,<span class="hljs-number">932</span>,<span class="hljs-number">933</span>,<span class="hljs-number">934</span>,<span class="hljs-number">935</span>,<span class="hljs-number">936</span>,<span class="hljs-number">937</span>,<span class="hljs-number">938</span>,<span class="hljs-number">940</span>,<span class="hljs-number">941</span>,<span class="hljs-number">943</span>,<span class="hljs-number">944</span>,<span class="hljs-number">947</span>,<span class="hljs-number">949</span>,<span class="hljs-number">950</span>,<span class="hljs-number">951</span>,<span class="hljs-number">952</span>,<span class="hljs-number">953</span>,<span class="hljs-number">957</span>,<span class="hljs-number">959</span>,<span class="hljs-number">960</span>,<span class="hljs-number">961</span>,<span class="hljs-number">962</span>,<span class="hljs-number">963</span>,<span class="hljs-number">964</span>,<span class="hljs-number">966</span>,<span class="hljs-number">967</span>,<span class="hljs-number">969</span>,<span class="hljs-number">970</span>,<span class="hljs-number">972</span>,<span class="hljs-number">974</span>,<span class="hljs-number">975</span>,<span class="hljs-number">976</span>,<span class="hljs-number">978</span>,<span class="hljs-number">979</span>,<span class="hljs-number">983</span>,<span class="hljs-number">984</span>,<span class="hljs-number">986</span>,<span class="hljs-number">987</span>,<span class="hljs-number">988</span>,<span class="hljs-number">989</span>,<span class="hljs-number">990</span>,<span class="hljs-number">991</span>,<span class="hljs-number">992</span>,<span class="hljs-number">994</span>,<span class="hljs-number">997</span>,<span class="hljs-number">999</span>,<span class="hljs-number">1000</span>],<span class="hljs-string">&quot;fFunctions&quot;</span>:&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TList&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;TList&quot;</span>,<span class="hljs-string">&quot;arr&quot;</span>:[],<span class="hljs-string">&quot;opt&quot;</span>:[]&#125;,<span class="hljs-string">&quot;fHistogram&quot;</span>:&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TH1F&quot;</span>,<span class="hljs-string">&quot;fUniqueID&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits&quot;</span>:<span class="hljs-number">520</span>,<span class="hljs-string">&quot;fName&quot;</span>:<span class="hljs-string">&quot;Graph&quot;</span>,<span class="hljs-string">&quot;fTitle&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;fLineColor&quot;</span>:<span class="hljs-number">602</span>,<span class="hljs-string">&quot;fLineStyle&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineWidth&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fFillColor&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fFillStyle&quot;</span>:<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;fMarkerColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fMarkerStyle&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fMarkerSize&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fNcells&quot;</span>:<span class="hljs-number">666</span>,<span class="hljs-string">&quot;fXaxis&quot;</span>:&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TAxis&quot;</span>,<span class="hljs-string">&quot;fUniqueID&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fName&quot;</span>:<span class="hljs-string">&quot;xaxis&quot;</span>,<span class="hljs-string">&quot;fTitle&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;fNdivisions&quot;</span>:<span class="hljs-number">510</span>,<span class="hljs-string">&quot;fAxisColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLabelColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLabelFont&quot;</span>:<span class="hljs-number">42</span>,<span class="hljs-string">&quot;fLabelOffset&quot;</span>:<span class="hljs-number">0.005</span>,<span class="hljs-string">&quot;fLabelSize&quot;</span>:<span class="hljs-number">0.035</span>,<span class="hljs-string">&quot;fTickLength&quot;</span>:<span class="hljs-number">0.03</span>,<span class="hljs-string">&quot;fTitleOffset&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fTitleSize&quot;</span>:<span class="hljs-number">0.035</span>,<span class="hljs-string">&quot;fTitleColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fTitleFont&quot;</span>:<span class="hljs-number">42</span>,<span class="hljs-string">&quot;fNbins&quot;</span>:<span class="hljs-number">664</span>,<span class="hljs-string">&quot;fXmin&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fXmax&quot;</span>:<span class="hljs-number">730.3</span>,<span class="hljs-string">&quot;fXbins&quot;</span>:[],<span class="hljs-string">&quot;fFirst&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fLast&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits2&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTimeDisplay&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;fTimeFormat&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;fLabels&quot;</span>:<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;fModLabs&quot;</span>:<span class="hljs-literal">null</span>&#125;,<span class="hljs-string">&quot;fYaxis&quot;</span>:&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TAxis&quot;</span>,<span class="hljs-string">&quot;fUniqueID&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fName&quot;</span>:<span class="hljs-string">&quot;yaxis&quot;</span>,<span class="hljs-string">&quot;fTitle&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;fNdivisions&quot;</span>:<span class="hljs-number">510</span>,<span class="hljs-string">&quot;fAxisColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLabelColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLabelFont&quot;</span>:<span class="hljs-number">42</span>,<span class="hljs-string">&quot;fLabelOffset&quot;</span>:<span class="hljs-number">0.005</span>,<span class="hljs-string">&quot;fLabelSize&quot;</span>:<span class="hljs-number">0.035</span>,<span class="hljs-string">&quot;fTickLength&quot;</span>:<span class="hljs-number">0.03</span>,<span class="hljs-string">&quot;fTitleOffset&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTitleSize&quot;</span>:<span class="hljs-number">0.035</span>,<span class="hljs-string">&quot;fTitleColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fTitleFont&quot;</span>:<span class="hljs-number">42</span>,<span class="hljs-string">&quot;fNbins&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fXmin&quot;</span>:<span class="hljs-number">0.9</span>,<span class="hljs-string">&quot;fXmax&quot;</span>:<span class="hljs-number">1099.9</span>,<span class="hljs-string">&quot;fXbins&quot;</span>:[],<span class="hljs-string">&quot;fFirst&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fLast&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits2&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTimeDisplay&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;fTimeFormat&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;fLabels&quot;</span>:<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;fModLabs&quot;</span>:<span class="hljs-literal">null</span>&#125;,<span class="hljs-string">&quot;fZaxis&quot;</span>:&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TAxis&quot;</span>,<span class="hljs-string">&quot;fUniqueID&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fName&quot;</span>:<span class="hljs-string">&quot;zaxis&quot;</span>,<span class="hljs-string">&quot;fTitle&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;fNdivisions&quot;</span>:<span class="hljs-number">510</span>,<span class="hljs-string">&quot;fAxisColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLabelColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLabelFont&quot;</span>:<span class="hljs-number">42</span>,<span class="hljs-string">&quot;fLabelOffset&quot;</span>:<span class="hljs-number">0.005</span>,<span class="hljs-string">&quot;fLabelSize&quot;</span>:<span class="hljs-number">0.035</span>,<span class="hljs-string">&quot;fTickLength&quot;</span>:<span class="hljs-number">0.03</span>,<span class="hljs-string">&quot;fTitleOffset&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fTitleSize&quot;</span>:<span class="hljs-number">0.035</span>,<span class="hljs-string">&quot;fTitleColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fTitleFont&quot;</span>:<span class="hljs-number">42</span>,<span class="hljs-string">&quot;fNbins&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fXmin&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fXmax&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fXbins&quot;</span>:[],<span class="hljs-string">&quot;fFirst&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fLast&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits2&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTimeDisplay&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;fTimeFormat&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;fLabels&quot;</span>:<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;fModLabs&quot;</span>:<span class="hljs-literal">null</span>&#125;,<span class="hljs-string">&quot;fBarOffset&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBarWidth&quot;</span>:<span class="hljs-number">1000</span>,<span class="hljs-string">&quot;fEntries&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTsumw&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTsumw2&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTsumwx&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTsumwx2&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fMaximum&quot;</span>:<span class="hljs-number">1099.9</span>,<span class="hljs-string">&quot;fMinimum&quot;</span>:<span class="hljs-number">0.9</span>,<span class="hljs-string">&quot;fNormFactor&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fContour&quot;</span>:[],<span class="hljs-string">&quot;fSumw2&quot;</span>:[],<span class="hljs-string">&quot;fOption&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;fFunctions&quot;</span>:&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TList&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;TList&quot;</span>,<span class="hljs-string">&quot;arr&quot;</span>:[],<span class="hljs-string">&quot;opt&quot;</span>:[]&#125;,<span class="hljs-string">&quot;fBufferSize&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBuffer&quot;</span>:[],<span class="hljs-string">&quot;fBinStatErrOpt&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fStatOverflows&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;fArray&quot;</span>:[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]&#125;,<span class="hljs-string">&quot;fMinimum&quot;</span>:<span class="hljs-number">-1111</span>,<span class="hljs-string">&quot;fMaximum&quot;</span>:<span class="hljs-number">-1111</span>&#125;],<span class="hljs-string">&quot;opt&quot;</span>:[<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;ap&quot;</span>]&#125;,<span class="hljs-string">&quot;fExecs&quot;</span>:<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;fName&quot;</span>:<span class="hljs-string">&quot;c1&quot;</span>,<span class="hljs-string">&quot;fTitle&quot;</span>:<span class="hljs-string">&quot;c1&quot;</span>,<span class="hljs-string">&quot;fNumPaletteColor&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fNextPaletteColor&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fDISPLAY&quot;</span>:<span class="hljs-string">&quot;$DISPLAY&quot;</span>,<span class="hljs-string">&quot;fDoubleBuffer&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fRetained&quot;</span>:<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;fXsizeUser&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fYsizeUser&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fXsizeReal&quot;</span>:<span class="hljs-number">20</span>,<span class="hljs-string">&quot;fYsizeReal&quot;</span>:<span class="hljs-number">14.28571</span>,<span class="hljs-string">&quot;fWindowTopX&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fWindowTopY&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fWindowWidth&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fWindowHeight&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fCw&quot;</span>:<span class="hljs-number">696</span>,<span class="hljs-string">&quot;fCh&quot;</span>:<span class="hljs-number">472</span>,<span class="hljs-string">&quot;fCatt&quot;</span>:&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TAttCanvas&quot;</span>,<span class="hljs-string">&quot;fXBetween&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;fYBetween&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;fTitleFromTop&quot;</span>:<span class="hljs-number">1.2</span>,<span class="hljs-string">&quot;fXdate&quot;</span>:<span class="hljs-number">0.2</span>,<span class="hljs-string">&quot;fYdate&quot;</span>:<span class="hljs-number">0.3</span>,<span class="hljs-string">&quot;fAdate&quot;</span>:<span class="hljs-number">1</span>&#125;,<span class="hljs-string">&quot;kMoveOpaque&quot;</span>:<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;kResizeOpaque&quot;</span>:<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;fHighLightColor&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;fBatch&quot;</span>:<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;kShowEventStatus&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;kAutoExec&quot;</span>:<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;kMenuBar&quot;</span>:<span class="hljs-literal">true</span>&#125;);</span><br><span class="javascript">            Core.draw(<span class="hljs-string">&quot;root_plot_1586256162911&quot;</span>, obj, <span class="hljs-string">&quot;&quot;</span>);</span><br>        &#125;<br>    );<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="online"><a href="#online" class="headerlink" title="online"></a>online</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br> requirejs.config(&#123;<br>     paths: &#123;<br><span class="javascript">       <span class="hljs-string">&#x27;JSRootCore&#x27;</span> : <span class="hljs-string">&#x27;https://root.cern.ch/js/notebook//scripts/JSRootCore&#x27;</span>,</span><br>     &#125;<br>   &#125;);<br><span class="javascript"> <span class="hljs-built_in">require</span>([<span class="hljs-string">&#x27;JSRootCore&#x27;</span>],</span><br><span class="javascript">     <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">Core</span>) </span>&#123;</span><br><span class="javascript">       <span class="hljs-keyword">var</span> obj = Core.JSONR_unref(&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TCanvas&quot;</span>,<span class="hljs-string">&quot;fUniqueID&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits&quot;</span>:<span class="hljs-number">36896776</span>,<span class="hljs-string">&quot;fLineColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineStyle&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineWidth&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fFillColor&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fFillStyle&quot;</span>:<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;fLeftMargin&quot;</span>:<span class="hljs-number">0.1</span>,<span class="hljs-string">&quot;fRightMargin&quot;</span>:<span class="hljs-number">0.1</span>,<span class="hljs-string">&quot;fBottomMargin&quot;</span>:<span class="hljs-number">0.1</span>,<span class="hljs-string">&quot;fTopMargin&quot;</span>:<span class="hljs-number">0.1</span>,<span class="hljs-string">&quot;fXfile&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;fYfile&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;fAfile&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fXstat&quot;</span>:<span class="hljs-number">0.99</span>,<span class="hljs-string">&quot;fYstat&quot;</span>:<span class="hljs-number">0.99</span>,<span class="hljs-string">&quot;fAstat&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;fFrameFillColor&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fFrameLineColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fFrameFillStyle&quot;</span>:<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;fFrameLineStyle&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fFrameLineWidth&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fFrameBorderSize&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fFrameBorderMode&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fX1&quot;</span>:<span class="hljs-number">-1.25000009313226</span>,<span class="hljs-string">&quot;fY1&quot;</span>:<span class="hljs-number">-0.131250009778888</span>,<span class="hljs-string">&quot;fX2&quot;</span>:<span class="hljs-number">11.2500000931323</span>,<span class="hljs-string">&quot;fY2&quot;</span>:<span class="hljs-number">1.18125000977889</span>,<span class="hljs-string">&quot;fXtoAbsPixelk&quot;</span>:<span class="hljs-number">69.6000541484835</span>,<span class="hljs-string">&quot;fXtoPixelk&quot;</span>:<span class="hljs-number">69.6000541484835</span>,<span class="hljs-string">&quot;fXtoPixel&quot;</span>:<span class="hljs-number">55.6799991703033</span>,<span class="hljs-string">&quot;fYtoAbsPixelk&quot;</span>:<span class="hljs-number">424.800047186661</span>,<span class="hljs-string">&quot;fYtoPixelk&quot;</span>:<span class="hljs-number">424.800047186661</span>,<span class="hljs-string">&quot;fYtoPixel&quot;</span>:<span class="hljs-number">-359.619042260306</span>,<span class="hljs-string">&quot;fUtoAbsPixelk&quot;</span>:<span class="hljs-number">5e-5</span>,<span class="hljs-string">&quot;fUtoPixelk&quot;</span>:<span class="hljs-number">5e-5</span>,<span class="hljs-string">&quot;fUtoPixel&quot;</span>:<span class="hljs-number">696</span>,<span class="hljs-string">&quot;fVtoAbsPixelk&quot;</span>:<span class="hljs-number">472.00005</span>,<span class="hljs-string">&quot;fVtoPixelk&quot;</span>:<span class="hljs-number">472</span>,<span class="hljs-string">&quot;fVtoPixel&quot;</span>:<span class="hljs-number">-472</span>,<span class="hljs-string">&quot;fAbsPixeltoXk&quot;</span>:<span class="hljs-number">-1.25000009313226</span>,<span class="hljs-string">&quot;fPixeltoXk&quot;</span>:<span class="hljs-number">-1.25000009313226</span>,<span class="hljs-string">&quot;fPixeltoX&quot;</span>:<span class="hljs-number">0.017959770382564</span>,<span class="hljs-string">&quot;fAbsPixeltoYk&quot;</span>:<span class="hljs-number">1.18125000977889</span>,<span class="hljs-string">&quot;fPixeltoYk&quot;</span>:<span class="hljs-number">-0.131250009778888</span>,<span class="hljs-string">&quot;fPixeltoY&quot;</span>:<span class="hljs-number">-0.00278072038041902</span>,<span class="hljs-string">&quot;fXlowNDC&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fYlowNDC&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fXUpNDC&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fYUpNDC&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fWNDC&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fHNDC&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fAbsXlowNDC&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fAbsYlowNDC&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fAbsWNDC&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fAbsHNDC&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fUxmin&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fUymin&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fUxmax&quot;</span>:<span class="hljs-number">10</span>,<span class="hljs-string">&quot;fUymax&quot;</span>:<span class="hljs-number">1.05</span>,<span class="hljs-string">&quot;fTheta&quot;</span>:<span class="hljs-number">30</span>,<span class="hljs-string">&quot;fPhi&quot;</span>:<span class="hljs-number">30</span>,<span class="hljs-string">&quot;fAspectRatio&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fNumber&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTickx&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTicky&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fLogx&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fLogy&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fLogz&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fPadPaint&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fCrosshair&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fCrosshairPos&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBorderSize&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;fBorderMode&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fModified&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;fGridx&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;fGridy&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;fAbsCoord&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;fEditable&quot;</span>:<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;fFixedAspectRatio&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;fPrimitives&quot;</span>:&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TList&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;TList&quot;</span>,<span class="hljs-string">&quot;arr&quot;</span>:[&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TFrame&quot;</span>,<span class="hljs-string">&quot;fUniqueID&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits&quot;</span>:<span class="hljs-number">50331656</span>,<span class="hljs-string">&quot;fLineColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineStyle&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineWidth&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fFillColor&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fFillStyle&quot;</span>:<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;fX1&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fY1&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fX2&quot;</span>:<span class="hljs-number">10</span>,<span class="hljs-string">&quot;fY2&quot;</span>:<span class="hljs-number">1.05</span>,<span class="hljs-string">&quot;fBorderSize&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fBorderMode&quot;</span>:<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TH1F&quot;</span>,<span class="hljs-string">&quot;fUniqueID&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits&quot;</span>:<span class="hljs-number">50331656</span>,<span class="hljs-string">&quot;fName&quot;</span>:<span class="hljs-string">&quot;h&quot;</span>,<span class="hljs-string">&quot;fTitle&quot;</span>:<span class="hljs-string">&quot;h&quot;</span>,<span class="hljs-string">&quot;fLineColor&quot;</span>:<span class="hljs-number">602</span>,<span class="hljs-string">&quot;fLineStyle&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineWidth&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fFillColor&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fFillStyle&quot;</span>:<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;fMarkerColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fMarkerStyle&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fMarkerSize&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fNcells&quot;</span>:<span class="hljs-number">12</span>,<span class="hljs-string">&quot;fXaxis&quot;</span>:&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TAxis&quot;</span>,<span class="hljs-string">&quot;fUniqueID&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits&quot;</span>:<span class="hljs-number">50331648</span>,<span class="hljs-string">&quot;fName&quot;</span>:<span class="hljs-string">&quot;xaxis&quot;</span>,<span class="hljs-string">&quot;fTitle&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;fNdivisions&quot;</span>:<span class="hljs-number">510</span>,<span class="hljs-string">&quot;fAxisColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLabelColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLabelFont&quot;</span>:<span class="hljs-number">42</span>,<span class="hljs-string">&quot;fLabelOffset&quot;</span>:<span class="hljs-number">0.005</span>,<span class="hljs-string">&quot;fLabelSize&quot;</span>:<span class="hljs-number">0.035</span>,<span class="hljs-string">&quot;fTickLength&quot;</span>:<span class="hljs-number">0.03</span>,<span class="hljs-string">&quot;fTitleOffset&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fTitleSize&quot;</span>:<span class="hljs-number">0.035</span>,<span class="hljs-string">&quot;fTitleColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fTitleFont&quot;</span>:<span class="hljs-number">42</span>,<span class="hljs-string">&quot;fNbins&quot;</span>:<span class="hljs-number">10</span>,<span class="hljs-string">&quot;fXmin&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fXmax&quot;</span>:<span class="hljs-number">10</span>,<span class="hljs-string">&quot;fXbins&quot;</span>:[],<span class="hljs-string">&quot;fFirst&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fLast&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits2&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTimeDisplay&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;fTimeFormat&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;fLabels&quot;</span>:<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;fModLabs&quot;</span>:<span class="hljs-literal">null</span>&#125;,<span class="hljs-string">&quot;fYaxis&quot;</span>:&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TAxis&quot;</span>,<span class="hljs-string">&quot;fUniqueID&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits&quot;</span>:<span class="hljs-number">50331648</span>,<span class="hljs-string">&quot;fName&quot;</span>:<span class="hljs-string">&quot;yaxis&quot;</span>,<span class="hljs-string">&quot;fTitle&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;fNdivisions&quot;</span>:<span class="hljs-number">510</span>,<span class="hljs-string">&quot;fAxisColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLabelColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLabelFont&quot;</span>:<span class="hljs-number">42</span>,<span class="hljs-string">&quot;fLabelOffset&quot;</span>:<span class="hljs-number">0.005</span>,<span class="hljs-string">&quot;fLabelSize&quot;</span>:<span class="hljs-number">0.035</span>,<span class="hljs-string">&quot;fTickLength&quot;</span>:<span class="hljs-number">0.03</span>,<span class="hljs-string">&quot;fTitleOffset&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTitleSize&quot;</span>:<span class="hljs-number">0.035</span>,<span class="hljs-string">&quot;fTitleColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fTitleFont&quot;</span>:<span class="hljs-number">42</span>,<span class="hljs-string">&quot;fNbins&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fXmin&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fXmax&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fXbins&quot;</span>:[],<span class="hljs-string">&quot;fFirst&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fLast&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits2&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTimeDisplay&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;fTimeFormat&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;fLabels&quot;</span>:<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;fModLabs&quot;</span>:<span class="hljs-literal">null</span>&#125;,<span class="hljs-string">&quot;fZaxis&quot;</span>:&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TAxis&quot;</span>,<span class="hljs-string">&quot;fUniqueID&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits&quot;</span>:<span class="hljs-number">50331648</span>,<span class="hljs-string">&quot;fName&quot;</span>:<span class="hljs-string">&quot;zaxis&quot;</span>,<span class="hljs-string">&quot;fTitle&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;fNdivisions&quot;</span>:<span class="hljs-number">510</span>,<span class="hljs-string">&quot;fAxisColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLabelColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLabelFont&quot;</span>:<span class="hljs-number">42</span>,<span class="hljs-string">&quot;fLabelOffset&quot;</span>:<span class="hljs-number">0.005</span>,<span class="hljs-string">&quot;fLabelSize&quot;</span>:<span class="hljs-number">0.035</span>,<span class="hljs-string">&quot;fTickLength&quot;</span>:<span class="hljs-number">0.03</span>,<span class="hljs-string">&quot;fTitleOffset&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fTitleSize&quot;</span>:<span class="hljs-number">0.035</span>,<span class="hljs-string">&quot;fTitleColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fTitleFont&quot;</span>:<span class="hljs-number">42</span>,<span class="hljs-string">&quot;fNbins&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fXmin&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fXmax&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fXbins&quot;</span>:[],<span class="hljs-string">&quot;fFirst&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fLast&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits2&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTimeDisplay&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;fTimeFormat&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;fLabels&quot;</span>:<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;fModLabs&quot;</span>:<span class="hljs-literal">null</span>&#125;,<span class="hljs-string">&quot;fBarOffset&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBarWidth&quot;</span>:<span class="hljs-number">1000</span>,<span class="hljs-string">&quot;fEntries&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fTsumw&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fTsumw2&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fTsumwx&quot;</span>:<span class="hljs-number">3</span>,<span class="hljs-string">&quot;fTsumwx2&quot;</span>:<span class="hljs-number">9</span>,<span class="hljs-string">&quot;fMaximum&quot;</span>:<span class="hljs-number">-1111</span>,<span class="hljs-string">&quot;fMinimum&quot;</span>:<span class="hljs-number">-1111</span>,<span class="hljs-string">&quot;fNormFactor&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fContour&quot;</span>:[],<span class="hljs-string">&quot;fSumw2&quot;</span>:[],<span class="hljs-string">&quot;fOption&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;fFunctions&quot;</span>:&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TList&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;TList&quot;</span>,<span class="hljs-string">&quot;arr&quot;</span>:[&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TPaveStats&quot;</span>,<span class="hljs-string">&quot;fUniqueID&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits&quot;</span>:<span class="hljs-number">50331657</span>,<span class="hljs-string">&quot;fLineColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineStyle&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineWidth&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fFillColor&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fFillStyle&quot;</span>:<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;fX1&quot;</span>:<span class="hljs-number">8.50000025331975</span>,<span class="hljs-string">&quot;fY1&quot;</span>:<span class="hljs-number">0.885937513201498</span>,<span class="hljs-string">&quot;fX2&quot;</span>:<span class="hljs-number">11.0000003278256</span>,<span class="hljs-string">&quot;fY2&quot;</span>:<span class="hljs-number">1.09593751163688</span>,<span class="hljs-string">&quot;fX1NDC&quot;</span>:<span class="hljs-number">0.780000016093254</span>,<span class="hljs-string">&quot;fY1NDC&quot;</span>:<span class="hljs-number">0.775000005960464</span>,<span class="hljs-string">&quot;fX2NDC&quot;</span>:<span class="hljs-number">0.980000019073486</span>,<span class="hljs-string">&quot;fY2NDC&quot;</span>:<span class="hljs-number">0.935000002384186</span>,<span class="hljs-string">&quot;fBorderSize&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fInit&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fShadowColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fCornerRadius&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fOption&quot;</span>:<span class="hljs-string">&quot;brNDC&quot;</span>,<span class="hljs-string">&quot;fName&quot;</span>:<span class="hljs-string">&quot;stats&quot;</span>,<span class="hljs-string">&quot;fTextAngle&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTextSize&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTextAlign&quot;</span>:<span class="hljs-number">12</span>,<span class="hljs-string">&quot;fTextColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fTextFont&quot;</span>:<span class="hljs-number">42</span>,<span class="hljs-string">&quot;fLabel&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;fLongest&quot;</span>:<span class="hljs-number">18</span>,<span class="hljs-string">&quot;fMargin&quot;</span>:<span class="hljs-number">0.05</span>,<span class="hljs-string">&quot;fLines&quot;</span>:&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TList&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;TList&quot;</span>,<span class="hljs-string">&quot;arr&quot;</span>:[&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TLatex&quot;</span>,<span class="hljs-string">&quot;fUniqueID&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits&quot;</span>:<span class="hljs-number">50331648</span>,<span class="hljs-string">&quot;fName&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;fTitle&quot;</span>:<span class="hljs-string">&quot;h&quot;</span>,<span class="hljs-string">&quot;fTextAngle&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTextSize&quot;</span>:<span class="hljs-number">0.0368</span>,<span class="hljs-string">&quot;fTextAlign&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTextColor&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTextFont&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fX&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fY&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fLineColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineStyle&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineWidth&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;fLimitFactorSize&quot;</span>:<span class="hljs-number">3</span>,<span class="hljs-string">&quot;fOriginSize&quot;</span>:<span class="hljs-number">0.0368000008165836</span>&#125;,&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TLatex&quot;</span>,<span class="hljs-string">&quot;fUniqueID&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits&quot;</span>:<span class="hljs-number">50331648</span>,<span class="hljs-string">&quot;fName&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;fTitle&quot;</span>:<span class="hljs-string">&quot;Entries = 1      &quot;</span>,<span class="hljs-string">&quot;fTextAngle&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTextSize&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTextAlign&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTextColor&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTextFont&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fX&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fY&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fLineColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineStyle&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineWidth&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;fLimitFactorSize&quot;</span>:<span class="hljs-number">3</span>,<span class="hljs-string">&quot;fOriginSize&quot;</span>:<span class="hljs-number">0.04</span>&#125;,&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TLatex&quot;</span>,<span class="hljs-string">&quot;fUniqueID&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits&quot;</span>:<span class="hljs-number">50331648</span>,<span class="hljs-string">&quot;fName&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;fTitle&quot;</span>:<span class="hljs-string">&quot;Mean  =      3&quot;</span>,<span class="hljs-string">&quot;fTextAngle&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTextSize&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTextAlign&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTextColor&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTextFont&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fX&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fY&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fLineColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineStyle&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineWidth&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;fLimitFactorSize&quot;</span>:<span class="hljs-number">3</span>,<span class="hljs-string">&quot;fOriginSize&quot;</span>:<span class="hljs-number">0.04</span>&#125;,&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TLatex&quot;</span>,<span class="hljs-string">&quot;fUniqueID&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits&quot;</span>:<span class="hljs-number">50331648</span>,<span class="hljs-string">&quot;fName&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;fTitle&quot;</span>:<span class="hljs-string">&quot;Std Dev   =      0&quot;</span>,<span class="hljs-string">&quot;fTextAngle&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTextSize&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTextAlign&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTextColor&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTextFont&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fX&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fY&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fLineColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineStyle&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineWidth&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;fLimitFactorSize&quot;</span>:<span class="hljs-number">3</span>,<span class="hljs-string">&quot;fOriginSize&quot;</span>:<span class="hljs-number">0.04</span>&#125;],<span class="hljs-string">&quot;opt&quot;</span>:[<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>]&#125;,<span class="hljs-string">&quot;fOptFit&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fOptStat&quot;</span>:<span class="hljs-number">1111</span>,<span class="hljs-string">&quot;fFitFormat&quot;</span>:<span class="hljs-string">&quot;5.4g&quot;</span>,<span class="hljs-string">&quot;fStatFormat&quot;</span>:<span class="hljs-string">&quot;6.4g&quot;</span>,<span class="hljs-string">&quot;fParent&quot;</span>:&#123;<span class="hljs-string">&quot;$ref&quot;</span>:<span class="hljs-number">3</span>&#125;&#125;],<span class="hljs-string">&quot;opt&quot;</span>:[<span class="hljs-string">&quot;brNDC&quot;</span>]&#125;,<span class="hljs-string">&quot;fBufferSize&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBuffer&quot;</span>:[],<span class="hljs-string">&quot;fBinStatErrOpt&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fStatOverflows&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;fArray&quot;</span>:[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]&#125;,&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TPaveText&quot;</span>,<span class="hljs-string">&quot;fUniqueID&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits&quot;</span>:<span class="hljs-number">50331657</span>,<span class="hljs-string">&quot;fLineColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineStyle&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineWidth&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fFillColor&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fFillStyle&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fX1&quot;</span>:<span class="hljs-number">4.74928160545941</span>,<span class="hljs-string">&quot;fY1&quot;</span>:<span class="hljs-number">1.10250001378823</span>,<span class="hljs-string">&quot;fX2&quot;</span>:<span class="hljs-number">5.25071839454059</span>,<span class="hljs-string">&quot;fY2&quot;</span>:<span class="hljs-number">1.17468751593959</span>,<span class="hljs-string">&quot;fX1NDC&quot;</span>:<span class="hljs-number">0.479942528735632</span>,<span class="hljs-string">&quot;fY1NDC&quot;</span>:<span class="hljs-number">0.940000003948808</span>,<span class="hljs-string">&quot;fX2NDC&quot;</span>:<span class="hljs-number">0.520057471264368</span>,<span class="hljs-string">&quot;fY2NDC&quot;</span>:<span class="hljs-number">0.995000004768372</span>,<span class="hljs-string">&quot;fBorderSize&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fInit&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fShadowColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fCornerRadius&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fOption&quot;</span>:<span class="hljs-string">&quot;blNDC&quot;</span>,<span class="hljs-string">&quot;fName&quot;</span>:<span class="hljs-string">&quot;title&quot;</span>,<span class="hljs-string">&quot;fTextAngle&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTextSize&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTextAlign&quot;</span>:<span class="hljs-number">22</span>,<span class="hljs-string">&quot;fTextColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fTextFont&quot;</span>:<span class="hljs-number">42</span>,<span class="hljs-string">&quot;fLabel&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;fLongest&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fMargin&quot;</span>:<span class="hljs-number">0.05</span>,<span class="hljs-string">&quot;fLines&quot;</span>:&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TList&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;TList&quot;</span>,<span class="hljs-string">&quot;arr&quot;</span>:[&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TLatex&quot;</span>,<span class="hljs-string">&quot;fUniqueID&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fBits&quot;</span>:<span class="hljs-number">50331648</span>,<span class="hljs-string">&quot;fName&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;fTitle&quot;</span>:<span class="hljs-string">&quot;h&quot;</span>,<span class="hljs-string">&quot;fTextAngle&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTextSize&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTextAlign&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTextColor&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fTextFont&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fX&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fY&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fLineColor&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineStyle&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;fLineWidth&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;fLimitFactorSize&quot;</span>:<span class="hljs-number">3</span>,<span class="hljs-string">&quot;fOriginSize&quot;</span>:<span class="hljs-number">0.0467500016093254</span>&#125;],<span class="hljs-string">&quot;opt&quot;</span>:[<span class="hljs-string">&quot;&quot;</span>]&#125;&#125;],<span class="hljs-string">&quot;opt&quot;</span>:[<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;blNDC&quot;</span>]&#125;,<span class="hljs-string">&quot;fExecs&quot;</span>:<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;fName&quot;</span>:<span class="hljs-string">&quot;c1&quot;</span>,<span class="hljs-string">&quot;fTitle&quot;</span>:<span class="hljs-string">&quot;c1&quot;</span>,<span class="hljs-string">&quot;fNumPaletteColor&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fNextPaletteColor&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fDISPLAY&quot;</span>:<span class="hljs-string">&quot;$DISPLAY&quot;</span>,<span class="hljs-string">&quot;fDoubleBuffer&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fRetained&quot;</span>:<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;fXsizeUser&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fYsizeUser&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fXsizeReal&quot;</span>:<span class="hljs-number">20</span>,<span class="hljs-string">&quot;fYsizeReal&quot;</span>:<span class="hljs-number">14.28571</span>,<span class="hljs-string">&quot;fWindowTopX&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fWindowTopY&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fWindowWidth&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fWindowHeight&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;fCw&quot;</span>:<span class="hljs-number">696</span>,<span class="hljs-string">&quot;fCh&quot;</span>:<span class="hljs-number">472</span>,<span class="hljs-string">&quot;fCatt&quot;</span>:&#123;<span class="hljs-string">&quot;_typename&quot;</span>:<span class="hljs-string">&quot;TAttCanvas&quot;</span>,<span class="hljs-string">&quot;fXBetween&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;fYBetween&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;fTitleFromTop&quot;</span>:<span class="hljs-number">1.2</span>,<span class="hljs-string">&quot;fXdate&quot;</span>:<span class="hljs-number">0.2</span>,<span class="hljs-string">&quot;fYdate&quot;</span>:<span class="hljs-number">0.3</span>,<span class="hljs-string">&quot;fAdate&quot;</span>:<span class="hljs-number">1</span>&#125;,<span class="hljs-string">&quot;kMoveOpaque&quot;</span>:<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;kResizeOpaque&quot;</span>:<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;fHighLightColor&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;fBatch&quot;</span>:<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;kShowEventStatus&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;kAutoExec&quot;</span>:<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;kMenuBar&quot;</span>:<span class="hljs-literal">true</span>&#125;);</span><br><span class="javascript">       Core.draw(<span class="hljs-string">&quot;root_plot_1&quot;</span>, obj, <span class="hljs-string">&quot;&quot;</span>);</span><br>     &#125;<br> );<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以发现最显著的差异在这一部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">requirejs.config(&#123;<br>    paths: &#123;<br>      <span class="hljs-string">&#x27;JSRootCore&#x27;</span> : <span class="hljs-string">&#x27;https://root.cern.ch/js/notebook//scripts/JSRootCore&#x27;</span>,<br>    &#125;<br>  &#125;);<br></code></pre></td></tr></table></figure><p>在<code>online</code>部分，调用了root官网的JSRootCore库，而<code>offline</code>则试图从本地服务器寻找。在</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">require</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>    <span class="hljs-comment">// All requirements met (we are in jupyter notebooks or we loaded requirejs before).</span><br>    display_root_plot_1586256162911();<br>&#125; <br></code></pre></td></tr></table></figure><p>中添加<code>alert</code>函数。<code>alert</code>会执行。意味着会直接执行<code>require([&#39;scripts/JSRootCore&#39;],...)</code>函数，相比于<code>online</code>，缺失的正是上面提到的从root官网加载js这一部分。<br>遵从最少修改原则，为了将导出的html正常显示图，只许将<code>require([&#39;scripts/JSRootCore&#39;],</code>更改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">requirejs.config(&#123;<br>     paths: &#123;<br>       <span class="hljs-string">&#x27;JSRootCore&#x27;</span> : <span class="hljs-string">&#x27;https://root.cern.ch/js/notebook//scripts/JSRootCore&#x27;</span>,<br>     &#125;<br>   &#125;);<br> <span class="hljs-built_in">require</span>([<span class="hljs-string">&#x27;JSRootCore&#x27;</span>],<br></code></pre></td></tr></table></figure><p>即可.<br>在<code>bash</code>中执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -i <span class="hljs-string">&quot;s/require(\[&#x27;scripts\/JSRootCore&#x27;\],/requirejs.config(&#123;paths:&#123;&#x27;JSRootCore&#x27;:&#x27;https:\/\/root.cern.ch\/js\/notebook\/\/scripts\/JSRootCore&#x27;,&#125;&#125;);require(\[&#x27;JSRootCore&#x27;\],/g&quot;</span> output.html<br></code></pre></td></tr></table></figure><p><code>output.html</code>为v620导出的html. 由此即可实现导出的html正常绘图.<br>如果需要发布或共享ipynb文件,则需要额外删除其他部分。<br>为了方便起见，在bashrc中构造函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">py2html()<br>&#123;<br>sed -i &quot;s/require(\[&#x27;scripts\/JSRootCore&#x27;\],/requirejs.config(&#123;paths:&#123;&#x27;JSRootCore&#x27;:&#x27;https:\/\/root.cern.ch\/js\/notebook\/\/scripts\/JSRootCore&#x27;,&#125;&#125;);require(\[&#x27;JSRootCore&#x27;\],/g&quot; $1<br>sed -i &quot;s/\&quot;if (typeof/bbbegin/g&quot; $1<br>sed -i &quot;s/\&quot;    display_root_plot/eeend\&quot;    display_root_plot/g&quot; $1<br>sed -i &quot;s/\&quot;&#125; else &#123;/bbbegin/g&quot; $1<br>sed -i &quot;s/\&quot;function display_root_plot/eeend\&quot;function display_root_plot/g&quot; $1<br>sed -e &#x27;/bbbegin/!b;:a;/eeend/bb;$!&#123;N;ba&#125;;:b;s/bbbegin.*.*eeend//&#x27; -i $1<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>bash</code>中执行<code>py2html *.ipynb</code>或<code>py2html *.html</code>即可将其转化为有图的文件。<br>由于转义符号的问题，部分文件可能需要重命名方能正常转化.<br>此部分也可在<code>py2html</code>函数中用中间变量解决，这点回头再修正。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>日程表</title>
      <link href="2020/04/01/%E7%A8%8B%E8%A1%A8/"/>
      <url>2020/04/01/%E7%A8%8B%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="81d51cdac79a74c14c9e49f5cc680c2987011c7fdf130833ade15f78c6c851be">c04d434e9f9b9f4f4248d4c81626eabfcd1188e9177d6a8a417acc0cff6aa7287bc73795ff97571c71769c73f33c57cfe1592911454e801702828f1f1f3442d6a760866896b08ead411661331326c0eed2fc6f1f2d11a6b09434074df478dca89abe3bff0713512634bef6b1dde36f5576f5e07ce7e7b839950123b8d3281fda1c57655a5b0d3d26488cd5149af3de7f6822ae48a4d12d9dc9d8aee00f5b0578fe361706535b18a432497f5aad5d3a697584083d6914823fdab131f2f9f8284a5d480adaee51d187023ad8217c008d12a06e0e324a17c488da2cad902cbfd27ff6c1276cab4f2f655dcd4843c781cb450f8da99b47b48c1194d6b50b727411eea205fb017b155ec10b9df06be337a285898343700e9f410a09df2e6212e4551dc45059820e05f6d8318a2db4b902920eca71ae337696afee6397c94a7a681a089f1768219b9327ccb502eb1fbbc554d897c8c225e74a06903a92bffe32fa9392746476ea81d7962cf05f8362a94513d5b134ad563dfd63218c4c3745d0179110b4c383de079d5b5be0f772e5e0f4a91a84552fc9e447aeda22c1593716cf40331bf5ae161231c98c44f8dd6d9a69460db6f2b3df5dff6669b192463a0c548c84a38d1f84f7a0837c737c163740a3886e9cf5be557ab9d7448f24eeae68906f230f721da1a16ca8ae470b16703f3212b5036cf433751aa70543e1d171ce43368b69026092d27904e511418896f5b729bbf5aea1e0ee4f5115fa9c4873e9fa24a2eac06e3a0d6fe18f8c1e96839c906a8468a32b255c2b09464fb5a2d1d5cfa233f630f1472dfa3dafd1d18bd244b74a2d5f51620417319bc5c1232709111da93da9154a6a23696fdbbbb33c917ae61ddc0fb9819a9e73892ac5390db20d9a32e835f14c1cc38425393b05c40c6483e906c579870e228df161adb700d80364bc9fcbe06d3e40e216ecb42bb8218a83707d7b05cc42437960347471cbb40ada9949f817fc21bb993064bb920af406492d98f456c5fdf8dd7bf95dd49e49d2deb0bf6120fddf3f36a0c7cc4c595c24276299dd6fe256459d2ab6d84a581d6f3a9a1816e8894fa74ac37b742d258989f62d895b596590cb0abb5c68e27521c8b754410441b20cb71968fb0d3cb4280a7e94bdbefa1820dd7b101bd03b4fc04f8fa038d1e9b8a0adbfa269c5b3a4797fea6c1aa5ff41b6f8994d1880c6ace68295dce8cd7e4d85cfae8994a5d53e8519364b152f6d8b9a90122522f1d9a0fd4288ce908b58c96e42eaab8090a4b6944f1036794d70149457c896bac0242b33939471cfd12ba5499abbf33fbe691083387d3df994525df322c350637b14cb348237b9de69e487310b833383a27ce193d4812a5607edcc774eb40abab9fd63d51041da9e6b84951590e148585d8c0e313821a85d3b3c4993fbd48abaa0a16cfe90599e8bfd084785cce6da44492bd63df9c145ed7a3febd6e10e8bc2ff286129ec8b5eae97d2a92fec48a4ffd7cc9ac39444a0523bd97254f835d5f135d73d06af45ba3f82fe9d42eae021eca129c3c228bfee9ada784602a5915ea9752102139282d7e5e901a9331c9a0af383b313b92815c454891eea8baf454637a7ef8d4f6418d2f4260854037581dfd2476b6e109327050d1f710672e88bdee45eb41172cb77bd6fa37f1add4d3d3f5d25e863769cc32c8802f1056d8f0cc5ccfcbf1a36e932aea0782dcfc4fe70795e6be7bb57a209d323df670a9cba65a5bbeaadc6ce30806925e2161efdc578324e7204c020d217f429a44665e270cce9c8239a080d2e6be665e7cf90ec04a736582bc2002ba4b61c98ddf06c604720a6b7dd5fc46897bffcf5528b8e676dcb3af60acac0666e9b212dcd5aab82405344becb5d4c46cad17a928278a2dc00f1c562d32d0c78a76dcb644dfd90906b8d5345b03da1af49a8fccacf150791746d7a3c9bf35bd1e27d5ce9275c7daaaf669e9951d97d3729b7262a77da7ad1852e43b4c5c655002c9696309984dfdfdf15f4bbb53593610bfb9f16d745cb5c967547d118c69eeaa38f4dd63ac8b6b13dd4cb8722d130f2c2322faa6cd47e728d08a67605c28202b81a56939d4f9435c40b805ea0d25c3ac14adcc99cb71fa79226cf57a056194020bbe5a853e7b99ea5a6d1a95a51c004176f11207620ca799800e0909871e12958239ff2abce16b5ebd032ddb02af58e22f31d58fe1634dec00a6120229dc1a02b4724327e3206409b3c77c052e87f91c7f6f5a2c7a68b067e4a94209e9254779fd4fc4aebc08977edb8f334eca1e6458820dd9bd0d4047f8382da4732047d393ec4d644015177cac8471c40b5e1b0feaed83513103dcedd419a8481c40e0af8ba71cb342afd31affe29a18be8f9498226b2ae14226dfb5c3b3280c097012b5388902556ae8c2536ba324b11366d3c97998472a88feb11510cc05ac2e3079e1a585e2d0c747a31cfb425de9579d463159e75065828a1302db5fc6d482a5e4071c8d95c4f1034aa8201514c4cad7c8b7954c8a7440ce078d05781fd3e0724055e75bb7c1392e03e85cc06e3dce2e41888f5205bda4e12dc6d7a9ec4191e19063cb9cac4f25919771661e717ee547fc329a10b9931676f27e90112e6989b716c04ebbd662cbf654af12eebd01d83a8ff196282fe54eba43ec4e11e167d8e64babd8251ece97836761eb04e7f9861881f2368a901af41be32900609a4dab192e1e67e37546ce335347aa9b7bb88c821aebf853a71217685d9c2fedd5ba27c84557c81a863142d803df38f3d5a3d5b2c95e8d0213e6a3ba077bf4a85e61fb0dc84b4dfe248fcd63da26f740d6a4165756e3f31c0b29ddbffb5b7e0e86b3d05080d4d3273d6883bc8a198ba20e6694c4d19907fad00ed7e23f5c599445bc08c511d5fb3bedb77d57dfe475a269523a0908ae591b3115bdb23677f866b2f5ffe6211baa9f67b7cbc3527beccde0b29ca3b965595c94a2ce73c93ff9329d027c31ff31a889c93ffeb004dc64a87184d247d691ae928003d8534d1ba6d15ab8269548a57633fce13d10cdec6c3850492b5b808f03f5581a7627581965f786f8e7844148140077d615bf3a227b4e09eb6dc19ffeab3c5698e3c7444706a54556d9af11f7aa6b2891b4b783c4719ebd67914038f2218cde7ba8a0b246a94ec7003b7e6e7fa4ae4725d1488ef0d902eb0a83d3a32c8d299f52144a6fcb300104ea1fd24caee589727236f3e1657d2f5f252cc504f1ae14470c0070ad0fd270c246c607fe626e4c404dffca0c5ffffa56d20252ed067716ca66e3b1fffbc0dee0e2f67d71714997832ee21c905c13d0247485d2524a5e947b7aa8ab23df4ab2d22cc4810cc2aee06e04d57cd829ba54e9349300768949133c73cd80f79275f962db3c3c8ab4772d912ebdf8e21c12bf550cb856a0590d0ff167d7179291694ea6cc0f145e244f921b7fb0cfc0f3b3544086b599433b3c659af0ef98bc2f29c390be3edee967249a71634c0c13396ccd3d4857ad1cc0b3cef3e590a78e615f857cd8825dd530291bcc3cb37614332c8e4bd1135dc21b3e84eca5723bf69776752ddd2eba8dbdfe7b2904942cc29e98c0621bd4e25ddbb6451289f2b30c36fc01724542478274689ba8bdc2cba4738b230659d62a795971d09bdad5cc50d642a8440f63bec4152cd3326ba320c3af83580b032a65cd2418f842665fa070b6d7c40497c6062147a64c1673a417f58a3a8dda2bc309555ec39273361bf90b1381bc45ba97c764f90bb7c4fface5bf13eeaa54c0736aed762cd7e9b6679dc56b369d2fe0f67a34b3d895ff4dc3dbe8761fbaa0727e93b1102d02a81985ecca61672597129319e9a1c7861997887c93997a088dd1698b835d9f3a392c8149268e94f3364426bf5e1100c7908f4e2c29b4aa16442de43b8d12f45afe5c2aab792773a65a77548acf20d6da929c5eba5cabd1b9faad14e2d2818fb77e4854ac81c0c31336746ae41407ee731b28bf52873ed85c49e2cc29e6043c400de1aa0d801c5003271ccdf889eca4062402bfa893a2c98b94780188b4d8149e04398bc7e63f583b4cc95ce9138316c933f86018760e6784acb21b2e4d75760c112613d25c0cfbeb3ec2cf12214466f06b6bea54f3cc77ee043bb3eb5c89fadedfd279675cffad156cc1cc7d4462416115798f4d2d4d3e13530a276ba95494b66c68c5ada1210f937207752c6beb29b4138a8162615ef3bd8748adaf2e4e09cafafbc2be07ba23e6a9f59f466dc4e651b82bbb658092f9a2d75ca79d7a1612fb5d195ed1731abc877f1b7b0f07e4f5d0eca3babf763a0b9e2d3d68e56dc7b3668b9f4bc2c33a893aa56e75471bb9f3203b2253e76f6c1573e2d691927a0d4f0c481bf357aa39fd8961cd2dff4aa5c922ca1f2e281b72db96c72c3686af1ad0fddfd085d0df67ae77f2ec86a72c8f5b46bf179adcd2fef43416674bb4e1efc564a0903b7644da753861f357397d106b5f15aaf1e34407e00411df06029998d6c1e38402c69e301625c141cade5bf03ad25201f53c303032834a065ebcba032a5d1af6b559c65b28b6fa61650a1155a3db4eaf9c3089a1e248ede5234481108b9abd1d1f84d56f3c850100fa12c053e16f8739f9673cece8fdd797811d81d7019fc210400dfcb03efde37b2c4b6c3ccd59b82f6ac510685fa1deb2a167151ba68df8746390acd250598144889422a818a53f7df22053fcbcb5f7473de983fc31dd1fae21e54920ed1d2126f372a47e6a894f67019507235c41340035ace67f01e9c4531305571ac47afef61cc724e46337176e165a70adadfab4fd6417b009e9de472546d9431721191eb327b45d677ef042d1a7f46e7209a0f5300960d165ec8f44c2d517d52af5436bb6dcdf63985672b44947180a2bad66f1d19894274f36129ec151bc8766f170c6b0aa60e9cc695e483c2202bb3fdb406254bc37608a8000828706e653778d905db90caa95ab5b34eb26b2efe9c3c7b6b63dd58f4614acde4038ccec11b09683c933388eb38959e46f6537040a4600ec48edcf5cf5c133f1785d2c987a1825198c0e9d5ea4dfade13d9d9e300ba9641496dbd560defadfefe00e10190cf8e2aaa42476a1026119a9ff98df50060a1c8474734e77efc1396a1b83a4191bc287f2a994f9a2ebbbcb0a4fb0d96fbb91828b61eb2b3e915f45cbade6e3d7e71a8c64b758675104cf43530f543fd5e4e67ef42538c5422124ab5985f22</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo设置端口和ip</title>
      <link href="2020/04/01/Hexo%E8%AE%BE%E7%BD%AE%E7%AB%AF%E5%8F%A3%E5%92%8Cip/"/>
      <url>2020/04/01/Hexo%E8%AE%BE%E7%BD%AE%E7%AB%AF%E5%8F%A3%E5%92%8Cip/</url>
      
        <content type="html"><![CDATA[<p>在bash中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s -i -p 8000<br></code></pre></td></tr></table></figure><p><code>-i</code> 可以开放外部网路访问，若去除该选项，则只能本机<code>localhost</code>访问.<br><code>-p 8000</code>可以用来设置端口，默认端口为4000.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jupyter指定配置文件启动</title>
      <link href="2020/03/27/Jupyter%E6%8C%87%E5%AE%9A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%90%AF%E5%8A%A8/"/>
      <url>2020/03/27/Jupyter%E6%8C%87%E5%AE%9A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p><code>jupyter</code>默认配置文件为<code>~/.jupyter/jupyter_notebook_config.py</code><br>若有多种配置需求如端口，启动路径，密码，是否允许远程访问，则可以将<code>jupyter_notebook_config.py</code>复制一份进行修改，随后重命名或者放置到其他目录。为了方便管理，可以修改名字，如<code>jupyter_notebook_config_remote.py</code>，启动jupyter命令为<br><code>jupyter-notebook --config=&#39;~/.jupyter/jupyter_notebook_config_remote.py&#39;</code>. 而默认的配置依旧可以使用<code>jupyter-notebook</code>启动.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解决vscode 打开WSL 系统目录出错的问题</title>
      <link href="2020/03/26/%E8%A7%A3%E5%86%B3vscode-%E6%89%93%E5%BC%80WSL-%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95%E5%87%BA%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>2020/03/26/%E8%A7%A3%E5%86%B3vscode-%E6%89%93%E5%BC%80WSL-%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95%E5%87%BA%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>更新系统至<code>windows v2004</code>版本之后，在非<code>Windows</code>系统目录(即非<code>/mnt</code>)打开<code>vscode</code>会提示错误，需要手动前往<code>\\wsl$\Arch\mnt\c...</code>之类的目录用<code>vscode</code>打开. 在<code>wsl</code>系统下输入<code>code \\wsl$\Arch\mnt\c...</code>也会同样报错。<br>解决此问题，只需要进入<code>Windows</code>系统目录，再执行<code>code //wsl$/Arch/home/yfs/...</code>即可。命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> code=<span class="hljs-string">&#x27;result=$(pwd | grep &quot;mnt&quot;);if [[ $result ]];then code .;else a=`pwd` &amp;&amp; cd /mnt/c/ &amp;&amp; code &quot;//wsl$/Arch$a&quot;&amp;&amp; cd $a;fi&#x27;</span><br></code></pre></td></tr></table></figure><ol><li>先判断当前目录是否包含mnt,若包含，则为windows目录环境，直接code即可;</li><li>若为wsl系统目录，先记录当前目录，随后进入windows目录，code打开映射的wsl路径，随后返回原目录。<br>Tips:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">linux环境下,alias 的优先级高于$PATH.<br></code></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Magic </tag>
            
            <tag> wsl </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jupyter离线配置</title>
      <link href="2020/03/25/Jupyter%E7%A6%BB%E7%BA%BF%E9%85%8D%E7%BD%AE/"/>
      <url>2020/03/25/Jupyter%E7%A6%BB%E7%BA%BF%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>此文档不是用于离线安装jupyter，而是解决jupyter因网络问题无法正常显示图像的问题。<br>修改文件：<code>~ /.jupyter/jupyter_notebook_config.py</code><br>定位到 <code>c.NotebookApp.extra_static_paths</code> 这一行，修改为<br><code>c.NotebookApp.extra_static_paths = [&#39;/usr/share/root/js&#39;]</code><br>其中<code>&#39;/usr/share/root/js&#39; </code>根据root安装的目录来确定.<br><img src="/images/pasted-2.png" alt="upload successful"><br>可以通过<code>find</code>命令来确定该路径.</p>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jupyter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python执行jupyter脚本并返回结果</title>
      <link href="2019/11/24/python%E6%89%A7%E8%A1%8Cjupyter%E8%84%9A%E6%9C%AC%E5%B9%B6%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C/"/>
      <url>2019/11/24/python%E6%89%A7%E8%A1%8Cjupyter%E8%84%9A%E6%9C%AC%E5%B9%B6%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<p>系统中只存在python环境而没有jupyter环境可用，希望python能够直接执行jupyter脚本(*.ipynb)文件，并将结果返回（同时输出到*.ipynb脚本和终端）.<br><a href="https://raw.githubusercontent.com/mission-young/python_scripts/master/jupyter.py">下载地址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs python3">#!&#x2F;usr&#x2F;bin&#x2F;python3<br>import sys<br>import json<br>import os<br>class tovar():<br>    &quot;&quot;&quot;重定向python的输出至变量<br>    print()函数实际上是 sys.stdout 函数，默认输出到终端。<br>    这里将print()函数重定向到变量<br>    Attributes:<br>        str: 用于存储print函数输出的结果<br>    &quot;&quot;&quot;<br>    def __init__(self):<br>        &quot;&quot;&quot;<br>        初始化函数，必备函数<br>        &quot;&quot;&quot;<br>        self.str&#x3D;&#39;&#39;<br>    def write(self,s):<br>        &quot;&quot;&quot;<br>        将print的值暂存到str，如果多次print，则值会累加，必备函数<br>        &quot;&quot;&quot;<br>        self.str+&#x3D;s<br>    def flush(self):<br>        &quot;&quot;&quot;<br>        清空str，必备函数<br>        &quot;&quot;&quot;<br>        self.str&#x3D;&#39;&#39;<br>    def content(self):<br>        &quot;&quot;&quot;<br>        返回str，将暂存的输出返回到变量中<br>        &quot;&quot;&quot;<br>        return self.str.rstrip()<br><br>def writecode(s,mode&#x3D;&#39;update&#39;):<br>    &quot;&quot;&quot;<br>    update模式时，为累加模式<br>    recreate模式时，重写模式<br>    &quot;&quot;&quot;<br>    if mode &#x3D;&#x3D; &#39;recreate&#39;:<br>        w&#x3D;&#39;w&#39;<br>    else:<br>        w&#x3D;&#39;a&#39;<br>    fout &#x3D; open(&#39;tmp.py&#39;,w,encoding&#x3D;&#39;utf8&#39;)<br>    fout.write(s)<br>    fout.close()<br># 获得要转化的jupyter文件<br>filename&#x3D;sys.argv[1]<br># jupyter文件格式实际上是json格式，选择自带的json库来读取，读取后关闭文件<br>file&#x3D;open(filename)<br>data&#x3D;json.load(file)<br>file.close()<br>cells&#x3D;data[&#39;cells&#39;]<br># 命令单元格的id，必须设置，否则不会显示执行结果<br>id&#x3D;1<br># term暂存，为输出到终端，随后将print重定向到变量var<br>var&#x3D;tovar()<br>term&#x3D;sys.stdout<br>sys.stdout&#x3D;var<br><br>for cell in cells:<br>    cell_type&#x3D;cell[&#39;cell_type&#39;]<br>    # 单元格为markdown时，不需要处理，打开jupyter文件会自动转换<br>    if cell_type&#x3D;&#x3D;&#39;markdown&#39;:<br>        continue<br>    else:<br>        # 当jupyter清空了所有输出时，execution_count为null，如果不设置id的话，即使<br>        # 有执行结果，在jupyter中也不会显示。<br>        cell[&#39;execution_count&#39;]&#x3D;id<br>        # 将print重定向到终端，以便在终端输出进度，随后重定向到变量<br>        sys.stdout&#x3D;term<br>        print(&#39;process: %d&#x2F;%d&#39; %(id,len(cells)-1))<br>        sys.stdout&#x3D;var<br>        id+&#x3D;1<br>        codes&#x3D;cell[&#39;source&#39;]<br>        #新建代码单元格存储文件<br>        writecode(&#39;&#39;,&#39;recreate&#39;)<br>        for code in codes:<br>            # 修正jupyter中一些magic code<br>            if &#39;matplotlib inline&#39; in code:<br>                code&#x3D;&#39;import matplotlib.pyplot as plt\n&#39;<br>            # 逐行写入code cell的代码到文件中<br>            writecode(code)<br>        # 执行代码单元格代码，这种形式执行的好处在于，等价于直接把代码拷贝到主程序中，<br>        # 程序变量等信息保留。由于此时print重定向到tovar函数的str变量中，并不会在终端输出信息。<br>        exec(open(&#39;tmp.py&#39;).read())<br>        # 获取代码运行的结果<br>        result&#x3D;var.content()<br>        # 清空缓存，以便于存储下一次结果<br>        var.flush()<br>        # 代码运行为空跳过<br>        if(result.strip()!&#x3D;&#39;&#39;):<br>            # 这一点用来判定原jupyter是否有输出，如果没有输出，则需要新建dict，否则只需要替换<br>            # 相应部分既可以。<br>            if len(cell[&#39;outputs&#39;])&#x3D;&#x3D;0:<br>                out&#x3D;&#123;&#125;<br>                out[&#39;name&#39;]&#x3D;&#39;stdout&#39;<br>                out[&#39;output_type&#39;]&#x3D;&#39;stream&#39;<br>                out[&#39;text&#39;]&#x3D;[res + &#39;\n&#39; for res in result.split(&#39;\n&#39;)]<br>                cell[&#39;outputs&#39;].append(out)<br>            else:<br>                cell[&#39;outputs&#39;][0][&#39;name&#39;]&#x3D;&#39;stdout&#39;<br>                cell[&#39;outputs&#39;][0][&#39;output_type&#39;]&#x3D;&#39;stream&#39;<br>                cell[&#39;outputs&#39;][0][&#39;text&#39;]&#x3D;[res + &#39;\n&#39; for res in result.split(&#39;\n&#39;)]<br>            # 在终端中输出<br>            sys.stdout&#x3D;term<br>            print(result)<br>    # 每运行一次code cell，修改jupyter文件<br>    file&#x3D;open(filename,&#39;w&#39;)<br>    json.dump(data,file)<br>    file.close()<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jupyter </tag>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习资源汇总</title>
      <link href="2019/11/05/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/"/>
      <url>2019/11/05/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<ul><li>Grokking Deep Learning （图解深度学习）<br>  - 个人主页：<a href="https://iamtrask.github.io/">https://iamtrask.github.io/</a><br>  - Github地址：<a href="https://github.com/iamtrask/Grokking-Deep-Learning">https://github.com/iamtrask/Grokking-Deep-Learning</a><br>  - pdf文档 <a href="https://github.com/mission-young/Hexo_attachment/blob/master/pdf/Manning.Grokking.Deep.Learning.pdf">https://github.com/mission-young/Hexo_attachment/blob/master/pdf/Manning.Grokking.Deep.Learning.pdf</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作计划</title>
      <link href="2019/10/11/%E5%B7%A5%E4%BD%9C%E8%AE%A1%E5%88%92/"/>
      <url>2019/10/11/%E5%B7%A5%E4%BD%9C%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="TODO："><a href="#TODO：" class="headerlink" title="TODO："></a>TODO：</h2><ol><li>织围脖🧣</li><li>双十一买内衣内裤</li><li>提醒公考报名</li><li>数据处理-吴鸿毅刻度</li><li>数据处理-计算探测效率</li><li>学习swiftui</li><li>学习机器学习</li><li>整理房间</li><li>买西藏火车票</li><li>定西藏的行程</li><li>给宇宇买吃的</li><li>去健身房健身</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>macOS配置Qt开发环境</title>
      <link href="2019/10/10/macOS%E9%85%8D%E7%BD%AEQt%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>2019/10/10/macOS%E9%85%8D%E7%BD%AEQt%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="安装qt和qtcreator"><a href="#安装qt和qtcreator" class="headerlink" title="安装qt和qtcreator"></a>安装qt和qtcreator</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install qt<br>brew cask install qt-creator<br></code></pre></td></tr></table></figure><h2 id="配置qt环境"><a href="#配置qt环境" class="headerlink" title="配置qt环境"></a>配置qt环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PATH=&quot;/usr/local/opt/qt/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export LDFLAGS=&quot;-L/usr/local/opt/qt/lib&quot;&#x27;</span> &gt;&gt; ~/.zshrc<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export CPPFLAGS=&quot;-I/usr/local/opt/qt/include&quot;&#x27;</span> &gt;&gt; ~/.zshrc<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS初始化</title>
      <link href="2019/10/10/macOS%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>2019/10/10/macOS%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="安装homebrew"><a href="#安装homebrew" class="headerlink" title="安装homebrew"></a>安装homebrew</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/bin/ruby -e <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span><br></code></pre></td></tr></table></figure><h2 id="安装第三方软件权限问题"><a href="#安装第三方软件权限问题" class="headerlink" title="安装第三方软件权限问题"></a>安装第三方软件权限问题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo spctl --master <span class="hljs-built_in">disable</span><br></code></pre></td></tr></table></figure><h2 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;mission-young&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;yuanfangsee@pku.edu.cn&quot;</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;yuanfangsee@pku.edu.cn&quot;</span><br>cat ~/.ssh/id_rsa.pub<br><span class="hljs-comment">## paste it to github</span><br></code></pre></td></tr></table></figure><h2 id="配置开发环境"><a href="#配置开发环境" class="headerlink" title="配置开发环境"></a>配置开发环境</h2><ul><li><a href="https://mission-young.github.io/2019/08/18/%E5%A4%9A%E7%AB%AF%E7%BC%96%E8%BE%91Hexo%E5%8D%9A%E5%AE%A2/">Hexo博客</a></li><li><a href="">Qt</a></li><li>root<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install root<br></code></pre></td></tr></table></figure></li><li>tmux <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install tmux<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs .tmux.conf"># Send prefix<br>set-option -g prefix C-a<br>unbind-key C-a<br>bind-key C-a send-prefix<br># Use Alt-arrow keys to switch panes<br>bind -n M-Left select-pane -L<br>bind -n M-Right select-pane -R<br>bind -n M-Up select-pane -U<br>bind -n M-Down select-pane -D<br># Shift arrow to switch windows<br>bind -n S-Left previous-window<br>bind -n S-Right next-window<br># Mouse mode<br>set -g mouse on<br><br># Set easier window split keys<br>bind-key v split-window -h<br>bind-key h split-window -v<br># Easy config reload<br>bind-key r source-file ~&#x2F;.tmux.conf \; display-message &quot;tmux.conf reloaded&quot;<br></code></pre></td></tr></table></figure></li><li>[geant4]</li><li>ssh <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;alias sshribll=&quot;ssh -Y -p 2727 wuchenguang@162.105.151.64&quot;&#x27;</span> &gt;&gt; ~/.zshrc<br></code></pre></td></tr></table></figure></li><li>xquartz<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew cask install xquartz<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 删除某个名字的进程</title>
      <link href="2019/09/19/Linux-%E5%88%A0%E9%99%A4%E6%9F%90%E4%B8%AA%E5%90%8D%E5%AD%97%E7%9A%84%E8%BF%9B%E7%A8%8B/"/>
      <url>2019/09/19/Linux-%E5%88%A0%E9%99%A4%E6%9F%90%E4%B8%AA%E5%90%8D%E5%AD%97%E7%9A%84%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>linux kill 掉所有匹配到名字的进程<br>如，要 kill 掉 swoole 相关的进程<br>ps aux | grep swoole |  awk ‘{print $2}’ | xargs kill -9<br>ps 列出所有进程，<br>参数：<br>a - 显示现行终端机下的所有进程，包括其他用户的进程；<br>u - 以用户为主的进程状态 ；<br>x - 通常与 a 这个参数一起使用，可列出较完整信息。<br>grep 过滤掉不包含 “swoole” 的行<br>awk ‘{print $2}’    获取进程 ID (PID， Process Identification)，我们想 kill 掉某一个进程的时候需要通过 PID 指定特定进程<br>xargs  将标准输入数据转换成命令行参数，xargs能够处理管道或者stdin并将其转换成特定命令的命令参数。<br>也就是将管道传递过来的每一个 PID 作为 kill -9 的参数</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git ssh中转设置 / git push多个终端</title>
      <link href="2019/09/13/git-ssh%E4%B8%AD%E8%BD%AC%E8%AE%BE%E7%BD%AE-git-push%E5%A4%9A%E4%B8%AA%E7%BB%88%E7%AB%AF/"/>
      <url>2019/09/13/git-ssh%E4%B8%AD%E8%BD%AC%E8%AE%BE%E7%BD%AE-git-push%E5%A4%9A%E4%B8%AA%E7%BB%88%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<p>实验室服务器尽管已经设置代理上网，但是访问git的时候，只能通过http clone项目，因而不满于实际开发需求。因而需要换种方式实现。<br>上网搜索，发现大多数方案要求借助于代理服务。在非管理员条件下想要实现代理服务并不容易，而且系统已经内置了代理，两者也容易发生冲突。<br>借助先前git内网服务搭建的经验，采用中转的方式来实现。</p><h3 id="在server端初始化git仓库"><a href="#在server端初始化git仓库" class="headerlink" title="在server端初始化git仓库"></a>在server端初始化git仓库</h3><ul><li><p>project: testcode</p></li><li><p>path: /data/d2/RIBLL2017NaMgAlSi/gitbackup</p></li><li><p>code: <code>git init --bare testcode</code></p><ul><li> 这一步会自动在gitbackup目录下创建testcode目录</li></ul></li><li><p>edit: 在testcode目录下创建<code>.gitignore</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Prerequisites</span><br>*.d<br><span class="hljs-comment"># Compiled Object files</span><br>*.slo<br>*.lo<br>*.o<br>*.obj<br><span class="hljs-comment"># Precompiled Headers</span><br>*.gch<br>*.pch<br><span class="hljs-comment"># Compiled Dynamic libraries</span><br>*.so<br>*.dylib<br>*.dll<br><span class="hljs-comment"># Fortran module files</span><br>*.mod<br>*.smod<br><span class="hljs-comment"># Compiled Static libraries</span><br>*.lai<br>*.la<br>*.a<br>*.lib<br><span class="hljs-comment"># Executables</span><br>*.exe<br>*.out<br>*.app<br><span class="hljs-comment"># root file</span><br>*.root<br></code></pre></td></tr></table></figure><h3 id="在server端自己的工作目录下clone-testcode项目"><a href="#在server端自己的工作目录下clone-testcode项目" class="headerlink" title="在server端自己的工作目录下clone testcode项目"></a>在server端自己的工作目录下clone testcode项目</h3></li><li><p>code: <code>git clone /data/d2/RIBLL2017NaMgAlSi/gitbackup/testcode</code></p></li><li><p>随后即可进入testcode工作目录创建自己的项目文件。正常add，commit和push</p><h3 id="在个人电脑端clone-testcode项目"><a href="#在个人电脑端clone-testcode项目" class="headerlink" title="在个人电脑端clone testcode项目"></a>在个人电脑端clone testcode项目</h3></li><li><p>code: <code>git clone ssh://wuchenguang@*:2727//data/d2/RIBLL2017NaMgAlSi/gitbackup/testcode</code></p><h3 id="在个人电脑端配置"><a href="#在个人电脑端配置" class="headerlink" title="在个人电脑端配置"></a>在个人电脑端配置</h3></li><li><p>push到github(执行一次) <code>git remote set-url --add --push origin git@github.com:mission-young/testcode.git</code></p></li><li><p>push到server(执行一次) <code>git remote set-url --add --push origin ssh://wuchenguang@*:2727//data/d2/RIBLL2017NaMgAlSi/gitbackup/testcode</code></p></li><li><p>同步push(需要时执行) <code>git push</code></p></li></ul><h3 id="bashrc-设置备份"><a href="#bashrc-设置备份" class="headerlink" title=".bashrc 设置备份"></a>.bashrc 设置备份</h3><ul><li>server<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># git --init bare project</span><br><span class="hljs-built_in">export</span> gitserver=/data/d2/RIBLL2017NaMgAlSi/gitbackup<br><span class="hljs-comment"># eg. git clone $gitpath/code 用于clone server项目</span><br></code></pre></td></tr></table></figure></li><li>pc<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> gitserver=/data/d2/RIBLL2017NaMgAlSi/gitbackup<br><span class="hljs-built_in">export</span> gitpath=<span class="hljs-string">&quot;ssh://wuchenguang@*:2727/<span class="hljs-variable">$gitserver</span>&quot;</span><br><span class="hljs-comment"># eg. git clone $gitpath/code 用于clone server项目</span><br><span class="hljs-built_in">export</span> pushgithub=<span class="hljs-string">&quot;remote set-url --add --push origin git@github.com:mission-young&quot;</span><br><span class="hljs-comment"># eg. git $pushgithub/code 用于设置push到github</span><br><span class="hljs-built_in">export</span> pushserver=<span class="hljs-string">&quot;remote set-url --add --push origin ssh://wuchenguang@*:2727/<span class="hljs-variable">$gitserver</span>&quot;</span><br><span class="hljs-comment"># eg. git $pushserver/code 用于设置push到server</span><br><span class="hljs-comment"># 搞定上面几步之后，git push 可以同时上传到github与server</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> git </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>viscose setting sync</title>
      <link href="2019/09/11/viscose-setting-sync/"/>
      <url>2019/09/11/viscose-setting-sync/</url>
      
        <content type="html"><![CDATA[<p>Github Gist ID:1106f6e427b773a650cb0b038bdd2948。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>64服务器端口开放状态</title>
      <link href="2019/09/01/64%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%8F%A3%E5%BC%80%E6%94%BE%E7%8A%B6%E6%80%81/"/>
      <url>2019/09/01/64%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%8F%A3%E5%BC%80%E6%94%BE%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<ul><li>服务器ip：162.105.151.64</li><li>开放端口8900：jupyter-notebook服务</li><li>开放端口8901：code-server服务</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>公务员备考攻略</title>
      <link href="2019/09/01/%E5%85%AC%E5%8A%A1%E5%91%98%E5%A4%87%E8%80%83%E6%94%BB%E7%95%A5/"/>
      <url>2019/09/01/%E5%85%AC%E5%8A%A1%E5%91%98%E5%A4%87%E8%80%83%E6%94%BB%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="2020年公务员考试相关信息整理"><a href="#2020年公务员考试相关信息整理" class="headerlink" title="2020年公务员考试相关信息整理"></a>2020年公务员考试相关信息整理</h2><ul><li>华图官网：<a href="http://www.huatu.com/guojia/">http://www.huatu.com/guojia/</a><br><img src="https://i.loli.net/2019/09/02/yX8lrKNdh7pkWbx.png"></li><li>照9月1号开始复习，12月1号考试，笔试历程整3个月，90天。</li><li>2020国家公务员考试职位表尚未发布，根据往年国考职位表发布时间推算，2020国家公务员考试职位表发布时间很可能在2019年10月中下旬。2019国家公务员考试招录规模今年进行了缩减，共有中央机关75个单位和20个直属机构参加，计划招录14537人,共9657个职位。</li><li>公告发布时即发布职位表，随后根据职位表选报。根据学历要求、专业要求、政治面貌要求、工作经历要求、地域特征等，进行选择。</li><li>笔试分为两大块：行测和申论，行测包括十个部分，130道题，120分钟，分别为<br> 1. 数量关系–数学运算<br> 2. 言语理解与表达–逻辑填空<br> 3. 言语理解与表达–语句表达<br> 4. 言语理解与表达–阅读理解<br> 5. 判断推理–逻辑判断<br> 6. 判断推理–图形推理<br> 7. 判断推理–定义判断<br> 8. 判断推理–类比推理<br> 9. 资料分析<br> 10. 常识判断</li></ul><p>国家公务员考试行测考试时间只有两个小时。<br>但是要完成5个专项130-135道题，根据了解，大部分考生做行测卷子后期都会碰到一个问题，时间不够，合理的时间安排可以说直接决定了行测能否拿高分。<br>在行测考试中共有5个专项9种题型（常识判断、图形推理、类比推理、定义判断、逻辑判断、逻辑填空、片段阅读、数量关系、资料分析）。<br>在这9种题型中有些题是需要快做的，包括常识判断，图形推理，类比推理，逻辑填空，常识判断20题，用时应控制在10分钟左右，平均30秒一道题左右，常识题不要去纠结，能做出来的很快就能做出来。<br>拓展资料：完善行测答题顺序，可提高效率<br>考前一个月左右的时候建议考生开始刷试卷，一来为了查缺补漏，二来就是找到最适合自己的做题顺序。<br>行测不仅考察的是你的解题能力，还考察考生两个小时的思维转换能力。每个考生的性格都不一样，有些考生适合从理性的思维跳到感性的思维，有些考生喜欢先做自己擅长的专项，有些考生需要一点时间才能进入做题状态等等，所以找到适合自己的做题顺序对行测作答可以起到事半功倍的效果。<br>先做常识进入考试状态，再做言语，接下来状态最好的时候做资料分析，趁热打铁完成判断推理，最后再做数量关系，做题顺序没有好坏之说，适合自己的就是最好的。<br>  申论只有一道大题，分为两大类题型，对策类和启示类。考试时间180分钟，总分100分。  </p><h2 id="时间分配"><a href="#时间分配" class="headerlink" title="时间分配"></a>时间分配</h2><p>  </p><ul><li><p>全面基础复习阶段 6周 手部受伤，前2周重点复习行测。根据书目录统计，<br> 1. 数量关系–数学运算 10节<br> 2. 言语理解与表达–逻辑填空 2节<br> 3. 言语理解与表达–语句表达 2节<br> 4. 言语理解与表达–阅读理解 6节<br> 5. 判断推理–逻辑判断 6节<br> 6. 判断推理–图形推理 7节<br> 7. 判断推理–定义判断 2节<br> 8. 判断推理–类比推理 4节<br> 9. 资料分析 3节<br> 10. 常识判断 12节</p><p> 课程总共有54节，2周时间为15天，需要一天完成4节内容。考虑到手的恢复情况，应将数量关系、判断推理–逻辑判断、资料分析三者往后放一点。剩下的部分大多需要在脑海中思考即可完成。因而复习顺序为：<br> 1. 2+3<br> 2. 4<br> 3. 4+7<br> 4. 6<br> 5. 6<br> 6. 8<br> 9. 10<br> 10. 10<br> 11. 10<br> 12. 1<br> 常识判断每天空闲的时候看一点。每天完成学习任务之后，查看app，进行做题。或者在路上的闲余时间进行做题。<br> 额外的时间听申论讲座。 </p></li><li><p>重点提高阶段 3周</p></li><li><p>纠错阶段 1周</p></li><li><p>冲刺阶段 2周</p></li></ul><h2 id="贴吧攻略"><a href="#贴吧攻略" class="headerlink" title="贴吧攻略"></a>贴吧攻略</h2><p>各模块的备考方法 <a href="https://tieba.baidu.com/p/5995995816?pn=1">https://tieba.baidu.com/p/5995995816?pn=1</a></p><h2 id="知乎收集的一些攻略"><a href="#知乎收集的一些攻略" class="headerlink" title="知乎收集的一些攻略"></a>知乎收集的一些攻略</h2><p>链接：<a href="https://www.zhihu.com/question/28345057/answer/41074035">https://www.zhihu.com/question/28345057/answer/41074035</a><br>我的计划就是按照3个月12周的时间来指定的。一共有四轮，<br>第一轮时长6周，全面基础复习阶段；每天上午行测，下午申论，晚上做题；复习时候我的方法主要是视频教程，这些教程都是在网盘上面免费分享的，我直接下载下来，每天看视频学习，做笔记。老老实实把行测和申论的基础班课程都学习了一遍，辅以少量的练习题，目的是全面的了解公考的知识点，做好笔记，并尽可能的掌握。其中申论是听张小龙的课程，行测数量关系部分是魏华刚和郭亮的课，这三位老师是讲课比较有风格和方法的，推荐一下。<br>第二轮时长3周，重点提高阶段，提升我第一轮复习中比较薄弱的地方；重点提升部分是通过第一轮学习过程中总结出来的，这一阶段主要学习方法是听视频+做题相结合，视频的话也是重点提高班或者高分班视频，相比来说课时短了不少，做题量增加，把重要的知识点认真学习一遍，掌握做题技巧与方法，并通过一定量的习题训练巩固。<br>第三轮时长1周，纠错阶段，我有一个错题本，在头两轮复习过程中做错的和不会的典型例题我都记录了下来，错题后面对应的都是考点，因此通过错题纠正以及练习同类题目的办法，把薄弱的考点彻底掌握。<br>第四轮时长2周，冲刺阶段，1到2天一套真题掐表训练。这个基本就是1天按照考试时间掐表做真题，然后晚上纠错，直到考前。 </p><p>链接：<a href="https://www.zhihu.com/question/28345057/answer/267088186">https://www.zhihu.com/question/28345057/answer/267088186</a><br>我认为行测复习只分三个阶段。新人先学习一下整个行测模块，有哪些题型。(看书只需要2-3天)然后开始做题，计时110分钟做一套真题，你就知道自己的初始水平。有复习经验的可以跳过这步。<br>(有人问我就说一下我的做题顺序和时间安排:常识5min，言语30min以内，资料30min，判断30-35，答题卡+检查核对8min，数量放在填完答题卡后，有多少时间做多少。都是大概值。)<br>一阶段:言语、资料、判断正确率很低，离80%很远。这个阶段我建议就不用想别的了，除了找视频和资料拉通复习一下行测各模块并且做好笔记以外，刷题请着用粉笔app练重刷这三大块+间或做一下整套款。然后日常看人民日报+常识积累，每天15分钟就可以。<br>二阶段:言语、资料、判断正确率基本达到80%。恭喜，一般达到这个水平，一个套卷就基本可以得70分左右了。这个阶段视频只是补充，需要每天大量刷题来强化，让自己的分数从险险上70到稳稳上70。(粉笔模考+自己套卷建议比较能够判断水平)<br>三阶段:捡起数量和常识，继续刷题强化三大块。在70分甚至75以上，如果抓不到数量和常识，你会发现分已经很难提升了。三大块的学习也会在这个时候遇到瓶颈。这个阶段，三大块依然是不能放的，一是三天不练手生，二是不仅资料比较容易提升到90-100，言语和判断也有提升空间。但是可以考虑少做点三大块，多学习一下数量关系，做一做常识积累。数量开始提升得比较慢，不着急，每天30+数量坚持不到一月就可以看出来成效，常识积累我其实从一开始复习就开始积累了(算一阶段就做了准备的)，很简单，每天粉笔刷一组常识专项，每次模考都做一个常识错题积累，每天听一个粉笔常识音频。我以前常识全靠乱蒙，后来常识也是乱蒙居多，但是正确率就很稳定了，大概60-70%是正常正确率。(常识比较玄学，数量关系的提升会比较看得见。)<br>我这样规划着的走，最后考前的模考就发挥稳定，也有了比较满意的分数。</p><hr><p>二、国考要考多少分才能进入面试？整体如何规划？<br>国考一般职位在130分（副省级行测要过线60分、地市级一般55分）就可以进入面试，而要做到考130分，那么暂定一个目标就是行测要考70分，申论要考70分。行测通过备考学习训练，一般人情况下考65分是没有太大问题，申论的话70分也是挺好争取的。具体，行测的常识20个题目要做对13道，言语理解40个题要做对32个，数量关系15个题要做对7个题目，蒙剩下8个题（俗称做7蒙8），逻辑判断40个题目做对32个题目，资料分析20个题目争取全部都对。申论，前面4个题目争取拿到80%的分数即48分，后面大作文一般争取在二类文即20-25分。把这样的目标定好之后，接下来就是分模块进行各个突破。<br>如果将学习分为四个阶段：<br>第一个阶段就是掌握基础的知识，对每个知识点和考前进行全面覆盖的复习，掌握每种题型的解题技巧。这个阶段就是对公务员考试的基础常考的题型进行全面的复习和掌握，为后期提高做题速度夯实基础。很多人都说要提高做题速度，但是如何提高做题速度，很多人说要大量做题。但是，我想说，大量做题是无效的，大量做题的前提是你打下了很好的基础，大量做题才有意义，如果你只是为了做题而做题，那么做再多的题目也是没有作用的。而如果把基础打扎实的，看到题目能立马辨识出是哪种类型的题目，这种类型的题目该用什么方法和技巧能立刻自动反应，你在刷题的时候能带动训练和应用做题技巧和方法，以及基础知识点的回顾，这个时候做题才成体现出意义和价值，如此反复训练，上了考场自然能够秒杀，自然能够提高做题速度，而正确率又不会因为你的速度受到影响。把做题能力变成一种本能的反应，在考场上这才是真正意义上的凭借“感觉”做题。<br>第二个阶段，进行模块练习，这是对第一个阶段的查缺补漏，同时也是对自身有个客观了解的阶段，更加清楚了解自己的长短处，之所以要了解自己的长短处，是因为：第一，对于自己优势的模块要牢牢把握不能丢分数，另外还要加强这个模块的练习，压缩时间给短处的模块。第二，对于自己真心不会的题型能够在考场上面马上识别出来，然后一看到这种题型，直接跳过。很多人都在经验贴中提出要放弃，但是并没有人告诉你们要如何放弃，必须经历这个过程，你才知道怎样放弃，如果你没有掌握这个技能，往往在考场上你花了一分钟才发现这是你不会的题目，那么这个时候你再放弃已然没有任何的意义。第三，对整个考试才会有一个整体的格局感，那些真正裸考的人是不可能做到有格局感的，而裸考真正能上岸的一万个里面很难找到一个，格局感让你能对整个考试有个全局的掌控，如果考场上突然哪个模块出题非常难了，你可以进行全局的调整，就像我考这次，言语理解阅读量增加了（从2017年起国考增加了篇章阅读），那些没有格局感的人做了一个小时的言语理解，那么整个做题的计划就完全乱了。那些说裸考上岸的，请万万不要相信他们的谎言，他们不过是为了证明自己很厉害，装作没有努力，靠天资聪颖就考上了，其实都是谎言！<br>第三个阶段，开始整套题的进行训练。各个模块研究透了之后就是将这些模块组合起来，找到整体的感觉以及各个模块的做题顺序。对近5年的真题反复做5遍以上。每次做题的方法和顺序都可以有所调整，不断尝试，直到找到最适合自己的方法和技巧。这个阶段你会明显感觉到自己有质的飞跃，而前提是前面两个阶段都打好基础了。对套题进行训练的时候，要开始严格把控时间，提高做题速度，这个阶段求速度才显得有意义，也才有现实的可能性。刚开始可能速度提起来有点困难，自己会有几天不太适应，但是习惯了就好了。这个阶段自己会有一些窃喜。<br>第四个阶段，做全真的模拟训练。这个阶段是根据市面上的一些模拟试卷，进行找做题的感觉，因为真题做过几次之后会很有熟悉感，所以在考前2周可以做一些模拟题，第一，这为了上考场的时候不会因为一看题目好陌生而慌乱阵脚，第二，有些热门的预测具有一定的参考性，尤其是常识的预测和申论热点的预测，有时候是可以贴近的，特别是大作文，通过预测卷去着重背诵一些热点话题的素材是很有必要的。<br>具体的每个阶段的学习任务和时间的安排因人而异，在此，我以今天写此文的时间来做一个简单的规划，供大家参考和借鉴。第一个阶段，8月初到9月中旬，为期40天；第二个阶段，9月中旬到10月中旬，为期30天；第三个阶段，10月中旬到11月中旬，为期30天；第四个阶段，11月中旬到考试（预测11月25号，2018年是12月10日考试），为期15天。各个阶段的任务安排大家可以根据自己的情况来设定，但是大部分该复习的知识点我想还是必须要复习的。如果大家希望我在这方面多提供一些建议的话，那么可以在告诉我，点点赞同，或者在评论区里表达下需求，如果确实很多人都需要的话，那么我后期抽空对这方面的进行全面的扩充。</p><p>一、复习阶段<br>笔试根据复习内容和复习进度可分为以下几个部分：模块复习阶段、刷题练习阶段、反复巩固阶段、总结提升阶段。<br>行测可分为常识、言语、数量、逻辑、资料等模块，申论可分为单层次题目、多层次题目、多层次格式题目、大作文等模块。我们复习的方法主要是观看模块视频、练习真题、总结错题等方法，我们所谓的复习阶段就是指针对上述模块，侧重于某一种复习方法的一个阶段。特别注意，第一节仅将宏观复习思路，行测与申论的具体复习方法见第二节、第三节。复习阶段具体操作方法如下：<br>模块复习阶段：根据模拟的二至三套真题，找到自己的薄弱模块，查找专门的教学视频，进行有针对性的学习，夯实基础知识。与此同时，穿插做套题真题。对于行测，可以一周做一套真题，剩余的时间全部用来看模块教学视频。对于申论，可以一周做两道小题，剩余时间看模块教学视频。所以，模块复习阶段并不是只看模块视频，而是绝大多数时间看模块视频，同时辅以模拟练习。<br>刷题练习阶段：在夯实基础之后，我们需要练习来巩固基础知识。对于行测，刷题的原则是多而深，即尽量做更多的真题，同时将每一道题背后所蕴含的知识点挖掘清楚，目标是熟悉基础知识在所有变化下的使用技巧；对于申论，刷题的原则是少而精，即不必追求过多的题目，做一道就要将材料中所有句子的层次琢磨透彻，题目要求把握清楚，目标是在未来遇到相同或者类似的题目时，能够分析全面。当然，这个阶段绝大多数时间以真题练习为主，在遇到个别记不清楚的基础知识，翻看基础视频。<br>反复巩固阶段：这个阶段实际上是二刷甚至三刷基础视频。在一定量的基础训练之后，往往对于自己的实力有了清楚的判断，能够知道较为薄弱的环节，这时需要有针对性的再看一遍视频，查缺补漏。特别注意，这遍视频切不可跳看，要一点点细细琢磨，一方面，是为了学习薄弱的环节；另一方面，是为了查看是否有遗漏的知识要点。你会发现，每看一遍视频，都会有崭新的收获。这里我分享一个小故事，有的同学看我出品录制的视频时有一个疑问“夕川师傅，为何你的视频2倍速度播放时，声音与画面不同步？”我在遇到这个问题时，头脑里出现了黑人问号图片，我要求的是大家一个视频看两遍，不是两倍速度看一遍！<br>总结提升阶段：这是复习的最后一个阶段，经过了前面的复习，大伙有了一定的基础，也记了各种各样的笔记。在此，你需要抛开以往的笔记，采用回忆的方式，将所有模块的知识点从头到尾认真串联，形成做题的思维逻辑导图，将老师的思路幻化为自己的做题步骤。同时，可以翻开以往做过的卷子，用新的思维逻辑再做一次。经历了这一步，大家的复习才是完整的。<br>夕川也是用上面的四个阶段复习的，现在原原本本的教给大家。下面解决另一个问题，每个步骤用多长时间！<br>二、时间安排<br>有的小伙伴总会问：“我还有四个月考试，现在学是不是太早了？”我真的想和这样的小伙伴说，四个月已经有些不够了，还是早点复习吧。当然，可能有的小伙伴在剩余两个月或者一个月时才看到这篇文章。所以，我下面将分别说一下长期复习与短期复习两种情况下，如何安排四个阶段的复习时间。<br>如果时间大于4个月（大于120天），可完整的按照四个阶段来复习。第一阶段时间为40天，第二阶段时间为60天，第三阶段时间为10天，第四阶段为10天。如果时间更长，则可以将第一阶段延长至50天，第三阶段延长至20天，第四阶段延长至15天，剩余全部时间放在第二阶段的复习中。<br>如果时间为3个月左右（60天至120天），则可按照3:5:1:1的时间来分割。例如100天，则第一阶段为30天，第二阶段为50天，第三阶段为10天，第四阶段为10天。<br>如果时间少于两个月（小于60天），则只能完成第一阶段、第二阶段和第四阶段，时间比例为3:6:1。例如有60天，则第一阶段为18天，第二阶段为36天，第三阶段为6天。<br>小伙伴们能够对照自己的时间按照上面的比例合理安排复习。<br>四、复习资料<br>大家可以准备三类材料，包括各个模块的视频讲解、考试真题、机构参考答案。<br>各模块的推荐视频在第二节及第三节中会详细给出。这里我说一下选择基础知识讲解资料的基本原则。原则一，视频必须应试。咱们要面对的是考试，不是去研究行测或者申论，因此资料必须简短精炼，直戳考试要点。所以咱们不要选择某图某公某笔的教材，这种教材的确有一些知识点是有用的，但是有过多冗杂的信息，往往看过一遍之后无法提取有用的信息，只会白白浪费时间。原则二，关注老师信息。现在有太多的机构，选择一些假老师讲课，假的是这些老师自己都没有参加过公务员考试，没有上岸，仅仅是学过一段时间公考，就给大伙讲课。这些老师讲解的出发点是让人信服，有理有据，他们的思维是从分析答案出发。但是同学们考试是不知道正确答案的，一定要从题干出发。所以，假老师是逆向思路，同学考试是正向思路，出发点存在着巨大的差别，其结果就是所学的知识无法应用于考试之中。原则三，务必试听。大家学任何课程都要有自己的判断，切勿盲目学习。可以试听公开课或者小班课，如果觉得好，那我们就要反复多遍学习！<br>对于考试真题，我建议购买某公、某图的纸质版真题套卷，关键点是“纸质”、“真题”、“套卷”。大家切勿在某笔APP上面刷专项，首先是因为电子版与纸质版差距过大，做题习惯也完全不相同，练久了会影响考试感觉。其次是因为专项模块往往汇集了不同省份的真题，每个省的卷子题目思路、难度、时间、长短皆不相同，将这些乱七八糟的题目凑到一起没有意义，且考试是各个模块的有机统一，模块无法模拟整套卷子之间思路的转换和时间的控制，还有试想一下以后抓套卷偶尔遇到刷过的题目，是一件多么恶心的事情。<br>最后，大伙要多准备几个机构的答案。主要包含某公、某图的纸质答案和某笔的电子版答案。对于行测，是查看不同机构的解释；对于申论，是查看不同机构答案查找要点的不同，查缺补漏。<br>五、行测与申论的平衡<br>复习公务员考试，行测与申论必须齐头并进。失行测者失公考，得申论者得公考。不管你认同不认同，行测是公考的基础，但是行测无法让你与对手甩开差距。而申论则不同，所有上岸的考生大多都是申论分高。这不是因为申论难学，而是很多人忽视申论。你付出3个月时间冲击行测，未必能提高5分，但是申论却能提高15分。所以，多宠幸一下申论吧。<br>综合申论与行测，所有模块的学习效果和性价比如下：申论小题＞行测逻辑＞行测资料＞申论大作文总分论点＞行测言语＞行测数量＞行测常识。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>和小宇要说的话</title>
      <link href="2019/08/31/%E5%92%8C%E5%B0%8F%E5%AE%87%E8%A6%81%E8%AF%B4%E7%9A%84%E8%AF%9D/"/>
      <url>2019/08/31/%E5%92%8C%E5%B0%8F%E5%AE%87%E8%A6%81%E8%AF%B4%E7%9A%84%E8%AF%9D/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="f5a7f49e600bd2a0d5dabcd8b156803ccb30509c5312017a151f6731a213f40a"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 私密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反思 </tag>
            
            <tag> 总结 </tag>
            
            <tag> 感情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>家规</title>
      <link href="2019/08/31/%E5%AE%B6%E8%A7%84/"/>
      <url>2019/08/31/%E5%AE%B6%E8%A7%84/</url>
      
        <content type="html"><![CDATA[<p>古语有云：国有国法、家有家规。没有规矩、不成方圆。<br>兹武晨光、刘明宇、武气气(小名)及后续家庭成员于2019年7月17日在浙江省杭州市西湖区莲花街道荷花苑29楼501订下家规如下：</p><ol><li>工作/学习需端坐在书桌/课桌前，不允许在床上工作/学习。临时工作/学习应限于10分钟之内。</li><li>吃饭的时候不允许玩手机。临时紧急工作消息或电话应在10分钟内处理完毕。</li><li>条件允许的情况下，必须前往餐桌就餐。</li><li>原则上不允许浪费，但应在肠胃允许条件下。</li><li>情绪低落时亦应准时准量吃饭。零食不计入吃饭范畴。</li><li>吃完饭收拾并清洗自己餐具。鉴于刘明宇皮肤较为敏感，不列入清洗餐具人员名单。</li><li>交流沟通时不允许无视对方，不允许用“嗯”，“哦”，“好的”，“等会儿”之类的回应。确实有事在忙的话，应说明多久之后回应。</li><li>空调温度应设定在26℃以上。<br>以上条款及未来附加或修正条款即可生效。</li></ol><p>2019/7/17<br>武晨光、刘明宇<br>9.    双方玩游戏时，若有一方要求停止，需立即停止。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>root --notebook方式启动时加载配置文件</title>
      <link href="2019/08/31/root-notebook%E6%96%B9%E5%BC%8F%E5%90%AF%E5%8A%A8%E6%97%B6%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>2019/08/31/root-notebook%E6%96%B9%E5%BC%8F%E5%90%AF%E5%8A%A8%E6%97%B6%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>jupyter-notebook方式启动notebook时，会调用<code>~/.jupyter/jupyter_notebook_config.py</code>. 但通过<code>root --notebook</code>启动notebook时，则不会自动找到该路径。需要把配置文件拷到当前目录，随后执行<code>root --notebook</code>命令。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> jupyter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh端口转发/隧道代理</title>
      <link href="2019/08/18/ssh%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91-%E9%9A%A7%E9%81%93%E4%BB%A3%E7%90%86/"/>
      <url>2019/08/18/ssh%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91-%E9%9A%A7%E9%81%93%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="ssh-端口转发-隧道代理"><a href="#ssh-端口转发-隧道代理" class="headerlink" title="ssh 端口转发/隧道代理"></a>ssh 端口转发/隧道代理</h2><p>隧道是一种把一种网络协议封装进另外一种网络协议进行传输的技术。这里我们研究ssh隧道，所以所有的网络通讯都是加密的。又被称作端口转发，因为ssh隧道通常会绑定一个本地端口，所有发向这个端口端口的数据包，都会被加密并透明地传输到远端系统。</p><h3 id="SSH隧道的类型"><a href="#SSH隧道的类型" class="headerlink" title="SSH隧道的类型"></a>SSH隧道的类型</h3><h4 id="ssh隧道有3种类型："><a href="#ssh隧道有3种类型：" class="headerlink" title="ssh隧道有3种类型："></a>ssh隧道有3种类型：</h4><ul><li>动态端口转发（Socks 代理）</li><li>本地端口转发</li><li>远端端口转发</li><li>动态端口转发<br>动态端口允许通过配置一个本地端口，把通过隧道到数据转发到远端的所有地址。本地的应用程序需要使用Socks协议与本地端口通讯。此时SSH充当Socks代理服务器的角色。<h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><code>ssh -D [bind_address:]port</code><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4></li><li>bind_address 指定绑定的IP地址，默认情况会绑定在本地的回环地址（即127.0.0.1），如果空值或者为*会绑定本地所有的IP地址，如果希望绑定的端口仅供本机使用，可以指定为localhost。<br>port 指定本地绑定的端口 <h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4>假设X网络（192.168.18.0/24）有主机A（192.168.18.100）,Y网络（192.168.2.0/24）有主机B（192.168.2.100）和主机C（192.168.2.101），已知主机A可以连接主机B，但无法连接主机C。 在主机A执行<br><code>ssh -D localhost:8080 root@192.168.2.100</code><br>然后主机A上的应用程序就可以通过<br><code>SOCKS5 localhost:8080</code><br>访问主机C上的服务。<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4>配置一个代理服务就可以访问远端机器和与其所在子网络的所有服务 <h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4>应用程序需要额外配置SOCKS代理，若应用程序不支持代理配置则无法使用<h3 id="本地端口转发"><a href="#本地端口转发" class="headerlink" title="本地端口转发"></a>本地端口转发</h3>通过SSH隧道，将一个远端机器能够访问到的地址和端口，映射为一个本地的端口。<br>命令格式<br><code>ssh -L [bind_address:]port:host:hostport </code><h4 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h4></li><li>bind_address 指定绑定的IP地址，默认情况会绑定在本地的回环地址（即127.0.0.1），如果空值或者为*会绑定本地所有的IP地址，如果希望绑定的端口仅供本机使用，可以指定为localhost。 </li><li>port 指定本地绑定的端口 </li><li>host 指定数据包转发目标地址的IP，如果目标主机和ssh server是同一台主机时该参数指定为localhost </li><li>host_port 指定数据包转发目标端口 <h4 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h4>假设X网络（192.168.18.0/24）有主机A（192.168.18.100）,Y网络（192.168.2.0/24）有主机B（192.168.2.100）和主机C（192.168.2.101），已知主机A可以连接主机B，但无法连接主机C。A主机需要访问C主机的VNC服务（5900端口）<br>在A主机上建立本地转发端口5901<br><code>ssh -L 5901:192.168.2.101:5900 root@192.168.2.100 </code><br>然后本地vnc客户端通过5901端口打开c主机的vnc服务<br><code>open vnc://localhost:5901</code><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4>无需设置代理<h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4>每个服务都需要配置不同的端口转发<h3 id="远端端口转发"><a href="#远端端口转发" class="headerlink" title="远端端口转发"></a>远端端口转发</h3>远程端口转发用于某些单向阻隔的内网环境，比如说NAT，网络防火墙。在NAT设备之后的内网主机可以直接访问公网主机，但外网主机却无法访问内网主机的服务。如果内网主机向外网主机建立一个远程转发端口，就可以让外网主机通过该端口访问该内网主机的服务。可以把这个内网主机理解为“内应”和“开门者”。<h4 id="命令格式-1"><a href="#命令格式-1" class="headerlink" title="命令格式"></a>命令格式</h4><code>ssh -R [bind_address:]port:host:hostport</code><h4 id="参数说明-2"><a href="#参数说明-2" class="headerlink" title="参数说明"></a>参数说明</h4></li><li>bind_address 指定绑定的IP地址，默认情况会绑定在本地的回环地址（即127.0.0.1），如果空值或者为*会绑定本地所有的IP地址，如果希望绑定的端口仅供本机使用，可以指定为localhost。 </li><li>port 指定本地绑定的端口 </li><li>host 指定数据包转发源地址的IP，如果源主机和ssh server是同一台主机时该参数指定为localhost </li><li>host_port 指定数据包转发源端口<h4 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h4>假设X网络（192.168.18.0/24）有主机A（192.168.18.100）,Y网络（192.168.2.0/24）有主机B（192.168.2.100）和主机C（192.168.2.101），已知主机A可以通过SSH访问登录B主机，但反向直接连接被禁止，主机B和主机C可以相互访问。若主机C想访问主机A的VNC服务（5900端口）。<br><code>ssh -R 5900:192.168.2.100:5901 root@192.168.2.100</code><br>然后主机C连接主机B的5901端口<br><code>open vnc://192.168.2.100:5901</code><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4>可以穿越防火墙和NAT设备<h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4>每个服务都需要配置不同的端口转发<h3 id="如何禁止端口转发"><a href="#如何禁止端口转发" class="headerlink" title="如何禁止端口转发"></a>如何禁止端口转发</h3>设置ssh服务配置文件<code>/etc/ssh/sshd_config </code><br><code>AllowTcpForwarding no</code><h2 id="ssh-代理访问内网服务器"><a href="#ssh-代理访问内网服务器" class="headerlink" title="ssh 代理访问内网服务器"></a>ssh 代理访问内网服务器</h2>hostA 为本机、hostB 为代理机、hostC为目标机。<br>portA 为本机代理ssh端口、portB为跳板机ssh服务端口、portC为目标机ssh服务端口。<br>userB 为hostB的账户、userC为目标机的账户。</li></ul><ol><li>修改本机(hostA)<code>/etc/ssh/sshd_config</code>文件 <code>AllowTcpForwarding no</code> -&gt; <code>AllowTcpForwarding yes</code>，并重启ssh服务。</li><li>在本机(hostA)执行(一次) <code>ssh -fNg -L [portA]:[hostC]:[portC] -p [portB][userB]@[hostB] </code></li><li>在本机运行<code>ssh -Y -p [portA] userC@localhost</code><br>既可以通过hostA来访问hostC，且支持x11.</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> 端口转发 </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多端编辑Hexo博客</title>
      <link href="2019/08/18/%E5%A4%9A%E7%AB%AF%E7%BC%96%E8%BE%91Hexo%E5%8D%9A%E5%AE%A2/"/>
      <url>2019/08/18/%E5%A4%9A%E7%AB%AF%E7%BC%96%E8%BE%91Hexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/a0824fe2e066">参考博客</a></p><ul><li>克隆Hexo项目<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@github.com:mission-young/Hexo.git<br></code></pre></td></tr></table></figure></li><li>安装hexo<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo -g<br></code></pre></td></tr></table></figure></li><li>安装node模块<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> Hexo<br>npm install<br>npm audit fix<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 多端同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS更改sshd服务器端口</title>
      <link href="2019/08/18/macOS%E6%9B%B4%E6%94%B9sshd%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%8F%A3/"/>
      <url>2019/08/18/macOS%E6%9B%B4%E6%94%B9sshd%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p>macOS ssh server默认端口为22，而学校网络政策一天三变，突然间无法在校外连通ssh。因而需要更改macOS默认端口。<br>macOS更改sshd服务端口的方式不同于linux更改<code>/etc/ssh/sshd_config</code>的方式。需要更改<code>/System/Library/LaunchDaemons/ssh.plist</code>文件。<br>其中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>SockServiceName<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>ssh<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ssh代表的就是默认的22端口，将ssh修改为合适的端口就可以了。<br>比如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>SockServiceName<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>67<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在设置界面重新关闭和开启ssh服务即可。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sshd </tag>
            
            <tag> 配置文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>普通话登记考试相关信息整理</title>
      <link href="2019/08/07/%E6%99%AE%E9%80%9A%E8%AF%9D%E7%99%BB%E8%AE%B0%E8%80%83%E8%AF%95%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E6%95%B4%E7%90%86/"/>
      <url>2019/08/07/%E6%99%AE%E9%80%9A%E8%AF%9D%E7%99%BB%E8%AE%B0%E8%80%83%E8%AF%95%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="http://bjbm.cltt.org/pscweb/index.html">普通话水平测试在线报名系统</a></li><li>报名时间: 九月初，具体日期查看上面官网公布信息</li><li>报名携带材料<ul><li>本人身份证原件</li><li>近期电子版照片<ul><li>390*567像素</li><li>相片文件命名为考生身份证编号</li><li>照片格式jpg或jpeg</li><li>相片背景色为蓝色</li></ul></li></ul></li><li>官方App: 畅言普通话<h2 id="试题组成"><a href="#试题组成" class="headerlink" title="试题组成"></a>试题组成</h2>普通话水平测试试卷由四个测试项构成，总分为100分。</li></ul><ol><li>读单音节字词100个，限时3分30秒，占10分。目的考查应试人普通话声母、韵母和声调的发音。</li><li>读双音节词语50个，限时2分30秒，占20分。目的是除了考查应试人声、韵、调的发音外 ，还要考查上声变调、儿化韵和轻声的读音。</li><li>400字短文朗读，限时4分钟，占30分。目的是考查应试人使用普通话朗读书面材料的能力，重点考查语音、语流音变、语调等。</li><li>说话，时间3分钟，占40分。目的是考查应试人在无文字凭借的情况下说普通话所达到的规范程度。<h3 id="读单音节字词100个"><a href="#读单音节字词100个" class="headerlink" title="读单音节字词100个"></a>读单音节字词100个</h3>排除轻声、儿化音节</li></ol><ul><li>目的：考察应试人声母、韵母、声调的发音。</li><li>要求：100个音节里，每个声母出现一般不少于3次，方言里缺少的或容易混淆的酌量增加1-2次；每个韵母的出现一般不少于2次，方言里缺少的或容易混淆的韵母酌量增加1-2次。字音声母或韵母相同的要隔开排列。不使相邻的音节出现双声或叠韵的情况。<br>评分：此项成绩占总分的10%，即10分。读错一个字的声母、韵母或声调扣0.1分。读音有缺陷每个字扣0.05分。一个字允许读两遍，即应试人发觉第一次读音有口误时可以改读，按第二次读音评判。</li><li>限时：3分钟。超时扣分（3-4分钟扣0.5分，4分钟以上扣0.8分）。<br>&emsp;&emsp;读音有缺陷指读1单音节字词和2读双音节词语两项记评。读音有缺陷在1项内主要是指声母的发音部位不准确，但还不是把普通话里的某一类声母读成另一类声母，比如舌面前音j、q、x读得太接近z、c、s；或者是把普通话里的某一类声母的正确发音部位用较接近的部位代替，比如把舌面前音j、q、x读成舌叶音；或者读翘舌音声母时舌尖接触或接近上腭的位置过于靠后或靠前，但还没有完全错读为舌尖前音等；韵母读音的缺陷多表现为合口呼、撮口呼的韵母圆唇度明显不够，语感差；或者开口呼的韵母开口度明显不够，听感性质明显不符；或者复韵母舌位动程明显不够等；声调调形、调势基本正确，但调值明显偏低或偏高，特别是四声的相对高点或低点明显不一致的，判为声调读音缺陷；这类缺陷一般是成系统的，每个声调按5个单音错误扣分。1和2两项里都有同样问题的，两项分别都扣分。<h3 id="读双音节词语50个"><a href="#读双音节词语50个" class="headerlink" title="读双音节词语50个"></a>读双音节词语50个</h3></li><li>目的：除考察应试人声母、韵母和声调的发音外，还要考察上声变调、儿化韵和轻声的读音。</li><li>要求：50个双音节可视为100个单音节，声母、韵母的出现次数大体与单音节字词相同。此外，上声和上声相连的词语不少于2次，上声和其他声调相连不少于4次；轻声不少于3次；儿化韵不少于4次（arurierüer），词语的排列要避免同一测试项的集中出现。<br>评分：此项成绩占总分的20%，即20分。读错一个音节的声母、韵母或声调扣0.2分。读音有明显缺陷每次扣0.1分。</li><li>限时：3分钟。超时扣分（3-4分钟扣1分，4分钟以上扣1.6分）。<br>&emsp;&emsp;读音有缺陷所指的除跟1项内所述相同的以外，儿化韵读音明显不合要求的应列入。<br>1和2两项测试，其中有一项或两项分别失分在10%的，即1题失分1分，或2题失分2分即判定应试人的普通话水平不能进入一级。<br>应试人有较为明显的语音缺陷的，即使总分达到一级甲等也要降等，评定为一级乙等。<h3 id="朗读"><a href="#朗读" class="headerlink" title="朗读"></a>朗读</h3>朗读从《测试大纲》第五部分朗读材料（1-60号）中任选。</li><li>目的：考察应试人用普通话朗读书面材料的水平，重点考察语音、连读音变（上声、“一”、“不”），语调（语气）等项目。</li><li>计分：此项成绩占总分的30%。即30分。对每篇材料的前400字（不包括标点）做累积计算，每次语音错误扣0.1分，漏读一个字扣0.1分，不同程度地存在方言语调一次性扣分（问题突出扣3分；比较明显，扣2分；略有反映，扣1.5分。停顿、断句不当每次扣1分；语速过快或过慢一次性扣2分。</li><li>限时：4分钟。超过4分30秒以上扣1分。</li><li>说明：朗读材料（1-50）各篇的字数略有出入，为了做到评分标准一致，测试中对应试人选读材料的前400个字（每篇400字之后均有标志）的失误做累积计算；但语调、语速的考察应贯穿全篇。从测试的要求来看，应把提供应试人做练习的50篇作品作为一个整体，应试前通过练习全面掌握。<h3 id="说话"><a href="#说话" class="headerlink" title="说话"></a>说话</h3></li><li>目的：考察应试人在没有文字凭借的情况下，说普通话的能力和所能达到的规范程度。以单向说话为主，必要时辅以主试人和应试人的双向对话。单向对话：应试人根据抽签确定的话题，说4分钟（不得少于3分钟，说满4分钟主试人应请应试人停止）。</li><li>评分：此项成绩占总分的40%，即40分。其中包括：<ul><li>语音面貌占20%，即20分。其中档次为：<ul><li>一档20分语音标准；</li><li>二档18分语音失误在10次以下，有方音不明显；</li><li>三档16分语音失误在10次以下，但方音比较明显；或方音不明显，但语音失误大致在10次-15次之间；</li><li>四档14分语音失误在10次-15次之间，方音比较明显；</li><li>五档10分语音失误超过15次，方音明显；</li><li>六档8分语音失误多，方音重。<br>&emsp;&emsp;语音面貌确定为二档（或二档以下）即使总积分在96以上，也不能入一级甲等；语音面貌确定为五档的，即使总积分在87分以上，也不能入二级甲等；有以上情况的，都应在等内降等评定。</li></ul></li></ul></li><li>词汇语法规范程度占10%。计分档次为：<ul><li>一档10分词汇、语法合乎规范；</li><li>二档8分偶有词汇或语法不符合规范的情况；</li><li>三档6分词汇、语法屡有不符合规范的情况；</li></ul></li><li>自然流畅程度占10%，即10分。计分档次为：<ul><li>一档10分自然流畅；</li><li>二档8分基本流畅，口语化较差（有类似背稿子的表现）；</li><li>三档6分语速不当，话语不连贯；说话时间不足，必须主试人用双向谈话加以弥补。试行阶段采用以上评分办法，随着情况的变化应适当增加说话评分的比例。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 职业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 普通话等级考试 </tag>
            
            <tag> 教育 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行编译root脚本程序</title>
      <link href="2019/08/06/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BC%96%E8%AF%91root%E8%84%9A%E6%9C%AC%E7%A8%8B%E5%BA%8F/"/>
      <url>2019/08/06/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BC%96%E8%AF%91root%E8%84%9A%E6%9C%AC%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>root可以直接运行cpp脚本，或者解释运行，或者编译运行。但都需要借助root编译器。这样一是速度比较慢，二是当需要执行大量任务时，难以实现并行。<br>因而产生了将脚本进行完整编译，使之能够脱离root单独运行。较大的项目用Makefile管理比较方便，对于较小的项目，使用单文件即可完成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -o <span class="hljs-built_in">source</span> source.cc `root-config --cflags --libs`<br></code></pre></td></tr></table></figure><p>其中<code>root-config --cflags --libs</code> 用来生成链接命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">root-config --cflags --libs<br></code></pre></td></tr></table></figure><p>结果为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-pthread -std=c++11 -m64 -I<span class="hljs-variable">$ROOTSYS</span>/include -L<span class="hljs-variable">$ROOTSYS</span>/lib -lCore -lImt -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lTree -lTreePlayer -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lMultiProc -pthread -lm -ldl -rdynamic<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> root </tag>
            
            <tag> g++ </tag>
            
            <tag> 编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frp配置内网穿透</title>
      <link href="2019/08/05/frp%E9%85%8D%E7%BD%AE%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>2019/08/05/frp%E9%85%8D%E7%BD%AE%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="frp的作用"><a href="#frp的作用" class="headerlink" title="frp的作用"></a>frp的作用</h2><ul><li>利用处于内网或防火墙后的机器，对外网环境提供 http 或 https 服务。</li><li>对于 http, https 服务支持基于域名的虚拟主机，支持自定义域名绑定，使多个域名可以共用一个80端口。</li><li>利用处于内网或防火墙后的机器，对外网环境提供 tcp 和 udp 服务，例如在家里通过 ssh 访问处于公司内网环境内的主机。<h2 id="frp服务器端配置-公网ip"><a href="#frp服务器端配置-公网ip" class="headerlink" title="frp服务器端配置(公网ip)"></a>frp服务器端配置(公网ip)</h2></li><li>user: server</li><li>passwd: serverpasswd </li><li>ip: 162.105.2.3</li><li>host: server.com<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">[common]<br>bind_port &#x3D; 7000<br>vhost_http_port &#x3D; 8000<br>[web03]<br>listen_port &#x3D; 5000<br>[web04]<br>listen_port &#x3D; 5001<br></code></pre></td></tr></table></figure><h3 id="frp客户机端配置-私网ip"><a href="#frp客户机端配置-私网ip" class="headerlink" title="frp客户机端配置(私网ip)"></a>frp客户机端配置(私网ip)</h3></li><li>user: client</li><li>passwd: clientpasswd</li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs plain">[common]<br>server_addr &#x3D; service.com<br>server_port &#x3D; 7000<br>[ssh]<br>type &#x3D; tcp<br>local_ip &#x3D; 127.0.0.1<br>local_port &#x3D; 22<br>remote_port &#x3D; 7001<br>[web01]<br>type &#x3D; http<br>local_port &#x3D; 4000<br>custom_domains &#x3D; blog.service.com<br>[web02]<br>type &#x3D; http<br>local_port &#x3D; 8888<br>custom_domains &#x3D; nb.service.com<br>[web03]<br>type &#x3D; tcp<br>local_ip &#x3D; 127.0.0.1<br>local_port &#x3D; 8889<br>remote_port &#x3D; 5000<br>[web04]<br>type &#x3D; tcp<br>local_ip &#x3D; 127.0.0.1<br>local_port &#x3D; 8890<br>remote_port &#x3D; 5001<br></code></pre></td></tr></table></figure><h2 id="ssh代理服务"><a href="#ssh代理服务" class="headerlink" title="ssh代理服务"></a>ssh代理服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -oPort=7001 -Y client@162.105.2.3<br><span class="hljs-comment">## passwd:clientpasswd</span><br></code></pre></td></tr></table></figure><h2 id="web代理服务"><a href="#web代理服务" class="headerlink" title="web代理服务"></a>web代理服务</h2></li><li>web01 <a href="http://blog.service.com:8000/">http://blog.service.com:8000</a></li><li>web02 <a href="http://nb.service.com:8000/">http://nb.service.com:8000</a></li><li>web03 <a href="http://162.105.2.3:5000/">http://162.105.2.3:5000</a> <a href="http://service.com:5000/">http://service.com:5000</a></li><li>web04 <a href="http://162.105.2.3:5001/">http://162.105.2.3:5001</a> <a href="http://service.com:5001/">http://service.com:5001</a></li></ul><ol><li>当公网ip有域名时,采用http和tcp的方式都可以访问内网服务。</li><li>采用http协议时，需设置子域名，此时共用一个vhost_http端口。</li><li>采用tcp协议时，需对每一个内网服务，单独开一个端口。这些端口在frpc.ini中设置，每个内网端口对应一个外网端口。</li><li>只有公网ip而没有域名时，且需设置多个内网服务，可以采用tcp的方式。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> 内网穿透 </tag>
            
            <tag> frp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS设置自动化脚本任务</title>
      <link href="2019/08/05/macOS%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC%E4%BB%BB%E5%8A%A1/"/>
      <url>2019/08/05/macOS%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>北大网关断网自动重连脚本</title>
      <link href="2019/08/05/%E5%8C%97%E5%A4%A7%E7%BD%91%E5%85%B3%E6%96%AD%E7%BD%91%E8%87%AA%E5%8A%A8%E9%87%8D%E8%BF%9E%E8%84%9A%E6%9C%AC/"/>
      <url>2019/08/05/%E5%8C%97%E5%A4%A7%E7%BD%91%E5%85%B3%E6%96%AD%E7%BD%91%E8%87%AA%E5%8A%A8%E9%87%8D%E8%BF%9E%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>编写脚本<code>autoconnect</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>curl --connect-timeout 5 <span class="hljs-string">&quot;baidu.com&quot;</span> &gt; /dev/null 2&gt;&amp;1<br><span class="hljs-keyword">if</span> [ $? == 0 ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;link already established.&quot;</span><br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;link lost, try reconnecting...&quot;</span><br>connect -u <span class="hljs-variable">$&#123;账号&#125;</span> -p <span class="hljs-variable">$&#123;密码&#125;</span>  &gt; /dev/null 2&gt;&amp;1<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;link established.&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>随后赋予该脚本执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">chmod +x autoconnect<br></code></pre></td></tr></table></figure><p>将<code>autoconnect</code>和<code>connect</code>移动到<code>/usr/local/bin</code>目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mv connect /usr/<span class="hljs-built_in">local</span>/bin<br>mv autoconnect /usr/<span class="hljs-built_in">local</span>/bin<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网关 </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管好我，爱好你，顾好家</title>
      <link href="2019/08/05/%E7%AE%A1%E5%A5%BD%E6%88%91%EF%BC%8C%E7%88%B1%E5%A5%BD%E4%BD%A0%EF%BC%8C%E9%A1%BE%E5%A5%BD%E5%AE%B6/"/>
      <url>2019/08/05/%E7%AE%A1%E5%A5%BD%E6%88%91%EF%BC%8C%E7%88%B1%E5%A5%BD%E4%BD%A0%EF%BC%8C%E9%A1%BE%E5%A5%BD%E5%AE%B6/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="85fa52167d82e6e0b377b06eecadd4333c9a3548313206c6eef1089f0c4c7530"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 私密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反思 </tag>
            
            <tag> 总结 </tag>
            
            <tag> 感情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github插件推荐</title>
      <link href="2019/08/04/Github%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
      <url>2019/08/04/Github%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo博客插件"><a href="#hexo博客插件" class="headerlink" title="hexo博客插件"></a>hexo博客插件</h2><ul><li><a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md">hexo-blog-encrypt</a>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">尝试着想一下，你写了一篇博客，但是，出于某种原因，不太希望每一个人都可以看到他。所以你常常会为这种文章设置一个密码，其他人需要输入密码才可以访问这篇博客。对于 emlog 或者 wordpress 来说，这很容易，但是对于 hexo 来说，之前并没有一个类似的功能。所以，Hexo-Blog-Encrypt 因为这个需求而诞生了。<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 资源整理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最后一次对话</title>
      <link href="2019/08/04/%E6%9C%80%E5%90%8E%E4%B8%80%E6%AC%A1%E5%AF%B9%E8%AF%9D/"/>
      <url>2019/08/04/%E6%9C%80%E5%90%8E%E4%B8%80%E6%AC%A1%E5%AF%B9%E8%AF%9D/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="82345101830e33620e07253700a9a9d41071ffd26463a55ff4216463876ab3ad">42fdbcd89563ce618169a95c5bdb398893db78e214413b808f1a555fd2c56a642191ea20472b5bfc3492c0281ebff3804c8ca7e576e0997494b2898a8f1a27cb18d727e76d40d0eefe1ea7e69983ee00660ec92d237783519cbfdd1d9143138a9042c501c28efd701b0409b31e9acc639cec2a8be94df81a8915cf91a38ae36e68d3e730f702cccf41048a10431befe8f7c525f11ede88110f86c758b3fb49f48aee68f6a4bbc3d7e5b84d1cce9845a87ca430efd521be3719cb10e84bc735103ea92d59e6ff1b44bf6339ebf4726eb265300d1913f8eae3ac14221188e09607c714b493b284c0d84700f584b4fc7ad54e6e0bb48267d6df6a1815102c3ab6a4526c62233e2ab0b10b53c18e860c60ca2627b03b503137304522dc647b8519d3d7d79a2e4000ffbb3df1d3b5aed72beb4303700e7851f6791ec4084a280d8b9924c5967bebe807e5a23230f6ded3f9e51df62e7fc9c1d18ec6b9e99d4b1fc3deb1c240b07b2ad55eac0539600014467cd862572ea7f3a2f75f715e40248a3c9fc9aba1d274b9c79fbd004857e1a00efb</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 私密 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown文字样式设置</title>
      <link href="2019/08/04/Markdown%E6%96%87%E5%AD%97%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE/"/>
      <url>2019/08/04/Markdown%E6%96%87%E5%AD%97%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="修改markdown的字体、大小、颜色"><a href="#修改markdown的字体、大小、颜色" class="headerlink" title="修改markdown的字体、大小、颜色"></a>修改markdown的字体、大小、颜色</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">face</span>=<span class="hljs-string">&quot;黑体&quot;</span>&gt;</span></span>我是黑体字<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">face</span>=<span class="hljs-string">&quot;微软雅黑&quot;</span>&gt;</span></span>我是微软雅黑<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">face</span>=<span class="hljs-string">&quot;STCAIYUN&quot;</span>&gt;</span></span>我是华文彩云<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">red</span>&gt;</span></span>我是红色<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">#008000</span>&gt;</span></span>我是绿色<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">Blue</span>&gt;</span></span>我是蓝色<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">size</span>=<span class="hljs-string">5</span>&gt;</span></span>我是尺寸<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">face</span>=<span class="hljs-string">&quot;黑体&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">green</span> <span class="hljs-attr">size</span>=<span class="hljs-string">5</span>&gt;</span></span>我是黑体，绿色，尺寸为5<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>效果如下</p><ul><li><font face="黑体">我是黑体字</font></li><li><font face="微软雅黑">我是微软雅黑</font></li><li><font face="STCAIYUN">我是华文彩云</font></li><li><font color=red>我是红色</font></li><li><font color=#008000>我是绿色</font></li><li><font color=Blue>我是蓝色</font></li><li><font size=5>我是尺寸</font></li><li><font face="黑体" color=green size=5>我是黑体，绿色，尺寸为5</font><h2 id="为文字添加背景色"><a href="#为文字添加背景色" class="headerlink" title="为文字添加背景色"></a>为文字添加背景色</h2>由于 style 标签和标签的 style 属性不被支持，所以这里只能是借助 table, tr, td 等表格标签的 bgcolor 属性来实现背景色。故这里对于文字背景色的设置，只是将那一整行看作一个表格，更改了那个格子的背景色（bgcolor）<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">yellow</span>&gt;</span></span>背景色yellow<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br></code></pre></td></tr></table></figure><table><tr><td bgcolor=yellow>背景色yellow</td></tr></table></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>论文--中文版编写</title>
      <link href="2019/08/04/%E8%AE%BA%E6%96%87-%E4%B8%AD%E6%96%87%E7%89%88%E7%BC%96%E5%86%99/"/>
      <url>2019/08/04/%E8%AE%BA%E6%96%87-%E4%B8%AD%E6%96%87%E7%89%88%E7%BC%96%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h2 id="22Al的β衰变谱"><a href="#22Al的β衰变谱" class="headerlink" title="22Al的β衰变谱"></a>22Al的β衰变谱</h2><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>我们在兰州RIBLL1上开展了一个Al22衰变实验，主束为28Si. 半衰期91ms被测定。βp，β2p，βα，βγ的测定使得我们得以更新能级纲图。通过Geant4的模拟，我们进一步精确测定分支比，并对部分质子峰结构特征得以解释。</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在过去几十年里，原理稳定线的奇异核一直是核物理领域经久不衰的研究热点。原子核的诸多性质诸如同位旋、能级宽度等一系列物理量随着原子核向远离稳定线延申，产生了诸多奇异的效应。通过这些特性有助于我们深入研究原子核的结构信息和衰变机制。而在其中，通过β衰变谱来开展研究工作成为了滴线附近原子核结构信息和检验并完善壳模型理论的强有力的工具。<br>奇异核22Al是Al同位素中最缺中子的一个核素，有13个质子，9个中子，Tz为-2，结合能只有20keV. 1982年第一次被Cable观测到。在他的实验中，22Al通过24Mg(3He,p4n)的反应生成(110MeV)。Al原子通过He-jet技术被输运。在衰变谱中，仅仅高能区的两个峰(8212,8537keV)能够被观测到，低能区的部分由于其他核的污染，无法进行观测。 这两个峰被指认为从IAS态到Na21的基态和激发态。IAS态的激发能为13650keV。测定的半衰期为70ms。 由于实验条件的限制，没有确定绝对的分支比。随后，Cable在另一个实验中观测到了β2p衰变事件。在那个实验中，他观测到了两条beta2p衰变分支。基于能量的考虑，这两条分支归到Na20的基态和第一激发态。在最近的实验中，Blank测到了betaalpha衰变，通过将Al22注入到鬼探测器和气体探测器。测得的T1/2为59ms。精确的能级纲图以及实验分支比被测得。然而这个实验也受到了污染，在Ar36生成的次级束中，仅有30%的是Al22核素。那篇文章中还进行了壳模型计算。<br>尽管Al22这个核已经被研究了很久，但依旧有一些不确定和局限。 由于较强的污染，部分月前丢失或者被污染物中更强的分支掩盖。此外，先前的实验中也没有观测到γ射线。实验的目的是提高beta衰变的测量，通过不同的方式：更纯的22Al次级束，更高的统计，带电粒子测量更好的能量分辨，gamma探测器来辅助指认跃迁。</p><h3 id="实验技术"><a href="#实验技术" class="headerlink" title="实验技术"></a>实验技术</h3><p>实验于2017年11月在兰州RIBLL1上开展。主束为74.27MeV/u，80enA的28Si14+，通过K69 Sector Focus Cyclotron和K450 Separate Sector Cyclotron 。次级束通过将28Si打到1581um厚的Be9靶上。RIBLL1的主要设置为筛选Al22做了优化。Al22的束流强度和纯度分别为（）和（）。次级束粒子通过ΔE和TOF来筛选想要的粒子。通过位于T1、T2的闪烁薄膜探测器给出的飞行时间（TOF）结合位于T2的QSDΔE1和QSDΔE2给出的能损信号（ΔE）可以建立ΔE–TOF图谱鉴别束流粒子，双重ΔE探测器的能量和时间信号都可以用于进一步提高对束流重离子的鉴别能力。本实验研究的核为Na20，Mg21，Al22，Si23.<br><img src="https://i.loli.net/2019/08/04/FOLX5uAalzvMxPw.png"><br>探测器阵列主要由三块双面硅条探测器（DSSD）、五块四分硅探测器（QSD）及外部五个Clover型的高纯锗探测器组成。经过上游铝降能片降能后的束流具有一定能散，目标核的射程分布在三块DSSD，即DSSD做停阻束流中目标核的注入探测器，并对注入核的衰变带电粒子进行测量，硅探测器对从内部发射的带电粒子具有极高的探测效率。每个DSSD x–y像素格都可视为独立探测器，这样在连续束、高束流注入率的条件下各单个像素格内仍能保持较低注入率，衰变事件和注入事件的时间关联仍然可以建立。三块DSSD的厚度分别为142um，40um，304um。Al22主要分布在后两块Si，QSD1用于探测DSSD中感兴趣核衰变产生的β粒子，QSD2和QSD3位于束流最下游，用于测量束流中的轻粒子（1H、2H、3H、4He等），反符合去掉穿透DSSD的轻粒子在DSSD中的能损信号。DSSD被五个clover环绕，下侧有三个LaBr3探测器，用来测量γ射线。</p><h3 id="分析及结果"><a href="#分析及结果" class="headerlink" title="分析及结果"></a>分析及结果</h3><h4 id="能量刻度及注入深度分布"><a href="#能量刻度及注入深度分布" class="headerlink" title="能量刻度及注入深度分布"></a>能量刻度及注入深度分布</h4><p>重离子能量刻度通过将实验中任意两块DSSD组成的望远镜谱与LISE计算的望远镜谱做对照，调整刻度参数，使实验谱的中心与计算的de-E线基本重合；随后通过应用LISE计算得到的能量射程拟合函数计算注入重离子的注入深度。<br><img src="https://i.loli.net/2019/08/04/BeTNhFSp6qtcxYv.png"><br>质子能量刻度应用文献中给出的质子峰数据。采用了※，※，※，※，※几个峰参与能量刻度。（考虑了弹道亏损效应。）和（β叠加效应）。</p><h4 id="质子探测效率模拟"><a href="#质子探测效率模拟" class="headerlink" title="质子探测效率模拟"></a>质子探测效率模拟</h4><p>我们采用了Geant4工具包来模拟计算质子探测效率。质子的注入深度以及x-y平面分布采用了实验数据，在Si内各向同性发射。我们每隔0.5MeV的能量发射100000个质子，绘制了E-Eff曲线。<br><img src="https://i.loli.net/2019/08/07/HloGSqhK7sBWP6a.png"><br>其中蓝线为40umSi的探测效率曲线，橙线为304umSi的探测效率曲线。</p><h4 id="质子谱"><a href="#质子谱" class="headerlink" title="质子谱"></a>质子谱</h4><p><img src="https://raw.githubusercontent.com/mission-young/Pic/master//img/20190901152447.png"><br>这是最后一块Si的质子谱，其中蓝线未加入veto条件限制，而红线加入了veto条件限制。<br><img src="https://raw.githubusercontent.com/mission-young/Pic/master//img/20190901153304.png"><br>这是中间一块Si的质子谱。</p><h4 id="Geant4模拟质子谱"><a href="#Geant4模拟质子谱" class="headerlink" title="Geant4模拟质子谱"></a>Geant4模拟质子谱</h4><p>随后，我们应用EPJA2006文章中给出的质子能量分支比数据作为Geant4模拟输入，来研究β叠加效应。<br><img src="https://i.loli.net/2019/08/05/WMw75niR9zBVlpH.png"><br>上图中实线为实验谱，虚线为经过归一之后的模拟谱。其中实验谱和模拟谱均未设置veto条件。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>暑假家教记录</title>
      <link href="2019/08/03/%E6%9A%91%E5%81%87%E5%AE%B6%E6%95%99%E8%AE%B0%E5%BD%95/"/>
      <url>2019/08/03/%E6%9A%91%E5%81%87%E5%AE%B6%E6%95%99%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">日期</th><th align="center">起始时间</th><th align="center">结束时间</th><th align="center">时长</th><th align="center">科目</th></tr></thead><tbody><tr><td align="center">2019-08-03</td><td align="center">15:00</td><td align="center">17:30</td><td align="center">2.5</td><td align="center">概率统计</td></tr><tr><td align="center">2019-08-04</td><td align="center">15:00</td><td align="center">17:30</td><td align="center">2.5</td><td align="center">概率统计</td></tr><tr><td align="center">2019-08-05</td><td align="center">15:00</td><td align="center">17:30</td><td align="center">2.5</td><td align="center">概率统计</td></tr><tr><td align="center">2019-08-06</td><td align="center">14:30</td><td align="center">17:30</td><td align="center">3</td><td align="center">概率统计</td></tr><tr><td align="center">2019-08-07</td><td align="center">15:00</td><td align="center">17:30</td><td align="center">2.5</td><td align="center">线性代数</td></tr><tr><td align="center">2019-08-08</td><td align="center">9:30</td><td align="center">12:30</td><td align="center">3</td><td align="center">线性代数</td></tr><tr><td align="center">2019-08-09</td><td align="center">9:30</td><td align="center">12:00</td><td align="center">2.5</td><td align="center">线性代数</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GitHub管理Hexo源文件</title>
      <link href="2019/08/03/GitHub%E7%AE%A1%E7%90%86Hexo%E6%BA%90%E6%96%87%E4%BB%B6/"/>
      <url>2019/08/03/GitHub%E7%AE%A1%E7%90%86Hexo%E6%BA%90%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>hexo发布网站到Github之后，可以直接通过访问Git个人主页。但<code>hexo d</code>部署的方式并不包含博客的源码，对于博客的迁移、更新、维护、多终端编辑并不友好。<br>在网上看到诸多同时管理hexo博客源文件和发布版本的教程，看似很优雅，但分支的切换、管理比较繁琐，同时一个严重的问题是，源代码的权限想要设为私有，而发布版本为公有。因而决定重新建立一个repo来管理源代码项目。</p><a id="more"></a><p>在Github新疆项目Hexo，权限设置为私有。在Hexo目录输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">git init <br>git add .<br>git commit -m &quot;add&quot;<br>git remote add origin git@github.com:mission-young&#x2F;Hexo.git<br>git push -u origin master<br></code></pre></td></tr></table></figure><p>查看Hexo目录下<code>.gitignore</code>文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs git">.DS_Store<br>Thumbs.db<br>db.json<br>*.log<br>node_modules&#x2F;<br>public&#x2F;<br>.deploy*&#x2F;<br></code></pre></td></tr></table></figure><p>已经自动忽略public目录。由此实现：源代码私有，部署至Hexo项目；发布网站共有，部署至mission-young.github.io。<br>同时编辑部署脚本<code>hexo-publish.sh</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/env sh</span><br><span class="hljs-comment"># hexo clean</span><br>hexo g<br>hexo d<br>git add .<br>git commit -m <span class="hljs-string">&quot;update&quot;</span><br>git push  <br></code></pre></td></tr></table></figure><p>从而实现一键同步Hexo项目并发布。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用Hexo搭建Github个人博客</title>
      <link href="2019/08/02/hello-world/"/>
      <url>2019/08/02/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建Hexo环境"><a href="#搭建Hexo环境" class="headerlink" title="搭建Hexo环境"></a>搭建Hexo环境</h2><p>访问Hexo主页</p><iframe src="https://hexo.io/zh-cn/" width="100%" Height="800">   </iframe><a id="more"></a>执行上述页面命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br>hexo init blog<br><span class="hljs-built_in">cd</span> blog<br>npm install<br>hexo server<br></code></pre></td></tr></table></figure>即可完成hexo的安装。### 安装插件：<iframe src="https://jaredforsyth.com/hexo-admin/" width="100%" Height="800">   </iframe>执行页面命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-admin<br></code></pre></td></tr></table></figure>进入[设置界面](http://localhost:4000/admin/#/settings)：![upload successful](/images/pasted-1.png)勾选显示行号以及拼写检查。随后在blog根目录添加脚本`hexo-publish.sh`：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/env sh</span><br><span class="hljs-comment"># hexo clean</span><br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure>随后执行`chmod +x hexo-publish.sh`，之后在`_config.yml`中添加<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">admin:</span><br>  <span class="hljs-attr">deployCommand:</span> <span class="hljs-string">&#x27;./hexo-publish.sh&#x27;</span><br></code></pre></td></tr></table></figure>修改`_config.yml`配置<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:mission-young/mission-young.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure>至此，即可完成hexo的在线编辑及部署Github。### 配置主题本博客采用了[ARIA主题](https://github.com/AlynxZhou/hexo-theme-aria/blob/master/README.zh_CN.md)。按照该作者Github配置完成主题配置选项。]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划之博弈问题</title>
      <link href="2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E5%8D%9A%E5%BC%88%E9%97%AE%E9%A2%98/"/>
      <url>2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E5%8D%9A%E5%BC%88%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>title: 动态规划之博弈问题<br>author: 远方<br>tags:</p><ul><li>LeetCode</li><li>算法<br>categories:</li><li>LeetCode破局攻略<br>date: 2016-01-01 19:20:00</li></ul><hr><h1 id="动态规划之博弈问题"><a href="#动态规划之博弈问题" class="headerlink" title="动态规划之博弈问题"></a>动态规划之博弈问题</h1><p>上一篇文章 <a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E8%A7%A3%E5%86%B3%E7%9A%84%E6%99%BA%E5%8A%9B%E9%A2%98">几道智力题</a> 中讨论到一个有趣的「石头游戏」，通过题目的限制条件，这个游戏是先手必胜的。但是智力题终究是智力题，真正的算法问题肯定不会是投机取巧能搞定的。所以，本文就借石头游戏来讲讲「假设两个人都足够聪明，最后谁会获胜」这一类问题该如何用动态规划算法解决。<br>博弈类问题的套路都差不多，下文举例讲解，其核心思路是在二维 dp 的基础上使用元组分别存储两个人的博弈结果。掌握了这个技巧以后，别人再问你什么俩海盗分宝石，俩人拿硬币的问题，你就告诉别人：我懒得想，直接给你写个算法算一下得了。<br>我们「石头游戏」改的更具有一般性：<br>你和你的朋友面前有一排石头堆，用一个数组 piles 表示，piles[i] 表示第 i 堆石子有多少个。你们轮流拿石头，一次拿一堆，但是只能拿走最左边或者最右边的石头堆。所有石头被拿完后，谁拥有的石头多，谁获胜。<br>石头的堆数可以是任意正整数，石头的总数也可以是任意正整数，这样就能打破先手必胜的局面了。比如有三堆石头 <code>piles = [1, 100, 3]</code>，先手不管拿 1 还是 3，能够决定胜负的 100 都会被后手拿走，后手会获胜。<br><strong>假设两人都很聪明</strong>，请你设计一个算法，返回先手和后手的最后得分（石头总数）之差。比如上面那个例子，先手能获得 4 分，后手会获得 100 分，你的算法应该返回 -96。<br>这样推广之后，这个问题算是一道 Hard 的动态规划问题了。<strong>博弈问题的难点在于，两个人要轮流进行选择，而且都贼精明，应该如何编程表示这个过程呢？</strong><br>还是强调多次的套路，首先明确 dp 数组的含义，然后和股票买卖系列问题类似，只要找到「状态」和「选择」，一切就水到渠成了。</p><h3 id="一、定义-dp-数组的含义"><a href="#一、定义-dp-数组的含义" class="headerlink" title="一、定义 dp 数组的含义"></a>一、定义 dp 数组的含义</h3><p>定义 dp 数组的含义是很有技术含量的，同一问题可能有多种定义方法，不同的定义会引出不同的状态转移方程，不过只要逻辑没有问题，最终都能得到相同的答案。<br>我建议不要迷恋那些看起来很牛逼，代码很短小的奇技淫巧，最好是稳一点，采取可解释性最好，最容易推广的设计思路。本文就给出一种博弈问题的通用设计框架。<br>介绍 dp 数组的含义之前，我们先看一下 dp 数组最终的样子：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8D%9A%E5%BC%88%E9%97%AE%E9%A2%98/1.png" alt="1"><br>下文讲解时，认为元组是包含 first 和 second 属性的一个类，而且为了节省篇幅，将这两个属性简写为 fir 和 sec。比如按上图的数据，我们说 <code>dp[1][3].fir = 10</code>，<code>dp[0][1].sec = 3</code>。<br>先回答几个读者可能提出的问题：<br>这个二维 dp table 中存储的是元组，怎么编程表示呢？这个 dp table 有一半根本没用上，怎么优化？很简单，都不要管，先把解题的思路想明白了再谈也不迟。<br><strong>以下是对 dp 数组含义的解释：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">dp[i][j].fir 表示，对于 piles[i...j] 这部分石头堆，先手能获得的最高分数。<br>dp[i][j].sec 表示，对于 piles[i...j] 这部分石头堆，后手能获得的最高分数。<br>举例理解一下，假设 piles = [<span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]，索引从 <span class="hljs-number">0</span> 开始<br>dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>].fir = <span class="hljs-number">9</span> 意味着：面对石头堆 [<span class="hljs-number">3</span>, <span class="hljs-number">9</span>]，先手最终能够获得 <span class="hljs-number">9</span> 分。<br>dp[<span class="hljs-number">1</span>][<span class="hljs-number">3</span>].sec = <span class="hljs-number">2</span> 意味着：面对石头堆 [<span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]，后手最终能够获得 <span class="hljs-number">2</span> 分。<br></code></pre></td></tr></table></figure><p>我们想求的答案是先手和后手最终分数之差，按照这个定义也就是 $dp[0][n-1].fir - dp[0][n-1].sec$，即面对整个 piles，先手的最优得分和后手的最优得分之差。</p><h3 id="二、状态转移方程"><a href="#二、状态转移方程" class="headerlink" title="二、状态转移方程"></a>二、状态转移方程</h3><p>写状态转移方程很简单，首先要找到所有「状态」和每个状态可以做的「选择」，然后择优。<br>根据前面对 dp 数组的定义，<strong>状态显然有三个：开始的索引 i，结束的索引 j，当前轮到的人。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">dp[i][j][fir <span class="hljs-keyword">or</span> sec]<br>其中：<br><span class="hljs-number">0</span> &lt;= i &lt; piles.length<br>i &lt;= j &lt; piles.length<br></code></pre></td></tr></table></figure><p>对于这个问题的每个状态，可以做的<strong>选择有两个：选择最左边的那堆石头，或者选择最右边的那堆石头。</strong> 我们可以这样穷举所有状态：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">n = piles.length<br><span class="hljs-keyword">for</span> <span class="hljs-number">0</span> &lt;= i &lt; n:<br>    <span class="hljs-keyword">for</span> j &lt;= i &lt; n:<br>        <span class="hljs-keyword">for</span> who <span class="hljs-keyword">in</span> &#123;fir, sec&#125;:<br>            dp[i][j][who] = max(left, right)<br></code></pre></td></tr></table></figure><p>上面的伪码是动态规划的一个大致的框架，股票系列问题中也有类似的伪码。这道题的难点在于，两人是交替进行选择的，也就是说先手的选择会对后手有影响，这怎么表达出来呢？<br>根据我们对 dp 数组的定义，很容易解决这个难点，<strong>写出状态转移方程：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">dp[i][j].fir = max(piles[i] + dp[i+<span class="hljs-number">1</span>][j].sec, piles[j] + dp[i][j<span class="hljs-number">-1</span>].sec)<br>dp[i][j].fir = max(    选择最左边的石头堆     ,     选择最右边的石头堆     )<br><span class="hljs-comment"># 解释：我作为先手，面对 piles[i...j] 时，有两种选择：</span><br><span class="hljs-comment"># 要么我选择最左边的那一堆石头，然后面对 piles[i+1...j]</span><br><span class="hljs-comment"># 但是此时轮到对方，相当于我变成了后手；</span><br><span class="hljs-comment"># 要么我选择最右边的那一堆石头，然后面对 piles[i...j-1]</span><br><span class="hljs-comment"># 但是此时轮到对方，相当于我变成了后手。</span><br><span class="hljs-keyword">if</span> 先手选择左边:<br>    dp[i][j].sec = dp[i+<span class="hljs-number">1</span>][j].fir<br><span class="hljs-keyword">if</span> 先手选择右边:<br>    dp[i][j].sec = dp[i][j<span class="hljs-number">-1</span>].fir<br><span class="hljs-comment"># 解释：我作为后手，要等先手先选择，有两种情况：</span><br><span class="hljs-comment"># 如果先手选择了最左边那堆，给我剩下了 piles[i+1...j]</span><br><span class="hljs-comment"># 此时轮到我，我变成了先手；</span><br><span class="hljs-comment"># 如果先手选择了最右边那堆，给我剩下了 piles[i...j-1]</span><br><span class="hljs-comment"># 此时轮到我，我变成了先手。</span><br></code></pre></td></tr></table></figure><p>根据 dp 数组的定义，我们也可以找出 <strong>base case</strong>，也就是最简单的情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">dp[i][j].fir = piles[i]<br>dp[i][j].sec = <span class="hljs-number">0</span><br>其中 <span class="hljs-number">0</span> &lt;= i == j &lt; n<br><span class="hljs-comment"># 解释：i 和 j 相等就是说面前只有一堆石头 piles[i]</span><br><span class="hljs-comment"># 那么显然先手的得分为 piles[i]</span><br><span class="hljs-comment"># 后手没有石头拿了，得分为 0</span><br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8D%9A%E5%BC%88%E9%97%AE%E9%A2%98/2.png" alt="2"><br>这里需要注意一点，我们发现 base case 是斜着的，而且我们推算 dp[i][j] 时需要用到 dp[i+1][j] 和 dp[i][j-1]：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8D%9A%E5%BC%88%E9%97%AE%E9%A2%98/3.png" alt="3"><br>所以说算法不能简单的一行一行遍历 dp 数组，<strong>而要斜着遍历数组：</strong><br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8D%9A%E5%BC%88%E9%97%AE%E9%A2%98/4.png" alt="4"><br>说实话，斜着遍历二维数组说起来容易，你还真不一定能想出来怎么实现，不信你思考一下？这么巧妙的状态转移方程都列出来了，要是不会写代码实现，那真的很尴尬了。</p><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><p>如何实现这个 fir 和 sec 元组呢，你可以用 python，自带元组类型；或者使用 C++ 的 pair 容器；或者用一个三维数组 <code>dp[n][n][2]</code>，最后一个维度就相当于元组；或者我们自己写一个 Pair 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pair</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> fir, sec;<br>    Pair(<span class="hljs-keyword">int</span> fir, <span class="hljs-keyword">int</span> sec) &#123;<br>        <span class="hljs-keyword">this</span>.fir = fir;<br>        <span class="hljs-keyword">this</span>.sec = sec;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后直接把我们的状态转移方程翻译成代码即可，可以注意一下斜着遍历数组的技巧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 返回游戏最后先手和后手的得分之差 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">stoneGame</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] piles)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = piles.length;<br>    <span class="hljs-comment">// 初始化 dp 数组</span><br>    Pair[][] dp = <span class="hljs-keyword">new</span> Pair[n][n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &lt; n; j++)<br>            dp[i][j] = <span class="hljs-keyword">new</span> Pair(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 填入 base case</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        dp[i][i].fir = piles[i];<br>        dp[i][i].sec = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 斜着遍历数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">2</span>; l &lt;= n; l++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n - l; i++) &#123;<br>            <span class="hljs-keyword">int</span> j = l + i - <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 先手选择最左边或最右边的分数</span><br>            <span class="hljs-keyword">int</span> left = piles[i] + dp[i+<span class="hljs-number">1</span>][j].sec;<br>            <span class="hljs-keyword">int</span> right = piles[j] + dp[i][j-<span class="hljs-number">1</span>].sec;<br>            <span class="hljs-comment">// 套用状态转移方程</span><br>            <span class="hljs-keyword">if</span> (left &gt; right) &#123;<br>                dp[i][j].fir = left;<br>                dp[i][j].sec = dp[i+<span class="hljs-number">1</span>][j].fir;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                dp[i][j].fir = right;<br>                dp[i][j].sec = dp[i][j-<span class="hljs-number">1</span>].fir;<br>            &#125;<br>        &#125;<br>    &#125;<br>    Pair res = dp[<span class="hljs-number">0</span>][n-<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> res.fir - res.sec;<br>&#125;<br></code></pre></td></tr></table></figure><p>动态规划解法，如果没有状态转移方程指导，绝对是一头雾水，但是根据前面的详细解释，读者应该可以清晰理解这一大段代码的含义。<br>而且，注意到计算 <code>dp[i][j]</code> 只依赖其左边和下边的元素，所以说肯定有优化空间，转换成一维 dp，想象一下把二维平面压扁，也就是投影到一维。但是，一维 dp 比较复杂，可解释性很差，大家就不必浪费这个时间去理解了。</p><h3 id="四、最后总结"><a href="#四、最后总结" class="headerlink" title="四、最后总结"></a>四、最后总结</h3><p>本文给出了解决博弈问题的动态规划解法。博弈问题的前提一般都是在两个聪明人之间进行，编程描述这种游戏的一般方法是二维 dp 数组，数组中通过元组分别表示两人的最优决策。<br>之所以这样设计，是因为先手在做出选择之后，就成了后手，后手在对方做完选择后，就变成了先手。这种角色转换使得我们可以重用之前的结果，典型的动态规划标志。<br>读到这里的朋友应该能理解算法解决博弈问题的套路了。学习算法，一定要注重算法的模板框架，而不是一些看起来牛逼的思路，也不要奢求上来就写一个最优的解法。不要舍不得多用空间，不要过早尝试优化，不要惧怕多维数组。dp 数组就是存储信息避免重复计算的，随便用，直到咱满意为止。<br>希望本文对你有帮助。</p><p><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%E6%A8%A1%E6%9D%BF">上一篇：动态规划之子序列问题解题模板</a><br><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E4%B9%8B%E5%8C%BA%E9%97%B4%E8%B0%83%E5%BA%A6%E9%97%AE%E9%A2%98">下一篇：贪心算法之区间调度问题</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划之四键键盘</title>
      <link href="2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E5%9B%9B%E9%94%AE%E9%94%AE%E7%9B%98/"/>
      <url>2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E5%9B%9B%E9%94%AE%E9%94%AE%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<p>title: 动态规划之四键键盘<br>author: 远方<br>tags:</p><ul><li>LeetCode</li><li>算法<br>categories:</li><li>LeetCode破局攻略<br>date: 2016-01-01 19:20:00</li></ul><hr><h1 id="动态规划之四键键盘"><a href="#动态规划之四键键盘" class="headerlink" title="动态规划之四键键盘"></a>动态规划之四键键盘</h1><p>四键键盘问题很有意思，而且可以明显感受到：对 dp 数组的不同定义需要完全不同的逻辑，从而产生完全不同的解法。<br>首先看一下题目：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/4keyboard/title.png"><br>如何在 N 次敲击按钮后得到最多的 A？我们穷举呗，每次有对于每次按键，我们可以穷举四种可能，很明显就是一个动态规划问题。</p><h3 id="第一种思路"><a href="#第一种思路" class="headerlink" title="第一种思路"></a>第一种思路</h3><p>这种思路会很容易理解，但是效率并不高，我们直接走流程：<strong>对于动态规划问题，首先要明白有哪些「状态」，有哪些「选择」</strong>。<br>具体到这个问题，对于每次敲击按键，有哪些「选择」是很明显的：4 种，就是题目中提到的四个按键，分别是 <code>A</code>、<code>C-A</code>、<code>C-C</code>、<code>C-V</code>（<code>Ctrl</code> 简写为 <code>C</code>）。<br>接下来，思考一下对于这个问题有哪些「状态」？<strong>或者换句话说，我们需要知道什么信息，才能将原问题分解为规模更小的子问题</strong>？<br>你看我这样定义三个状态行不行：第一个状态是剩余的按键次数，用 <code>n</code> 表示；第二个状态是当前屏幕上字符 A 的数量，用 <code>a_num</code> 表示；第三个状态是剪切板中字符 A 的数量，用 <code>copy</code> 表示。<br>如此定义「状态」，就可以知道 base case：当剩余次数 <code>n</code> 为 0 时，<code>a_num</code> 就是我们想要的答案。<br>结合刚才说的 4 种「选择」，我们可以把这几种选择通过状态转移表示出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">dp(n - <span class="hljs-number">1</span>, a_num + <span class="hljs-number">1</span>, copy),    <span class="hljs-comment"># A</span><br>解释：按下 A 键，屏幕上加一个字符<br>同时消耗 <span class="hljs-number">1</span> 个操作数<br>dp(n - <span class="hljs-number">1</span>, a_num + copy, copy), <span class="hljs-comment"># C-V</span><br>解释：按下 C-V 粘贴，剪切板中的字符加入屏幕<br>同时消耗 <span class="hljs-number">1</span> 个操作数<br>dp(n - <span class="hljs-number">2</span>, a_num, a_num)        <span class="hljs-comment"># C-A C-C</span><br>解释：全选和复制必然是联合使用的，<br>剪切板中 A 的数量变为屏幕上 A 的数量<br>同时消耗 <span class="hljs-number">2</span> 个操作数<br></code></pre></td></tr></table></figure><p>这样可以看到问题的规模 <code>n</code> 在不断减小，肯定可以到达 <code>n = 0</code> 的 base case，所以这个思路是正确的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">maxA</span>(<span class="hljs-params">N: int</span>) -&gt; int:</span><br>    <span class="hljs-comment"># 对于 (n, a_num, copy) 这个状态，</span><br>    <span class="hljs-comment"># 屏幕上能最终最多能有 dp(n, a_num, copy) 个 A</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dp</span>(<span class="hljs-params">n, a_num, copy</span>):</span><br>        <span class="hljs-comment"># base case</span><br>        <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> a_num;<br>        <span class="hljs-comment"># 几种选择全试一遍，选择最大的结果</span><br>        <span class="hljs-keyword">return</span> max(<br>                dp(n - <span class="hljs-number">1</span>, a_num + <span class="hljs-number">1</span>, copy),    <span class="hljs-comment"># A</span><br>                dp(n - <span class="hljs-number">1</span>, a_num + copy, copy), <span class="hljs-comment"># C-V</span><br>                dp(n - <span class="hljs-number">2</span>, a_num, a_num)        <span class="hljs-comment"># C-A C-C</span><br>            )<br>    <span class="hljs-comment"># 可以按 N 次按键，屏幕和剪切板里都还没有 A</span><br>    <span class="hljs-keyword">return</span> dp(N, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>这个解法应该很好理解，因为语义明确。下面就继续走流程，用备忘录消除一下重叠子问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">maxA</span>(<span class="hljs-params">N: int</span>) -&gt; int:</span><br>    <span class="hljs-comment"># 备忘录</span><br>    memo = dict()<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dp</span>(<span class="hljs-params">n, a_num, copy</span>):</span><br>        <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> a_num;<br>        <span class="hljs-comment"># 避免计算重叠子问题</span><br>        <span class="hljs-keyword">if</span> (n, a_num, copy) <span class="hljs-keyword">in</span> memo:<br>            <span class="hljs-keyword">return</span> memo[(n, a_num, copy)]<br>        memo[(n, a_num, copy)] = max(<br>                <span class="hljs-comment"># 几种选择还是一样的</span><br>            )<br>        <span class="hljs-keyword">return</span> memo[(n, a_num, copy)]<br>    <span class="hljs-keyword">return</span> dp(N, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>这样优化代码之后，子问题虽然没有重复了，但数目仍然很多，在 LeetCode 提交会超时的。<br>我们尝试分析一下这个算法的时间复杂度，就会发现不容易分析。我们可以把这个 dp 函数写成 dp 数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">dp[n][a_num][copy]<br><span class="hljs-comment"># 状态的总数（时空复杂度）就是这个三维数组的体积</span><br></code></pre></td></tr></table></figure><p>我们知道变量 <code>n</code> 最多为 <code>N</code>，但是 <code>a_num</code> 和 <code>copy</code> 最多为多少我们很难计算，复杂度起码也有 O(N^3) 把。所以这个算法并不好，复杂度太高，且已经无法优化了。<br>这也就说明，我们这样定义「状态」是不太优秀的，下面我们换一种定义 dp 的思路。</p><h3 id="第二种思路"><a href="#第二种思路" class="headerlink" title="第二种思路"></a>第二种思路</h3><p>这种思路稍微有点复杂，但是效率高。继续走流程，「选择」还是那 4 个，但是这次我们只定义一个「状态」，也就是剩余的敲击次数 <code>n</code>。<br>这个算法基于这样一个事实，<strong>最优按键序列一定只有两种情况</strong>：<br>要么一直按 <code>A</code>：A,A,…A（当 N 比较小时）。<br>要么是这么一个形式：A,A,…C-A,C-C,C-V,C-V,…C-V（当 N 比较大时）。<br>因为字符数量少（N 比较小）时，<code>C-A C-C C-V</code> 这一套操作的代价相对比较高，可能不如一个个按 <code>A</code>；而当 N 比较大时，后期 <code>C-V</code> 的收获肯定很大。这种情况下整个操作序列大致是：<strong>开头连按几个 <code>A</code>，然后 <code>C-A C-C</code> 组合再接若干 <code>C-V</code>，然后再 <code>C-A C-C</code> 接着若干 <code>C-V</code>，循环下去</strong>。<br>换句话说，最后一次按键要么是 <code>A</code> 要么是 <code>C-V</code>。明确了这一点，可以通过这两种情况来设计算法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N + <span class="hljs-number">1</span>];<br><span class="hljs-comment">// 定义：dp[i] 表示 i 次操作后最多能显示多少个 A</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= N; i++) <br>    dp[i] = max(<br>            这次按 A 键，<br>            这次按 C-V<br>        )<br></code></pre></td></tr></table></figure><p>对于「按 <code>A</code> 键」这种情况，就是状态 <code>i - 1</code> 的屏幕上新增了一个 A 而已，很容易得到结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 按 A 键，就比上次多一个 A 而已</span><br>dp[i] = dp[i - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>但是，如果要按 <code>C-V</code>，还要考虑之前是在哪里 <code>C-A C-C</code> 的。<br><strong>刚才说了，最优的操作序列一定是 <code>C-A C-C</code> 接着若干 <code>C-V</code>，所以我们用一个变量 <code>j</code> 作为若干 <code>C-V</code> 的起点</strong>。那么 <code>j</code> 之前的 2 个操作就应该是 <code>C-A C-C</code> 了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxA</span><span class="hljs-params">(<span class="hljs-keyword">int</span> N)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N + <span class="hljs-number">1</span>];<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++) &#123;<br>        <span class="hljs-comment">// 按 A 键</span><br>        dp[i] = dp[i - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>; j &lt; i; j++) &#123;<br>            <span class="hljs-comment">// 全选 &amp; 复制 dp[j-2]，连续粘贴 i - j 次</span><br>            <span class="hljs-comment">// 屏幕上共 dp[j - 2] * (i - j + 1) 个 A</span><br>            dp[i] = Math.max(dp[i], dp[j - <span class="hljs-number">2</span>] * (i - j + <span class="hljs-number">1</span>));<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// N 次按键之后最多有几个 A？</span><br>    <span class="hljs-keyword">return</span> dp[N];<br>&#125;<br></code></pre></td></tr></table></figure><p>其中 <code>j</code> 变量减 2 是给 <code>C-A C-C</code> 留下操作数，看个图就明白了：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/4keyboard/1.jpg"><br>这样，此算法就完成了，时间复杂度 O(N^2)，空间复杂度 O(N)，这种解法应该是比较高效的了。</p><h3 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h3><p>动态规划难就难在寻找状态转移，不同的定义可以产生不同的状态转移逻辑，虽然最后都能得到正确的结果，但是效率可能有巨大的差异。<br>回顾第一种解法，重叠子问题已经消除了，但是效率还是低，到底低在哪里呢？抽象出递归框架：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dp</span>(<span class="hljs-params">n, a_num, copy</span>):</span><br>    dp(n - <span class="hljs-number">1</span>, a_num + <span class="hljs-number">1</span>, copy),    <span class="hljs-comment"># A</span><br>    dp(n - <span class="hljs-number">1</span>, a_num + copy, copy), <span class="hljs-comment"># C-V</span><br>    dp(n - <span class="hljs-number">2</span>, a_num, a_num)        <span class="hljs-comment"># C-A C-C</span><br></code></pre></td></tr></table></figure><p>看这个穷举逻辑，是有可能出现这样的操作序列 <code>C-A C-C，C-A C-C...</code> 或者 <code>C-V,C-V,...</code>。然这种操作序列的结果不是最优的，但是我们并没有想办法规避这些情况的发生，从而增加了很多没必要的子问题计算。<br>回顾第二种解法，我们稍加思考就能想到，最优的序列应该是这种形式：<code>A,A..C-A,C-C,C-V,C-V..C-A,C-C,C-V..</code>。<br>根据这个事实，我们重新定义了状态，重新寻找了状态转移，从逻辑上减少了无效的子问题个数，从而提高了算法的效率。</p><p><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E6%8A%A2%E6%88%BF%E5%AD%90">上一篇：团灭 LeetCode 打家劫舍问题</a><br><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE">下一篇：动态规划之正则表达</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划之正则表达</title>
      <link href="2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE/"/>
      <url>2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE/</url>
      
        <content type="html"><![CDATA[<p>title: 动态规划之正则表达<br>author: 远方<br>tags:</p><ul><li>LeetCode</li><li>算法<br>categories:</li><li>LeetCode破局攻略<br>date: 2016-01-01 19:20:00</li></ul><hr><h1 id="动态规划之正则表达"><a href="#动态规划之正则表达" class="headerlink" title="动态规划之正则表达"></a>动态规划之正则表达</h1><p>之前的文章「动态规划详解」收到了普遍的好评，今天写一个动态规划的实际应用：正则表达式。如果有读者对「动态规划」还不了解，建议先看一下上面那篇文章。<br>正则表达式匹配是一个很精妙的算法，而且难度也不小。本文主要写两个正则符号的算法实现：点号「.」和星号「*」，如果你用过正则表达式，应该明白他们的用法，不明白也没关系，等会会介绍。文章的最后，介绍了一种快速看出重叠子问题的技巧。<br>本文还有一个重要目的，就是教会读者如何设计算法。我们平时看别人的解法，直接看到一个面面俱到的完整答案，总觉得无法理解，以至觉得问题太难，自己太菜。我力求向读者展示，算法的设计是一个螺旋上升、逐步求精的过程，绝不是一步到位就能写出正确算法。本文会带你解决这个较为复杂的问题，让你明白如何化繁为简，逐个击破，从最简单的框架搭建出最终的答案。<br>前文无数次强调的框架思维，就是在这种设计过程中逐步培养的。下面进入正题，首先看一下题目：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%AD%A3%E5%88%99/title.png" alt="title"></p><h3 id="一、热身"><a href="#一、热身" class="headerlink" title="一、热身"></a>一、热身</h3><p>第一步，我们暂时不管正则符号，如果是两个普通的字符串进行比较，如何进行匹配？我想这个算法应该谁都会写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isMatch</span><span class="hljs-params">(<span class="hljs-built_in">string</span> text, <span class="hljs-built_in">string</span> pattern)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (text.size() != pattern.size()) <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; pattern.size(); j++) &#123;<br>        <span class="hljs-keyword">if</span> (pattern[j] != text[j])<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，我稍微改造一下上面的代码，略微复杂了一点，但意思还是一样的，很容易理解吧：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isMatch</span><span class="hljs-params">(<span class="hljs-built_in">string</span> text, <span class="hljs-built_in">string</span> pattern)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; <span class="hljs-comment">// text 的索引位置</span><br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; <span class="hljs-comment">// pattern 的索引位置</span><br>    <span class="hljs-keyword">while</span> (j &lt; pattern.size()) &#123;<br>        <span class="hljs-keyword">if</span> (i &gt;= text.size()) <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (pattern[j++] != text[i++])<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">// 相等则说明完成匹配</span><br>    <span class="hljs-keyword">return</span> j == text.size();<br>&#125;<br></code></pre></td></tr></table></figure><p>如上改写，是为了将这个算法改造成递归算法（伪码）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isMatch</span>(<span class="hljs-params">text, pattern</span>) -&gt; bool:</span><br>    if pattern is empty: return (text is empty?)<br>    first_match = (text <span class="hljs-keyword">not</span> empty) <span class="hljs-keyword">and</span> pattern[<span class="hljs-number">0</span>] == text[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">return</span> first_match <span class="hljs-keyword">and</span> isMatch(text[<span class="hljs-number">1</span>:], pattern[<span class="hljs-number">1</span>:])<br></code></pre></td></tr></table></figure><p>如果你能够理解这段代码，恭喜你，你的递归思想已经到位，正则表达式算法虽然有点复杂，其实是基于这段递归代码逐步改造而成的。</p><h3 id="二、处理点号「-」通配符"><a href="#二、处理点号「-」通配符" class="headerlink" title="二、处理点号「.」通配符"></a>二、处理点号「.」通配符</h3><p>点号可以匹配任意一个字符，万金油嘛，其实是最简单的，稍加改造即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isMatch</span>(<span class="hljs-params">text, pattern</span>) -&gt; bool:</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pattern: <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> text<br>    first_match = bool(text) <span class="hljs-keyword">and</span> pattern[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> &#123;text[<span class="hljs-number">0</span>], <span class="hljs-string">&#x27;.&#x27;</span>&#125;<br>    <span class="hljs-keyword">return</span> first_match <span class="hljs-keyword">and</span> isMatch(text[<span class="hljs-number">1</span>:], pattern[<span class="hljs-number">1</span>:])<br></code></pre></td></tr></table></figure><h3 id="三、处理「-」通配符"><a href="#三、处理「-」通配符" class="headerlink" title="三、处理「*」通配符"></a>三、处理「*」通配符</h3><p>星号通配符可以让前一个字符重复任意次数，包括零次。那到底是重复几次呢？这似乎有点困难，不过不要着急，我们起码可以把框架的搭建再进一步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isMatch</span>(<span class="hljs-params">text, pattern</span>) -&gt; bool:</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pattern: <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> text<br>    first_match = bool(text) <span class="hljs-keyword">and</span> pattern[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> &#123;text[<span class="hljs-number">0</span>], <span class="hljs-string">&#x27;.&#x27;</span>&#125;<br>    <span class="hljs-keyword">if</span> len(pattern) &gt;= <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> pattern[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;*&#x27;</span>:<br>        <span class="hljs-comment"># 发现 &#x27;*&#x27; 通配符</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> first_match <span class="hljs-keyword">and</span> isMatch(text[<span class="hljs-number">1</span>:], pattern[<span class="hljs-number">1</span>:])<br></code></pre></td></tr></table></figure><p>星号前面的那个字符到底要重复几次呢？这需要计算机暴力穷举来算，假设重复 N 次吧。前文多次强调过，写递归的技巧是管好当下，之后的事抛给递归。具体到这里，不管 N 是多少，当前的选择只有两个：匹配 0 次、匹配 1 次。所以可以这样处理：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">if</span> len(pattern) &gt;= <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> pattern[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;*&#x27;</span>:<br>    <span class="hljs-keyword">return</span> isMatch(text, pattern[<span class="hljs-number">2</span>:]) <span class="hljs-keyword">or</span> \<br>            first_match <span class="hljs-keyword">and</span> isMatch(text[<span class="hljs-number">1</span>:], pattern)<br><span class="hljs-comment"># 解释：如果发现有字符和 &#x27;*&#x27; 结合，</span><br>    <span class="hljs-comment"># 或者匹配该字符 0 次，然后跳过该字符和 &#x27;*&#x27;</span><br>    <span class="hljs-comment"># 或者当 pattern[0] 和 text[0] 匹配后，移动 text</span><br></code></pre></td></tr></table></figure><p>可以看到，我们是通过保留 pattern 中的「*」，同时向后推移 text，来实现「*」将字符重复匹配多次的功能。举个简单的例子就能理解这个逻辑了。假设 <code>pattern = a*</code>, <code>text = aaa</code>，画个图看看匹配过程：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%AD%A3%E5%88%99/example.png" alt="example"><br>至此，正则表达式算法就基本完成了，</p><h3 id="四、动态规划"><a href="#四、动态规划" class="headerlink" title="四、动态规划"></a>四、动态规划</h3><p>我选择使用「备忘录」递归的方法来降低复杂度。有了暴力解法，优化的过程及其简单，就是使用两个变量 i, j 记录当前匹配到的位置，从而避免使用子字符串切片，并且将 i, j 存入备忘录，避免重复计算即可。<br>我将暴力解法和优化解法放在一起，方便你对比，你可以发现优化解法无非就是把暴力解法「翻译」了一遍，加了个 memo 作为备忘录，仅此而已。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 带备忘录的递归</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isMatch</span>(<span class="hljs-params">text, pattern</span>) -&gt; bool:</span><br>    memo = dict() <span class="hljs-comment"># 备忘录</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dp</span>(<span class="hljs-params">i, j</span>):</span><br>        <span class="hljs-keyword">if</span> (i, j) <span class="hljs-keyword">in</span> memo: <span class="hljs-keyword">return</span> memo[(i, j)]<br>        <span class="hljs-keyword">if</span> j == len(pattern): <span class="hljs-keyword">return</span> i == len(text)<br>        first = i &lt; len(text) <span class="hljs-keyword">and</span> pattern[j] <span class="hljs-keyword">in</span> &#123;text[i], <span class="hljs-string">&#x27;.&#x27;</span>&#125;<br>        <br>        <span class="hljs-keyword">if</span> j &lt;= len(pattern) - <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> pattern[j + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;*&#x27;</span>:<br>            ans = dp(i, j + <span class="hljs-number">2</span>) <span class="hljs-keyword">or</span> \<br>                    first <span class="hljs-keyword">and</span> dp(i + <span class="hljs-number">1</span>, j)<br>        <span class="hljs-keyword">else</span>:<br>            ans = first <span class="hljs-keyword">and</span> dp(i + <span class="hljs-number">1</span>, j + <span class="hljs-number">1</span>)<br>            <br>        memo[(i, j)] = ans<br>        <span class="hljs-keyword">return</span> ans<br>    <br>    <span class="hljs-keyword">return</span> dp(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br><span class="hljs-comment"># 暴力递归</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isMatch</span>(<span class="hljs-params">text, pattern</span>) -&gt; bool:</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pattern: <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> text<br>    first = bool(text) <span class="hljs-keyword">and</span> pattern[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> &#123;text[<span class="hljs-number">0</span>], <span class="hljs-string">&#x27;.&#x27;</span>&#125;<br>    <span class="hljs-keyword">if</span> len(pattern) &gt;= <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> pattern[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;*&#x27;</span>:<br>        <span class="hljs-keyword">return</span> isMatch(text, pattern[<span class="hljs-number">2</span>:]) <span class="hljs-keyword">or</span> \<br>                first <span class="hljs-keyword">and</span> isMatch(text[<span class="hljs-number">1</span>:], pattern)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> first <span class="hljs-keyword">and</span> isMatch(text[<span class="hljs-number">1</span>:], pattern[<span class="hljs-number">1</span>:])<br></code></pre></td></tr></table></figure><p><strong>有的读者也许会问，你怎么知道这个问题是个动态规划问题呢，你怎么知道它就存在「重叠子问题」呢，这似乎不容易看出来呀？</strong><br>解答这个问题，最直观的应该是随便假设一个输入，然后画递归树，肯定是可以发现相同节点的。这属于定量分析，其实不用这么麻烦，下面我来教你定性分析，一眼就能看出「重叠子问题」性质。<br>先拿最简单的斐波那契数列举例，我们抽象出递归算法的框架：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib</span>(<span class="hljs-params">n</span>):</span><br>    fib(n - <span class="hljs-number">1</span>) <span class="hljs-comment">#1</span><br>    fib(n - <span class="hljs-number">2</span>) <span class="hljs-comment">#2</span><br></code></pre></td></tr></table></figure><p>看着这个框架，请问原问题 f(n) 如何触达子问题 f(n - 2) ？有两种路径，一是 f(n) -&gt; #1 -&gt; #1, 二是 f(n) -&gt; #2。前者经过两次递归，后者进过一次递归而已。两条不同的计算路径都到达了同一个问题，这就是「重叠子问题」，而且可以肯定的是，<strong>只要你发现一条重复路径，这样的重复路径一定存在千万条，意味着巨量子问题重叠。</strong><br>同理，对于本问题，我们依然先抽象出算法框架：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dp</span>(<span class="hljs-params">i, j</span>):</span><br>    dp(i, j + <span class="hljs-number">2</span>)     <span class="hljs-comment">#1</span><br>    dp(i + <span class="hljs-number">1</span>, j)     <span class="hljs-comment">#2</span><br>    dp(i + <span class="hljs-number">1</span>, j + <span class="hljs-number">1</span>) <span class="hljs-comment">#3</span><br></code></pre></td></tr></table></figure><p>提出类似的问题，请问如何从原问题 dp(i, j) 触达子问题 dp(i + 2, j + 2) ？至少有两种路径，一是 dp(i, j) -&gt; #3 -&gt; #3，二是 dp(i, j) -&gt; #1 -&gt; #2 -&gt; #2。因此，本问题一定存在重叠子问题，一定需要动态规划的优化技巧来处理。</p><h3 id="五、最后总结"><a href="#五、最后总结" class="headerlink" title="五、最后总结"></a>五、最后总结</h3><p>通过本文，你深入理解了正则表达式的两种常用通配符的算法实现。其实点号「.」的实现及其简单，关键是星号「*」的实现需要用到动态规划技巧，稍微复杂些，但是也架不住我们对问题的层层拆解，逐个击破。另外，你掌握了一种快速分析「重叠子问题」性质的技巧，可以快速判断一个问题是否可以使用动态规划套路解决。<br>回顾整个解题过程，你应该能够体会到算法设计的流程：从简单的类似问题入手，给基本的框架逐渐组装新的逻辑，最终成为一个比较复杂、精巧的算法。所以说，读者不必畏惧一些比较复杂的算法问题，多思考多类比，再高大上的算法在你眼里也不过一个脆皮。</p><p><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E5%9B%9B%E9%94%AE%E9%94%AE%E7%9B%98">上一篇：动态规划之四键键盘</a><br><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97">下一篇：最长公共子序列</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划系列</title>
      <link href="2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/"/>
      <url>2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>title: 动态规划系列<br>author: 远方<br>tags:</p><ul><li>LeetCode</li><li>算法<br>categories:</li><li>LeetCode破局攻略<br>date: 2016-01-01 19:20:00</li></ul><hr><h1 id="动态规划系列"><a href="#动态规划系列" class="headerlink" title="动态规划系列"></a>动态规划系列</h1><ul><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3%E8%BF%9B%E9%98%B6">动态规划详解</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E6%9C%80%E4%BC%98%E5%AD%90%E7%BB%93%E6%9E%84">动态规划答疑篇</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AE%BE%E8%AE%A1%EF%BC%9A%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97">动态规划设计：最长递增子序列</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB">编辑距离</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E9%AB%98%E6%A5%BC%E6%89%94%E9%B8%A1%E8%9B%8B%E9%97%AE%E9%A2%98">经典动态规划问题：高楼扔鸡蛋</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E9%AB%98%E6%A5%BC%E6%89%94%E9%B8%A1%E8%9B%8B%E8%BF%9B%E9%98%B6">经典动态规划问题：高楼扔鸡蛋（进阶）</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%E6%A8%A1%E6%9D%BF">动态规划之子序列问题解题模板</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E5%8D%9A%E5%BC%88%E9%97%AE%E9%A2%98">动态规划之博弈问题</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E4%B9%8B%E5%8C%BA%E9%97%B4%E8%B0%83%E5%BA%A6%E9%97%AE%E9%A2%98">贪心算法之区间调度问题</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8BKMP%E5%AD%97%E7%AC%A6%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95">动态规划之KMP字符匹配算法</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%9B%A2%E7%81%AD%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98">团灭 LeetCode 股票买卖问题</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E6%8A%A2%E6%88%BF%E5%AD%90">团灭 LeetCode 打家劫舍问题</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E5%9B%9B%E9%94%AE%E9%94%AE%E7%9B%98">动态规划之四键键盘</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE">动态规划之正则表达</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97">最长公共子序列</a></li></ul><p>我们公众号最火的就是动态规划系列的文章，也许是动态规划问题有难度而且有意思，也许因为它是面试常考题型。不管你之前是否害怕动态规划系列的问题，相信这一章的内容足以帮助你消除对动态规划算法的恐惧。<br>具体来说，动态规划的一般流程就是三步：<strong>暴力的递归解法 -&gt; 带备忘录的递归解法 -&gt; 迭代的动态规划解法</strong>。<br>就思考流程来说，就分为一下几步：<strong>找到状态和选择 -&gt; 明确 dp 数组/函数的定义 -&gt; 寻找状态之间的关系</strong>。<br>这就是思维模式的框架，<strong>本章都会按照以上的模式来解决问题，辅助读者养成这种模式思维</strong>，有了方向遇到问题就不会抓瞎，足以解决一般的动态规划问题。</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划设计：最长递增子序列</title>
      <link href="2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AE%BE%E8%AE%A1%EF%BC%9A%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/"/>
      <url>2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AE%BE%E8%AE%A1%EF%BC%9A%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>title: 动态规划设计：最长递增子序列<br>author: 远方<br>tags:</p><ul><li>LeetCode</li><li>算法<br>categories:</li><li>LeetCode破局攻略<br>date: 2016-01-01 19:20:00</li></ul><hr><h1 id="动态规划设计：最长递增子序列"><a href="#动态规划设计：最长递增子序列" class="headerlink" title="动态规划设计：最长递增子序列"></a>动态规划设计：最长递增子序列</h1><p>很多读者反应，就算看了前文<a href="%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3%E8%BF%9B%E9%98%B6">动态规划详解</a>，了解了动态规划的套路，也不会写状态转移方程，没有思路，怎么办？本文就借助「最长递增子序列」来讲一种设计动态规划的通用技巧：数学归纳思想。<br>最长递增子序列（Longest Increasing Subsequence，简写 LIS）是比较经典的一个问题，比较容易想到的是动态规划解法，时间复杂度 O(N^2)，我们借这个问题来由浅入深讲解如何写动态规划。比较难想到的是利用二分查找，时间复杂度是 O(NlogN)，我们通过一种简单的纸牌游戏来辅助理解这种巧妙的解法。<br>先看一下题目，很容易理解：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/title.png" alt="title"><br>注意「子序列」和「子串」这两个名词的区别，子串一定是连续的，而子序列不一定是连续的。下面先来一步一步设计动态规划算法解决这个问题。</p><h3 id="一、动态规划解法"><a href="#一、动态规划解法" class="headerlink" title="一、动态规划解法"></a>一、动态规划解法</h3><p>动态规划的核心设计思想是数学归纳法。<br>相信大家对数学归纳法都不陌生，高中就学过，而且思路很简单。比如我们想证明一个数学结论，那么我们先假设这个结论在 $k&lt;n$ 时成立，然后想办法证明 $k=n$ 的时候此结论也成立。如果能够证明出来，那么就说明这个结论对于 k 等于任何数都成立。<br>类似的，我们设计动态规划算法，不是需要一个 dp 数组吗？我们可以假设 $dp[0…i-1]$ 都已经被算出来了，然后问自己：怎么通过这些结果算出 dp[i]？<br>直接拿最长递增子序列这个问题举例你就明白了。不过，首先要定义清楚 dp 数组的含义，即 dp[i] 的值到底代表着什么？<br><strong>我们的定义是这样的：dp[i] 表示以 nums[i] 这个数结尾的最长递增子序列的长度。</strong><br>举两个例子：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/1.jpeg" alt="1"></p><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/2.jpeg" alt="2"><br>算法演进的过程是这样的，：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/gif1.gif" alt="gif1"><br>根据这个定义，我们的最终结果（子序列的最大长度）应该是 dp 数组中的最大值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; dp.size(); i++) &#123;<br>    res = Math.max(res, dp[i]);<br>&#125;<br><span class="hljs-keyword">return</span> res;<br></code></pre></td></tr></table></figure><p>读者也许会问，刚才这个过程中每个 dp[i] 的结果是我们肉眼看出来的，我们应该怎么设计算法逻辑来正确计算每个 dp[i] 呢？<br>这就是动态规划的重头戏了，要思考如何进行状态转移，这里就可以使用数学归纳的思想：<br>我们已经知道了 $dp[0…4]$ 的所有结果，我们如何通过这些已知结果推出 $dp[5]$ 呢？<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/3.jpeg" alt="3"><br>根据刚才我们对 dp 数组的定义，现在想求 dp[5] 的值，也就是想求以 nums[5] 为结尾的最长递增子序列。<br>nums[5] = 3，既然是递增子序列，我们只要找到前面那些结尾比 3 小的子序列，然后把 3 接到最后，就可以形成一个新的递增子序列，而且这个新的子序列长度加一。<br>当然，可能形成很多种新的子序列，但是我们只要最长的，把最长子序列的长度作为 dp[5] 的值即可。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/gif2.gif" alt="gif2"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>    <span class="hljs-keyword">if</span> (nums[i] &gt; nums[j]) <br>        dp[i] = Math.max(dp[i], dp[j] + <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码的逻辑就可以算出 dp[5]。到这里，这道算法题我们就基本做完了。读者也许会问，我们刚才只是算了 dp[5] 呀，dp[4], dp[3] 这些怎么算呢？<br>类似数学归纳法，你已经可以算出 dp[5] 了，其他的就都可以算出来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>        <span class="hljs-keyword">if</span> (nums[i] &gt; nums[j]) <br>            dp[i] = Math.max(dp[i], dp[j] + <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>还有一个细节问题，dp 数组应该全部初始化为 1，因为子序列最少也要包含自己，所以长度最小为 1。下面我们看一下完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLIS</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nums.length];<br>    <span class="hljs-comment">// dp 数组全都初始化为 1</span><br>    Arrays.fill(dp, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] &gt; nums[j]) <br>                dp[i] = Math.max(dp[i], dp[j] + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; dp.length; i++) &#123;<br>        res = Math.max(res, dp[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，这道题就解决了，时间复杂度 O(N^2)。总结一下动态规划的设计流程：<br>首先明确 dp 数组所存数据的含义。这步很重要，如果不得当或者不够清晰，会阻碍之后的步骤。<br>然后根据 dp 数组的定义，运用数学归纳法的思想，假设 $dp[0…i-1]$ 都已知，想办法求出 $dp[i]$，一旦这一步完成，整个题目基本就解决了。<br>但如果无法完成这一步，很可能就是 dp 数组的定义不够恰当，需要重新定义 dp 数组的含义；或者可能是 dp 数组存储的信息还不够，不足以推出下一步的答案，需要把 dp 数组扩大成二维数组甚至三维数组。<br>最后想一想问题的 base case 是什么，以此来初始化 dp 数组，以保证算法正确运行。</p><h3 id="二、二分查找解法"><a href="#二、二分查找解法" class="headerlink" title="二、二分查找解法"></a>二、二分查找解法</h3><p>这个解法的时间复杂度会将为 O(NlogN)，但是说实话，正常人基本想不到这种解法（也许玩过某些纸牌游戏的人可以想出来）。所以如果大家了解一下就好，正常情况下能够给出动态规划解法就已经很不错了。<br>根据题目的意思，我都很难想象这个问题竟然能和二分查找扯上关系。其实最长递增子序列和一种叫做 patience game 的纸牌游戏有关，甚至有一种排序方法就叫做 patience sorting（耐心排序）。<br>为了简单期间，后文跳过所有数学证明，通过一个简化的例子来理解一下思路。<br>首先，给你一排扑克牌，我们像遍历数组那样从左到右一张一张处理这些扑克牌，最终要把这些牌分成若干堆。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/poker1.jpeg" alt="poker1"><br>处理这些扑克牌要遵循以下规则：<br>只能把点数小的牌压到点数比它大的牌上。如果当前牌点数较大没有可以放置的堆，则新建一个堆，把这张牌放进去。如果当前牌有多个堆可供选择，则选择最左边的堆放置。<br>比如说上述的扑克牌最终会被分成这样 5 堆（我们认为 A 的值是最大的，而不是 1）。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/poker2.jpeg" alt="poker2"><br>为什么遇到多个可选择堆的时候要放到最左边的堆上呢？因为这样可以保证牌堆顶的牌有序（2, 4, 7, 8, Q），证明略。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/poker3.jpeg" alt="poker3"><br>按照上述规则执行，可以算出最长递增子序列，牌的堆数就是最长递增子序列的长度，证明略。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/poker4.jpeg" alt="LIS"><br>我们只要把处理扑克牌的过程编程写出来即可。每次处理一张扑克牌不是要找一个合适的牌堆顶来放吗，牌堆顶的牌不是有序吗，这就能用到二分查找了：用二分查找来搜索当前牌应放置的位置。<br>PS：旧文<a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E8%AF%A6%E8%A7%A3">二分查找算法详解</a>详细介绍了二分查找的细节及变体，这里就完美应用上了。如果没读过强烈建议阅读。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLIS</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] top = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nums.length];<br>    <span class="hljs-comment">// 牌堆数初始化为 0</span><br>    <span class="hljs-keyword">int</span> piles = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        <span class="hljs-comment">// 要处理的扑克牌</span><br>        <span class="hljs-keyword">int</span> poker = nums[i];<br>        <span class="hljs-comment">/***** 搜索左侧边界的二分查找 *****/</span><br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = piles;<br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            <span class="hljs-keyword">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (top[mid] &gt; poker) &#123;<br>                right = mid;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (top[mid] &lt; poker) &#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                right = mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">/*********************************/</span><br>        <br>        <span class="hljs-comment">// 没找到合适的牌堆，新建一堆</span><br>        <span class="hljs-keyword">if</span> (left == piles) piles++;<br>        <span class="hljs-comment">// 把这张牌放到牌堆顶</span><br>        top[left] = poker;<br>    &#125;<br>    <span class="hljs-comment">// 牌堆数就是 LIS 长度</span><br>    <span class="hljs-keyword">return</span> piles;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，二分查找的解法也讲解完毕。<br>这个解法确实很难想到。首先涉及数学证明，谁能想到按照这些规则执行，就能得到最长递增子序列呢？其次还有二分查找的运用，要是对二分查找的细节不清楚，给了思路也很难写对。<br>所以，这个方法作为思维拓展好了。但动态规划的设计方法应该完全理解：假设之前的答案已知，利用数学归纳的思想正确进行状态的推演转移，最终得到答案。</p><p><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E6%9C%80%E4%BC%98%E5%AD%90%E7%BB%93%E6%9E%84">上一篇：动态规划答疑篇</a><br><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB">下一篇：编辑距离</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>子序列问题模板</title>
      <link href="2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%E6%A8%A1%E6%9D%BF/"/>
      <url>2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>title: 子序列问题模板<br>author: 远方<br>tags:</p><ul><li>LeetCode</li><li>算法<br>categories:</li><li>LeetCode破局攻略<br>date: 2016-01-01 19:20:00</li></ul><hr><h1 id="动态规划之子序列问题解题模板"><a href="#动态规划之子序列问题解题模板" class="headerlink" title="动态规划之子序列问题解题模板"></a>动态规划之子序列问题解题模板</h1><p>子序列问题是常见的算法问题，而且并不好解决。<br>首先，子序列问题本身就相对子串、子数组更困难一些，因为前者是不连续的序列，而后两者是连续的，就算穷举你都不一定会，更别说求解相关的算法问题了。<br>而且，子序列问题很可能涉及到两个字符串，比如前文「最长公共子序列」，如果没有一定的处理经验，真的不容易想出来。所以本文就来扒一扒子序列问题的套路，其实就有两种模板，相关问题只要往这两种思路上想，十拿九稳。<br>一般来说，这类问题都是让你求一个<strong>最长子序列</strong>，因为最短子序列就是一个字符嘛，没啥可问的。一旦涉及到子序列和最值，那几乎可以肯定，**考察的是动态规划技巧，时间复杂度一般都是 O(n^2)**。<br>原因很简单，你想想一个字符串，它的子序列有多少种可能？起码是指数级的吧，这种情况下，不用动态规划技巧，还想怎么着？<br>既然要用动态规划，那就要定义 dp 数组，找状态转移关系。我们说的两种思路模板，就是 dp 数组的定义思路。不同的问题可能需要不同的 dp 数组定义来解决。</p><h3 id="一、两种思路"><a href="#一、两种思路" class="headerlink" title="一、两种思路"></a>一、两种思路</h3><p><strong>1、第一种思路模板是一个一维的 dp 数组</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> n = array.length;<br><span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>        dp[i] = 最值(dp[i], dp[j] + ...)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>举个我们写过的例子「最长递增子序列」，在这个思路中 dp 数组的定义是：<br><strong>在子数组 <code>array[0..i]</code> 中，我们要求的子序列（最长递增子序列）的长度是 <code>dp[i]</code>**。<br>为啥最长递增子序列需要这种思路呢？前文说得很清楚了，因为这样符合归纳法，可以找到状态转移的关系，这里就不具体展开了。<br>**2、第二种思路模板是一个二维的 dp 数组</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> n = arr.length;<br><span class="hljs-keyword">int</span>[][] dp = <span class="hljs-keyword">new</span> dp[n][n];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>        <span class="hljs-keyword">if</span> (arr[i] == arr[j]) <br>            dp[i][j] = dp[i][j] + ...<br>        <span class="hljs-keyword">else</span><br>            dp[i][j] = 最值(...)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种思路运用相对更多一些，尤其是涉及两个字符串/数组的子序列，比如前文讲的「最长公共子序列」。本思路中 dp 数组含义又分为「只涉及一个字符串」和「涉及两个字符串」两种情况。<br><strong>2.1 涉及两个字符串/数组时</strong>（比如最长公共子序列），dp 数组的含义如下：<br><strong>在子数组 <code>arr1[0..i]</code> 和子数组 <code>arr2[0..j]</code> 中，我们要求的子序列（最长公共子序列）长度为 <code>dp[i][j]</code>**。<br>**2.2 只涉及一个字符串/数组时</strong>（比如本文要讲的最长回文子序列），dp 数组的含义如下：<br>**在子数组 <code>array[i..j]</code> 中，我们要求的子序列（最长回文子序列）的长度为 <code>dp[i][j]</code>**。<br>第一种情况可以参考这两篇旧文：「编辑距离」「公共子序列」<br>下面就借最长回文子序列这个问题，详解一下第二种情况下如何使用动态规划。</p><h3 id="二、最长回文子序列"><a href="#二、最长回文子序列" class="headerlink" title="二、最长回文子序列"></a>二、最长回文子序列</h3><p>之前解决了「最长回文子串」的问题，这次提升难度，求最长回文子序列的长度：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/1.jpg"><br>我们说这个问题对 dp 数组的定义是：<strong>在子串 <code>s[i..j]</code> 中，最长回文子序列的长度为 <code>dp[i][j]</code>**。一定要记住这个定义才能理解算法。<br>为啥这个问题要这样定义二维的 dp 数组呢？我们前文多次提到，</strong>找状态转移需要归纳思维，说白了就是如何从已知的结果推出未知的部分<strong>，这样定义容易归纳，容易发现状态转移关系。<br>具体来说，如果我们想求 <code>dp[i][j]</code>，假设你知道了子问题 <code>dp[i+1][j-1]</code> 的结果（<code>s[i+1..j-1]</code> 中最长回文子序列的长度），你是否能想办法算出 <code>dp[i][j]</code> 的值（<code>s[i..j]</code> 中，最长回文子序列的长度）呢？<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/1.jpg"><br>可以！这取决于 <code>s[i]</code> 和 <code>s[j]</code> 的字符：<br>**如果它俩相等</strong>，那么它俩加上 <code>s[i+1..j-1]</code> 中的最长回文子序列就是 <code>s[i..j]</code> 的最长回文子序列：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/2.jpg"><br><strong>如果它俩不相等</strong>，说明它俩<strong>不可能同时</strong>出现在 <code>s[i..j]</code> 的最长回文子序列中，那么把它俩<strong>分别</strong>加入 <code>s[i+1..j-1]</code> 中，看看哪个子串产生的回文子序列更长即可：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/3.jpg"><br>以上两种情况写成代码就是这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (s[i] == s[j])<br>    <span class="hljs-comment">// 它俩一定在最长回文子序列中</span><br>    dp[i][j] = dp[i + <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">2</span>;<br><span class="hljs-keyword">else</span><br>    <span class="hljs-comment">// s[i+1..j] 和 s[i..j-1] 谁的回文子序列更长？</span><br>    dp[i][j] = max(dp[i + <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>]);<br></code></pre></td></tr></table></figure><p>至此，状态转移方程就写出来了，根据 dp 数组的定义，我们要求的就是 <code>dp[0][n - 1]</code>，也就是整个 <code>s</code> 的最长回文子序列的长度。</p><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><p>首先明确一下 base case，如果只有一个字符，显然最长回文子序列长度是 1，也就是 <code>dp[i][j] = 1 (i == j)</code>。<br>因为 <code>i</code> 肯定小于等于 <code>j</code>，所以对于那些 <code>i &gt; j</code> 的位置，根本不存在什么子序列，应该初始化为 0。<br>另外，看看刚才写的状态转移方程，想求 <code>dp[i][j]</code> 需要知道 <code>dp[i+1][j-1]</code>，<code>dp[i+1][j]</code>，<code>dp[i][j-1]</code> 这三个位置；再看看我们确定的 base case，填入 dp 数组之后是这样：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/4.jpg"><br><strong>为了保证每次计算 <code>dp[i][j]</code>，左下右方向的位置已经被计算出来，只能斜着遍历或者反着遍历</strong>：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/5.jpg"><br>我选择反着遍历，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">longestPalindromeSubseq</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = s.size();<br>    <span class="hljs-comment">// dp 数组全部初始化为 0</span><br>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;(n, <span class="hljs-number">0</span>))</span></span>;<br>    <span class="hljs-comment">// base case</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        dp[i][i] = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 反着遍历保证正确的状态转移</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>            <span class="hljs-comment">// 状态转移方程</span><br>            <span class="hljs-keyword">if</span> (s[i] == s[j])<br>                dp[i][j] = dp[i + <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">else</span><br>                dp[i][j] = max(dp[i + <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 整个 s 的最长回文子串长度</span><br>    <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][n - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，最长回文子序列的问题就解决了。</p><p><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E9%AB%98%E6%A5%BC%E6%89%94%E9%B8%A1%E8%9B%8B%E8%BF%9B%E9%98%B6">上一篇：经典动态规划问题：高楼扔鸡蛋（进阶）</a><br><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E5%8D%9A%E5%BC%88%E9%97%AE%E9%A2%98">下一篇：动态规划之博弈问题</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抢房子</title>
      <link href="2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E6%8A%A2%E6%88%BF%E5%AD%90/"/>
      <url>2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E6%8A%A2%E6%88%BF%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>title: 抢房子<br>author: 远方<br>tags:</p><ul><li>LeetCode</li><li>算法<br>categories:</li><li>LeetCode破局攻略<br>date: 2016-01-01 19:20:00</li></ul><hr><h1 id="团灭-LeetCode-打家劫舍问题"><a href="#团灭-LeetCode-打家劫舍问题" class="headerlink" title="团灭 LeetCode 打家劫舍问题"></a>团灭 LeetCode 打家劫舍问题</h1><p>有读者私下问我 LeetCode 「打家劫舍」系列问题（英文版叫 House Robber）怎么做，我发现这一系列题目的点赞非常之高，是比较有代表性和技巧性的动态规划题目，今天就来聊聊这道题目。<br>打家劫舍系列总共有三道，难度设计非常合理，层层递进。第一道是比较标准的动态规划问题，而第二道融入了环形数组的条件，第三道更绝，把动态规划的自底向上和自顶向下解法和二叉树结合起来，我认为很有启发性。如果没做过的朋友，建议学习一下。<br>下面，我们从第一道开始分析。</p><h3 id="House-Robber-I"><a href="#House-Robber-I" class="headerlink" title="House Robber I"></a>House Robber I</h3><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/robber/title.png" alt="title"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span></span>;<br></code></pre></td></tr></table></figure><p>题目很容易理解，而且动态规划的特征很明显。我们前文「动态规划详解」做过总结，<strong>解决动态规划问题就是找「状态」和「选择」，仅此而已</strong>。<br>假想你就是这个专业强盗，从左到右走过这一排房子，在每间房子前都有两种<strong>选择</strong>：抢或者不抢。<br>如果你抢了这间房子，那么你<strong>肯定</strong>不能抢相邻的下一间房子了，只能从下下间房子开始做选择。<br>如果你不抢这件房子，那么你可以走到下一间房子前，继续做选择。<br>当你走过了最后一间房子后，你就没得抢了，能抢到的钱显然是 0（<strong>base case</strong>）。<br>以上的逻辑很简单吧，其实已经明确了「状态」和「选择」：<strong>你面前房子的索引就是状态，抢和不抢就是选择</strong>。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/robber/1.jpg" alt="1"><br>在两个选择中，每次都选更大的结果，最后得到的就是最多能抢到的 money：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 主函数</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> dp(nums, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-comment">// 返回 nums[start..] 能抢到的最大值</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> start)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (start &gt;= nums.length) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span> res = Math.max(<br>            <span class="hljs-comment">// 不抢，去下家</span><br>            dp(nums, start + <span class="hljs-number">1</span>), <br>            <span class="hljs-comment">// 抢，去下下家</span><br>            nums[start] + dp(nums, start + <span class="hljs-number">2</span>)<br>        );<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>明确了状态转移，就可以发现对于同一 <code>start</code> 位置，是存在重叠子问题的，比如下图：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/robber/2.jpg" alt="2"><br>盗贼有多种选择可以走到这个位置，如果每次到这都进入递归，岂不是浪费时间？所以说存在重叠子问题，可以用备忘录进行优化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] memo;<br><span class="hljs-comment">// 主函数</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-comment">// 初始化备忘录</span><br>    memo = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nums.length];<br>    Arrays.fill(memo, -<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 强盗从第 0 间房子开始抢劫</span><br>    <span class="hljs-keyword">return</span> dp(nums, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-comment">// 返回 dp[start..] 能抢到的最大值</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> start)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (start &gt;= nums.length) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 避免重复计算</span><br>    <span class="hljs-keyword">if</span> (memo[start] != -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> memo[start];<br>    <br>    <span class="hljs-keyword">int</span> res = Math.max(dp(nums, start + <span class="hljs-number">1</span>), <br>                    nums[start] + dp(nums, start + <span class="hljs-number">2</span>));<br>    <span class="hljs-comment">// 记入备忘录</span><br>    memo[start] = res;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>这就是自顶向下的动态规划解法，我们也可以略作修改，写出<strong>自底向上</strong>的解法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = nums.length;<br>    <span class="hljs-comment">// dp[i] = x 表示：</span><br>    <span class="hljs-comment">// 从第 i 间房子开始抢劫，最多能抢到的钱为 x</span><br>    <span class="hljs-comment">// base case: dp[n] = 0</span><br>    <span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n + <span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        dp[i] = Math.max(dp[i + <span class="hljs-number">1</span>], nums[i] + dp[i + <span class="hljs-number">2</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>我们又发现状态转移只和 <code>dp[i]</code> 最近的两个状态有关，所以可以进一步优化，将空间复杂度降低到 O(1)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = nums.length;<br>    <span class="hljs-comment">// 记录 dp[i+1] 和 dp[i+2]</span><br>    <span class="hljs-keyword">int</span> dp_i_1 = <span class="hljs-number">0</span>, dp_i_2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 记录 dp[i]</span><br>    <span class="hljs-keyword">int</span> dp_i = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        dp_i = Math.max(dp_i_1, nums[i] + dp_i_2);<br>        dp_i_2 = dp_i_1;<br>        dp_i_1 = dp_i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp_i;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上的流程，在我们「动态规划详解」中详细解释过，相信大家都能手到擒来了。我认为很有意思的是这个问题的 follow up，需要基于我们现在的思路做一些巧妙的应变。</p><h3 id="House-Robber-II"><a href="#House-Robber-II" class="headerlink" title="House Robber II"></a>House Robber II</h3><p>这道题目和第一道描述基本一样，强盗依然不能抢劫相邻的房子，输入依然是一个数组，但是告诉你<strong>这些房子不是一排，而是围成了一个圈</strong>。<br>也就是说，现在第一间房子和最后一间房子也相当于是相邻的，不能同时抢。比如说输入数组 <code>nums=[2,3,2]</code>，算法返回的结果应该是 3 而不是 4，因为开头和结尾不能同时被抢。<br>这个约束条件看起来应该不难解决，我们前文「单调栈解决 Next Greater Number」说过一种解决环形数组的方案，那么在这个问题上怎么处理呢？<br>首先，首尾房间不能同时被抢，那么只可能有三种不同情况：要么都不被抢；要么第一间房子被抢最后一间不抢；要么最后一间房子被抢第一间不抢。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/robber/3.jpg" alt="3"><br>那就简单了啊，这三种情况，那种的结果最大，就是最终答案呗！不过，其实我们不需要比较三种情况，只要比较情况二和情况三就行了，<strong>因为这两种情况对于房子的选择余地比情况一大呀，房子里的钱数都是非负数，所以选择余地大，最优决策结果肯定不会小</strong>。<br>所以只需对之前的解法稍作修改即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = nums.length;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">return</span> Math.max(robRange(nums, <span class="hljs-number">0</span>, n - <span class="hljs-number">2</span>), <br>                    robRange(nums, <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>));<br>&#125;<br><span class="hljs-comment">// 仅计算闭区间 [start,end] 的最优结果</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">robRange</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = nums.length;<br>    <span class="hljs-keyword">int</span> dp_i_1 = <span class="hljs-number">0</span>, dp_i_2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> dp_i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = end; i &gt;= start; i--) &#123;<br>        dp_i = Math.max(dp_i_1, nums[i] + dp_i_2);<br>        dp_i_2 = dp_i_1;<br>        dp_i_1 = dp_i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp_i;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，第二问也解决了。</p><h3 id="House-Robber-III"><a href="#House-Robber-III" class="headerlink" title="House Robber III"></a>House Robber III</h3><p>第三题又想法设法地变花样了，此强盗发现现在面对的房子不是一排，不是一圈，而是一棵二叉树！房子在二叉树的节点上，相连的两个房子不能同时被抢劫，果然是传说中的高智商犯罪：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/robber/title1.png" alt="title"><br>整体的思路完全没变，还是做抢或者不抢的选择，去收益较大的选择。甚至我们可以直接按这个套路写出代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;TreeNode, Integer&gt; memo = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 利用备忘录消除重叠子问题</span><br>    <span class="hljs-keyword">if</span> (memo.containsKey(root)) <br>        <span class="hljs-keyword">return</span> memo.get(root);<br>    <span class="hljs-comment">// 抢，然后去下下家</span><br>    <span class="hljs-keyword">int</span> do_it = root.val<br>        + (root.left == <span class="hljs-keyword">null</span> ? <br>            <span class="hljs-number">0</span> : rob(root.left.left) + rob(root.left.right))<br>        + (root.right == <span class="hljs-keyword">null</span> ? <br>            <span class="hljs-number">0</span> : rob(root.right.left) + rob(root.right.right));<br>    <span class="hljs-comment">// 不抢，然后去下家</span><br>    <span class="hljs-keyword">int</span> not_do = rob(root.left) + rob(root.right);<br>    <br>    <span class="hljs-keyword">int</span> res = Math.max(do_it, not_do);<br>    memo.put(root, res);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>这道题就解决了，时间复杂度 O(N)，<code>N</code> 为数的节点数。<br>但是这道题让我觉得巧妙的点在于，还有更漂亮的解法。比如下面是我在评论区看到的一个解法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] res = dp(root);<br>    <span class="hljs-keyword">return</span> Math.max(res[<span class="hljs-number">0</span>], res[<span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-comment">/* 返回一个大小为 2 的数组 arr</span><br><span class="hljs-comment">arr[0] 表示不抢 root 的话，得到的最大钱数</span><br><span class="hljs-comment">arr[1] 表示抢 root 的话，得到的最大钱数 */</span><br><span class="hljs-keyword">int</span>[] dp(TreeNode root) &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">int</span>[] left = dp(root.left);<br>    <span class="hljs-keyword">int</span>[] right = dp(root.right);<br>    <span class="hljs-comment">// 抢，下家就不能抢了</span><br>    <span class="hljs-keyword">int</span> rob = root.val + left[<span class="hljs-number">0</span>] + right[<span class="hljs-number">0</span>];<br>    <span class="hljs-comment">// 不抢，下家可抢可不抢，取决于收益大小</span><br>    <span class="hljs-keyword">int</span> not_rob = Math.max(left[<span class="hljs-number">0</span>], left[<span class="hljs-number">1</span>])<br>                + Math.max(right[<span class="hljs-number">0</span>], right[<span class="hljs-number">1</span>]);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;not_rob, rob&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度 O(N)，空间复杂度只有递归函数堆栈所需的空间，不需要备忘录的额外空间。<br>你看他和我们的思路不一样，修改了递归函数的定义，略微修改了思路，使得逻辑自洽，依然得到了正确的答案，而且代码更漂亮。这就是我们前文「不同定义产生不同解法」所说过的动态规划问题的一个特性。<br>实际上，这个解法比我们的解法运行时间要快得多，虽然算法分析层面时间复杂度是相同的。原因在于此解法没有使用额外的备忘录，减少了数据操作的复杂性，所以实际运行效率会快。</p><p><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%9B%A2%E7%81%AD%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98">上一篇：团灭 LeetCode 股票买卖问题</a><br><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E5%9B%9B%E9%94%AE%E9%94%AE%E7%9B%98">下一篇：动态规划之四键键盘</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最优子结构</title>
      <link href="2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E6%9C%80%E4%BC%98%E5%AD%90%E7%BB%93%E6%9E%84/"/>
      <url>2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E6%9C%80%E4%BC%98%E5%AD%90%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>title: 最优子结构<br>author: 远方<br>tags:</p><ul><li>LeetCode</li><li>算法<br>categories:</li><li>LeetCode破局攻略<h1 id="动态规划答疑篇"><a href="#动态规划答疑篇" class="headerlink" title="动态规划答疑篇"></a>动态规划答疑篇</h1>这篇文章就给你讲明白两个问题：<br>1、到底什么才叫「最优子结构」，和动态规划什么关系。<br>2、为什么动态规划遍历 <code>dp</code> 数组的方式五花八门，有的正着遍历，有的倒着遍历，有的斜着遍历。<h3 id="一、最优子结构详解"><a href="#一、最优子结构详解" class="headerlink" title="一、最优子结构详解"></a>一、最优子结构详解</h3>「最优子结构」是某些问题的一种特定性质，并不是动态规划问题专有的。也就是说，很多问题其实都具有最优子结构，只是其中大部分不具有重叠子问题，所以我们不把它们归为动态规划系列问题而已。<br>我先举个很容易理解的例子：假设你们学校有 10 个班，你已经计算出了每个班的最高考试成绩。那么现在我要求你计算全校最高的成绩，你会不会算？当然会，而且你不用重新遍历全校学生的分数进行比较，而是只要在这 10 个最高成绩中取最大的就是全校的最高成绩。<br>我给你提出的这个问题就<strong>符合最优子结构</strong>：可以从子问题的最优结果推出更大规模问题的最优结果。让你算<strong>每个班</strong>的最优成绩就是子问题，你知道所有子问题的答案后，就可以借此推出<strong>全校</strong>学生的最优成绩这个规模更大的问题的答案。<br>你看，这么简单的问题都有最优子结构性质，只是因为显然没有重叠子问题，所以我们简单地求最值肯定用不出动态规划。<br>再举个例子：假设你们学校有 10 个班，你已知每个班的最大分数差（最高分和最低分的差值）。那么现在我让你计算全校学生中的最大分数差，你会不会算？可以想办法算，但是肯定不能通过已知的这 10 个班的最大分数差推到出来。因为这 10 个班的最大分数差不一定就包含全校学生的最大分数差，比如全校的最大分数差可能是 3 班的最高分和 6 班的最低分之差。<br>这次我给你提出的问题就<strong>不符合最优子结构</strong>，因为你没办通过每个班的最优值推出全校的最优值，没办法通过子问题的最优值推出规模更大的问题的最优值。前文「动态规划详解」说过，想满足最优子结，子问题之间必须互相独立。全校的最大分数差可能出现在两个班之间，显然子问题不独立，所以这个问题本身不符合最优子结构。<br><strong>那么遇到这种最优子结构失效情况，怎么办？策略是：改造问题</strong>。对于最大分数差这个问题，我们不是没办法利用已知的每个班的分数差吗，那我只能这样写一段暴力代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (Student a : school) &#123;<br>    <span class="hljs-keyword">for</span> (Student b : school) &#123;<br>        <span class="hljs-keyword">if</span> (a is b) <span class="hljs-keyword">continue</span>;<br>        result = max(result, |a.score - b.score|);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">return</span> result;<br></code></pre></td></tr></table></figure>改造问题，也就是把问题等价转化：最大分数差，不就等价于最高分数和最低分数的差么，那不就是要求最高和最低分数么，不就是我们讨论的第一个问题么，不就具有最优子结构了么？那现在改变思路，借助最优子结构解决最值问题，再回过头解决最大分数差问题，是不是就高效多了？<br>当然，上面这个例子太简单了，不过请读者回顾一下，我们做动态规划问题，是不是一直在求各种最值，本质跟我们举的例子没啥区别，无非需要处理一下重叠子问题。<br>前文「不同定义不同解法」和「高楼扔鸡蛋进阶」就展示了如何改造问题，不同的最优子结构，可能导致不同的解法和效率。<br>再举个常见但也十分简单的例子，求一棵二叉树的最大值，不难吧（简单起见，假设节点中的值都是非负数）：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxVal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> left = maxVal(root.left);<br>    <span class="hljs-keyword">int</span> right = maxVal(root.right);<br>    <span class="hljs-keyword">return</span> max(root.val, left, right);<br>&#125;<br></code></pre></td></tr></table></figure>你看这个问题也符合最优子结构，以 <code>root</code> 为根的树的最大值，可以通过两边子树（子问题）的最大值推导出来，结合刚才学校和班级的例子，很容易理解吧。<br>当然这也不是动态规划问题，旨在说明，最优子结构并不是动态规划独有的一种性质，能求最值的问题大部分都具有这个性质；<strong>但反过来，最优子结构性质作为动态规划问题的必要条件，一定是让你求最值的</strong>，以后碰到那种恶心人的最值题，思路往动态规划想就对了，这就是套路。<br>动态规划不就是从最简单的 base case 往后推导吗，可以想象成一个链式反应，以小博大。但只有符合最优子结构的问题，才有发生这种链式反应的性质。<br>找最优子结构的过程，其实就是证明状态转移方程正确性的过程，方程符合最优子结构就可以写暴力解了，写出暴力解就可以看出有没有重叠子问题了，有则优化，无则 OK。这也是套路，经常刷题的朋友应该能体会。<br>这里就不举那些正宗动态规划的例子了，读者可以翻翻历史文章，看看状态转移是如何遵循最优子结构的，这个话题就聊到这，下面再来看另外个动态规划迷惑行为。<h3 id="二、dp-数组的遍历方向"><a href="#二、dp-数组的遍历方向" class="headerlink" title="二、dp 数组的遍历方向"></a>二、dp 数组的遍历方向</h3>我相信读者做动态规问题时，肯定会对 <code>dp</code> 数组的遍历顺序有些头疼。我们拿二维 <code>dp</code> 数组来举例，有时候我们是正向遍历：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[m][n];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>        <span class="hljs-comment">// 计算 dp[i][j]</span><br></code></pre></td></tr></table></figure>有时候我们反向遍历：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = m - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = n - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--)<br>        <span class="hljs-comment">// 计算 dp[i][j]</span><br></code></pre></td></tr></table></figure>有时候可能会斜向遍历：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 斜着遍历数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">2</span>; l &lt;= n; l++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n - l; i++) &#123;<br>        <span class="hljs-keyword">int</span> j = l + i - <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 计算 dp[i][j]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>甚至更让人迷惑的是，有时候发现正向反向遍历都可以得到正确答案，比如我们在「团灭股票问题」中有的地方就正反皆可。<br>那么，如果仔细观察的话可以发现其中的原因的。你只要把住两点就行了：<br><strong>1、遍历的过程中，所需的状态必须是已经计算出来的</strong>。<br><strong>2、遍历的终点必须是存储结果的那个位置</strong>。<br>下面来距离解释上面两个原则是什么意思。<br>比如编辑距离这个经典的问题，详解见前文「编辑距离详解」，我们通过对 <code>dp</code> 数组的定义，确定了 base case 是 <code>dp[..][0]</code> 和 <code>dp[0][..]</code>，最终答案是 <code>dp[m][n]</code>；而且我们通过状态转移方程知道 <code>dp[i][j]</code> 需要从 <code>dp[i-1][j]</code>, <code>dp[i][j-1]</code>, <code>dp[i-1][j-1]</code> 转移而来，如下图：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%9C%80%E4%BC%98%E5%AD%90%E7%BB%93%E6%9E%84/1.jpg"><br>那么，参考刚才说的两条原则，你该怎么遍历 <code>dp</code> 数组？肯定是正向遍历：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; n; j++)<br>        <span class="hljs-comment">// 通过 dp[i-1][j], dp[i][j - 1], dp[i-1][j-1]</span><br>        <span class="hljs-comment">// 计算 dp[i][j]</span><br></code></pre></td></tr></table></figure>因为，这样每一步迭代的左边、上边、左上边的位置都是 base case 或者之前计算过的，而且最终结束在我们想要的答案 <code>dp[m][n]</code>。<br>再举一例，回文子序列问题，详见前文「子序列问题模板」，我们通过过对 <code>dp</code> 数组的定义，确定了 base case 处在中间的对角线，<code>dp[i][j]</code> 需要从 <code>dp[i+1][j]</code>, <code>dp[i][j-1]</code>, <code>dp[i+1][j-1]</code> 转移而来，想要求的最终答案是 <code>dp[0][n-1]</code>，如下图：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/4.jpg"><br>这种情况根据刚才的两个原则，就可以有两种正确的遍历方式：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/5.jpg"><br>要么从左至右斜着遍历，要么从下向上从左到右遍历，这样才能保证每次 <code>dp[i][j]</code> 的左边、下边、左下边已经计算完毕，得到正确结果。<br>现在，你应该理解了这两个原则，主要就是看 base case 和最终结果的存储位置，保证遍历过程中使用的数据都是计算完毕的就行，有时候确实存在多种方法可以得到正确答案，可根据个人口味自行选择。</li></ul><p><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3%E8%BF%9B%E9%98%B6">上一篇：动态规划解题框架</a><br><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E4%BF%AE%E8%AE%A2%E7%89%88">下一篇：回溯算法解题框架</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长公共子序列</title>
      <link href="2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/"/>
      <url>2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h1><p>最长公共子序列（Longest Common Subsequence，简称 LCS）是一道非常经典的面试题目，因为它的解法是典型的二维动态规划，大部分比较困难的字符串问题都和这个问题一个套路，比如说编辑距离。而且，这个算法稍加改造就可以用于解决其他问题，所以说 LCS 算法是值得掌握的。<br>题目就是让我们求两个字符串的 LCS 长度：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入: str1 &#x3D; &quot;abcde&quot;, str2 &#x3D; &quot;ace&quot; <br>输出: 3  <br>解释: 最长公共子序列是 &quot;ace&quot;，它的长度是 3<br></code></pre></td></tr></table></figure><p>肯定有读者会问，为啥这个问题就是动态规划来解决呢？因为子序列类型的问题，穷举出所有可能的结果都不容易，而动态规划算法做的就是穷举 + 剪枝，它俩天生一对儿。所以可以说只要涉及子序列问题，十有八九都需要动态规划来解决，往这方面考虑就对了。<br>下面就来手把手分析一下，这道题目如何用动态规划技巧解决。</p><h3 id="一、动态规划思路"><a href="#一、动态规划思路" class="headerlink" title="一、动态规划思路"></a>一、动态规划思路</h3><p><strong>第一步，一定要明确 <code>dp</code> 数组的含义</strong>。对于两个字符串的动态规划问题，套路是通用的。<br>比如说对于字符串 <code>s1</code> 和 <code>s2</code>，一般来说都要构造一个这样的 DP table：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/LCS/dp.png"><br>为了方便理解此表，我们暂时认为索引是从 1 开始的，待会的代码中只要稍作调整即可。其中，<code>dp[i][j]</code> 的含义是：对于 <code>s1[1..i]</code> 和 <code>s2[1..j]</code>，它们的 LCS 长度是 <code>dp[i][j]</code>。<br>比如上图的例子，d[2][4] 的含义就是：对于 <code>&quot;ac&quot;</code> 和 <code>&quot;babc&quot;</code>，它们的 LCS 长度是 2。我们最终想得到的答案应该是 <code>dp[3][6]</code>。<br><strong>第二步，定义 base case。</strong><br>我们专门让索引为 0 的行和列表示空串，<code>dp[0][..]</code> 和 <code>dp[..][0]</code> 都应该初始化为 0，这就是 base case。<br>比如说，按照刚才 dp 数组的定义，<code>dp[0][3]=0</code> 的含义是：对于字符串 <code>&quot;&quot;</code> 和 <code>&quot;bab&quot;</code>，其 LCS 的长度为 0。因为有一个字符串是空串，它们的最长公共子序列的长度显然应该是 0。<br><strong>第三步，找状态转移方程。</strong><br>这是动态规划最难的一步，不过好在这种字符串问题的套路都差不多，权且借这道题来聊聊处理这类问题的思路。<br>状态转移说简单些就是做选择，比如说这个问题，是求 <code>s1</code> 和 <code>s2</code> 的最长公共子序列，不妨称这个子序列为 <code>lcs</code>。那么对于 <code>s1</code> 和 <code>s2</code> 中的每个字符，有什么选择？很简单，两种选择，要么在 <code>lcs</code> 中，要么不在。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/LCS/lcs.png"><br>这个「在」和「不在」就是选择，关键是，应该如何选择呢？这个需要动点脑筋：如果某个字符应该在 <code>lcs</code> 中，那么这个字符肯定同时存在于 <code>s1</code> 和 <code>s2</code> 中，因为 <code>lcs</code> 是最长<strong>公共</strong>子序列嘛。所以本题的思路是这样：<br>用两个指针 <code>i</code> 和 <code>j</code> 从后往前遍历 <code>s1</code> 和 <code>s2</code>，如果 <code>s1[i]==s2[j]</code>，那么这个字符<strong>一定在 <code>lcs</code> 中</strong>；否则的话，<code>s1[i]</code> 和 <code>s2[j]</code> 这两个字符<strong>至少有一个不在 <code>lcs</code> 中</strong>，需要丢弃一个。先看一下递归解法，比较容易理解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">longestCommonSubsequence</span>(<span class="hljs-params">str1, str2</span>) -&gt; int:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dp</span>(<span class="hljs-params">i, j</span>):</span><br>        <span class="hljs-comment"># 空串的 base case</span><br>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">-1</span> <span class="hljs-keyword">or</span> j == <span class="hljs-number">-1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> str1[i] == str2[j]:<br>            <span class="hljs-comment"># 这边找到一个 lcs 的元素，继续往前找</span><br>            <span class="hljs-keyword">return</span> dp(i - <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span>) + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 谁能让 lcs 最长，就听谁的</span><br>            <span class="hljs-keyword">return</span> max(dp(i<span class="hljs-number">-1</span>, j), dp(i, j<span class="hljs-number">-1</span>))<br>        <br>    <span class="hljs-comment"># i 和 j 初始化为最后一个索引</span><br>    <span class="hljs-keyword">return</span> dp(len(str1)<span class="hljs-number">-1</span>, len(str2)<span class="hljs-number">-1</span>)<br></code></pre></td></tr></table></figure><p>对于第一种情况，找到一个 <code>lcs</code> 中的字符，同时将 <code>i</code> <code>j</code> 向前移动一位，并给 <code>lcs</code> 的长度加一；对于后者，则尝试两种情况，取更大的结果。<br>其实这段代码就是暴力解法，我们可以通过备忘录或者 DP table 来优化时间复杂度，比如通过前文描述的 DP table 来解决：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">longestCommonSubsequence</span>(<span class="hljs-params">str1, str2</span>) -&gt; int:</span><br>    m, n = len(str1), len(str2)<br>    <span class="hljs-comment"># 构建 DP table 和 base case</span><br>    dp = [[<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(m + <span class="hljs-number">1</span>)]<br>    <span class="hljs-comment"># 进行状态转移</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> str1[i - <span class="hljs-number">1</span>] == str2[j - <span class="hljs-number">1</span>]:<br>                <span class="hljs-comment"># 找到一个 lcs 中的字符</span><br>                dp[i][j] = <span class="hljs-number">1</span> + dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]<br>            <span class="hljs-keyword">else</span>:<br>                dp[i][j] = max(dp[i<span class="hljs-number">-1</span>][j], dp[i][j<span class="hljs-number">-1</span>])<br>        <br>    <span class="hljs-keyword">return</span> dp[<span class="hljs-number">-1</span>][<span class="hljs-number">-1</span>]<br></code></pre></td></tr></table></figure><h3 id="二、疑难解答"><a href="#二、疑难解答" class="headerlink" title="二、疑难解答"></a>二、疑难解答</h3><p>对于 <code>s1[i]</code> 和 <code>s2[j]</code> 不相等的情况，<strong>至少有一个</strong>字符不在 <code>lcs</code> 中，会不会两个字符都不在呢？比如下面这种情况：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/LCS/1.png"><br>所以代码是不是应该考虑这种情况，改成这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> str1[i - <span class="hljs-number">1</span>] == str2[j - <span class="hljs-number">1</span>]:<br>    <span class="hljs-comment"># ...</span><br><span class="hljs-keyword">else</span>:<br>    dp[i][j] = max(dp[i<span class="hljs-number">-1</span>][j], <br>                   dp[i][j<span class="hljs-number">-1</span>],<br>                   dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>])<br></code></pre></td></tr></table></figure><p>我一开始也有这种怀疑，其实可以这样改，也能得到正确答案，但是多此一举，因为 <code>dp[i-1][j-1]</code> 永远是三者中最小的，max 根本不可能取到它。<br>原因在于我们对 dp 数组的定义：对于 <code>s1[1..i]</code> 和 <code>s2[1..j]</code>，它们的 LCS 长度是 <code>dp[i][j]</code>。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/LCS/2.png"><br>这样一看，显然 <code>dp[i-1][j-1]</code> 对应的 <code>lcs</code> 长度不可能比前两种情况大，所以没有必要参与比较。</p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>对于两个字符串的动态规划问题，一般来说都是像本文一样定义 DP table，因为这样定义有一个好处，就是容易写出状态转移方程，<code>dp[i][j]</code> 的状态可以通过之前的状态推导出来：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/LCS/3.png"><br>找状态转移方程的方法是，思考每个状态有哪些「选择」，只要我们能用正确的逻辑做出正确的选择，算法就能够正确运行。</p><p><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE">上一篇：动态规划之正则表达</a><br><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%AD%A6%E4%B9%A0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E7%9A%84%E9%AB%98%E6%95%88%E6%96%B9%E6%B3%95">下一篇：学习算法和刷题的思路指南</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编辑距离</title>
      <link href="2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB/"/>
      <url>2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="编辑距离"><a href="#编辑距离" class="headerlink" title="编辑距离"></a>编辑距离</h1><p>前几天看了一份鹅场的面试题，算法部分大半是动态规划，最后一题就是写一个计算编辑距离的函数，今天就专门写一篇文章来探讨一下这个问题。<br>我个人很喜欢编辑距离这个问题，因为它看起来十分困难，解法却出奇得简单漂亮，而且它是少有的比较实用的算法（是的，我承认很多算法问题都不太实用）。下面先来看下题目：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/editDistance/title.png"><br>为什么说这个问题难呢，因为显而易见，它就是难，让人手足无措，望而生畏。<br>为什么说它实用呢，因为前几天我就在日常生活中用到了这个算法。之前有一篇公众号文章由于疏忽，写错位了一段内容，我决定修改这部分内容让逻辑通顺。但是公众号文章最多只能修改 20 个字，且只支持增、删、替换操作（跟编辑距离问题一模一样），于是我就用算法求出了一个最优方案，只用了 16 步就完成了修改。<br>再比如高大上一点的应用，DNA 序列是由 A,G,C,T 组成的序列，可以类比成字符串。编辑距离可以衡量两个 DNA 序列的相似度，编辑距离越小，说明这两段 DNA 越相似，说不定这俩 DNA 的主人是远古近亲啥的。<br>下面言归正传，详细讲解一下编辑距离该怎么算，相信本文会让你有收获。</p><h3 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h3><p>编辑距离问题就是给我们两个字符串 <code>s1</code> 和 <code>s2</code>，只能用三种操作，让我们把 <code>s1</code> 变成 <code>s2</code>，求最少的操作数。需要明确的是，不管是把 <code>s1</code> 变成 <code>s2</code> 还是反过来，结果都是一样的，所以后文就以 <code>s1</code> 变成 <code>s2</code> 举例。<br>前文「最长公共子序列」说过，<strong>解决两个字符串的动态规划问题，一般都是用两个指针 <code>i,j</code> 分别指向两个字符串的最后，然后一步步往前走，缩小问题的规模</strong>。<br>设两个字符串分别为 “rad” 和 “apple”，为了把 <code>s1</code> 变成 <code>s2</code>，算法会这样进行：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/editDistance/edit.gif"><br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/editDistance/1.jpg"><br>请记住这个 GIF 过程，这样就能算出编辑距离。关键在于如何做出正确的操作，稍后会讲。<br>根据上面的 GIF，可以发现操作不只有三个，其实还有第四个操作，就是什么都不要做（skip）。比如这个情况：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/editDistance/2.jpg"><br>因为这两个字符本来就相同，为了使编辑距离最小，显然不应该对它们有任何操作，直接往前移动 <code>i,j</code> 即可。<br>还有一个很容易处理的情况，就是 <code>j</code> 走完 <code>s2</code> 时，如果 <code>i</code> 还没走完 <code>s1</code>，那么只能用删除操作把 <code>s1</code> 缩短为 <code>s2</code>。比如这个情况：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/editDistance/3.jpg"><br>类似的，如果 <code>i</code> 走完 <code>s1</code> 时 <code>j</code> 还没走完了 <code>s2</code>，那就只能用插入操作把 <code>s2</code> 剩下的字符全部插入 <code>s1</code>。等会会看到，这两种情况就是算法的 <strong>base case</strong>。<br>下面详解一下如何将思路转换成代码，坐稳，要发车了。</p><h3 id="二、代码详解"><a href="#二、代码详解" class="headerlink" title="二、代码详解"></a>二、代码详解</h3><p>先梳理一下之前的思路：<br>base case 是 <code>i</code> 走完 <code>s1</code> 或 <code>j</code> 走完 <code>s2</code>，可以直接返回另一个字符串剩下的长度。<br>对于每对儿字符 <code>s1[i]</code> 和 <code>s2[j]</code>，可以有四种操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> s1[i] == s2[j]:<br>    啥都别做（skip）<br>    i, j 同时向前移动<br><span class="hljs-keyword">else</span>:<br>    三选一：<br>        插入（insert）<br>        删除（delete）<br>        替换（replace）<br></code></pre></td></tr></table></figure><p>有这个框架，问题就已经解决了。读者也许会问，这个「三选一」到底该怎么选择呢？很简单，全试一遍，哪个操作最后得到的编辑距离最小，就选谁。这里需要递归技巧，理解需要点技巧，先看下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">minDistance</span>(<span class="hljs-params">s1, s2</span>) -&gt; int:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dp</span>(<span class="hljs-params">i, j</span>):</span><br>        <span class="hljs-comment"># base case</span><br>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">-1</span>: <span class="hljs-keyword">return</span> j + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> j == <span class="hljs-number">-1</span>: <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span><br>        <br>        <span class="hljs-keyword">if</span> s1[i] == s2[j]:<br>            <span class="hljs-keyword">return</span> dp(i - <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span>)  <span class="hljs-comment"># 啥都不做</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> min(<br>                dp(i, j - <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>,    <span class="hljs-comment"># 插入</span><br>                dp(i - <span class="hljs-number">1</span>, j) + <span class="hljs-number">1</span>,    <span class="hljs-comment"># 删除</span><br>                dp(i - <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span>) + <span class="hljs-number">1</span> <span class="hljs-comment"># 替换</span><br>            )<br>    <br>    <span class="hljs-comment"># i，j 初始化指向最后一个索引</span><br>    <span class="hljs-keyword">return</span> dp(len(s1) - <span class="hljs-number">1</span>, len(s2) - <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>下面来详细解释一下这段递归代码，base case 应该不用解释了，主要解释一下递归部分。<br>都说递归代码的可解释性很好，这是有道理的，只要理解函数的定义，就能很清楚地理解算法的逻辑。我们这里 dp(i, j) 函数的定义是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dp</span>(<span class="hljs-params">i, j</span>) -&gt; int</span><br><span class="hljs-function"># 返回 s1[0..i] 和 s2[0..j] 的最小编辑距离</span><br></code></pre></td></tr></table></figure><p><strong>记住这个定义</strong>之后，先来看这段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> s1[i] == s2[j]:<br>    <span class="hljs-keyword">return</span> dp(i - <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span>)  <span class="hljs-comment"># 啥都不做</span><br><span class="hljs-comment"># 解释：</span><br><span class="hljs-comment"># 本来就相等，不需要任何操作</span><br><span class="hljs-comment"># s1[0..i] 和 s2[0..j] 的最小编辑距离等于</span><br><span class="hljs-comment"># s1[0..i-1] 和 s2[0..j-1] 的最小编辑距离</span><br><span class="hljs-comment"># 也就是说 dp(i, j) 等于 dp(i-1, j-1)</span><br></code></pre></td></tr></table></figure><p>如果 <code>s1[i]！=s2[j]</code>，就要对三个操作递归了，稍微需要点思考：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">dp(i, j - <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>,    <span class="hljs-comment"># 插入</span><br><span class="hljs-comment"># 解释：</span><br><span class="hljs-comment"># 我直接在 s1[i] 插入一个和 s2[j] 一样的字符</span><br><span class="hljs-comment"># 那么 s2[j] 就被匹配了，前移 j，继续跟 i 对比</span><br><span class="hljs-comment"># 别忘了操作数加一</span><br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/editDistance/insert.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">dp(i - <span class="hljs-number">1</span>, j) + <span class="hljs-number">1</span>,    <span class="hljs-comment"># 删除</span><br><span class="hljs-comment"># 解释：</span><br><span class="hljs-comment"># 我直接把 s[i] 这个字符删掉</span><br><span class="hljs-comment"># 前移 i，继续跟 j 对比</span><br><span class="hljs-comment"># 操作数加一</span><br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/editDistance/delete.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">dp(i - <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span>) + <span class="hljs-number">1</span> <span class="hljs-comment"># 替换</span><br><span class="hljs-comment"># 解释：</span><br><span class="hljs-comment"># 我直接把 s1[i] 替换成 s2[j]，这样它俩就匹配了</span><br><span class="hljs-comment"># 同时前移 i，j 继续对比</span><br><span class="hljs-comment"># 操作数加一</span><br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/editDistance/replace.gif"><br>现在，你应该完全理解这段短小精悍的代码了。还有点小问题就是，这个解法是暴力解法，存在重叠子问题，需要用动态规划技巧来优化。<br><strong>怎么能一眼看出存在重叠子问题呢</strong>？前文「动态规划之正则表达式」有提过，这里再简单提一下，需要抽象出本文算法的递归框架：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dp</span>(<span class="hljs-params">i, j</span>):</span><br>    dp(i - <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span>) <span class="hljs-comment">#1</span><br>    dp(i, j - <span class="hljs-number">1</span>)     <span class="hljs-comment">#2</span><br>    dp(i - <span class="hljs-number">1</span>, j)     <span class="hljs-comment">#3</span><br></code></pre></td></tr></table></figure><p>对于子问题 <code>dp(i-1, j-1)</code>，如何通过原问题 <code>dp(i, j)</code> 得到呢？有不止一条路径，比如 <code>dp(i, j) -&gt; #1</code> 和 <code>dp(i, j) -&gt; #2 -&gt; #3</code>。一旦发现一条重复路径，就说明存在巨量重复路径，也就是重叠子问题。</p><h3 id="三、动态规划优化"><a href="#三、动态规划优化" class="headerlink" title="三、动态规划优化"></a>三、动态规划优化</h3><p>对于重叠子问题呢，前文「动态规划详解」详细介绍过，优化方法无非是备忘录或者 DP table。<br>备忘录很好加，原来的代码稍加修改即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">minDistance</span>(<span class="hljs-params">s1, s2</span>) -&gt; int:</span><br>    memo = dict() <span class="hljs-comment"># 备忘录</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dp</span>(<span class="hljs-params">i, j</span>):</span><br>        <span class="hljs-keyword">if</span> (i, j) <span class="hljs-keyword">in</span> memo: <br>            <span class="hljs-keyword">return</span> memo[(i, j)]<br>        ...<br>        <br>        <span class="hljs-keyword">if</span> s1[i] == s2[j]:<br>            memo[(i, j)] = ...  <br>        <span class="hljs-keyword">else</span>:<br>            memo[(i, j)] = ...<br>        <span class="hljs-keyword">return</span> memo[(i, j)]<br>    <br>    <span class="hljs-keyword">return</span> dp(len(s1) - <span class="hljs-number">1</span>, len(s2) - <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><strong>主要说下 DP table 的解法</strong>：<br>首先明确 dp 数组的含义，dp 数组是一个二维数组，长这样：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/editDistance/dp.jpg"><br>有了之前递归解法的铺垫，应该很容易理解。<code>dp[..][0]</code> 和 <code>dp[0][..]</code> 对应 base case，<code>dp[i][j]</code> 的含义和之前的 dp 函数类似：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dp</span>(<span class="hljs-params">i, j</span>) -&gt; int</span><br><span class="hljs-function"># 返回 s1[0..i] 和 s2[0..j] 的最小编辑距离</span><br><span class="hljs-function">dp[i-1][j-1]</span><br><span class="hljs-function"># 存储 s1[0..i] 和 s2[0..j] 的最小编辑距离</span><br></code></pre></td></tr></table></figure><p>dp 函数的 base case 是 <code>i,j</code> 等于 -1，而数组索引至少是 0，所以 dp 数组会偏移一位。<br>既然 dp 数组和递归 dp 函数含义一样，也就可以直接套用之前的思路写代码，<strong>唯一不同的是，DP table 是自底向上求解，递归解法是自顶向下求解</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">minDistance</span><span class="hljs-params">(String s1, String s2)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> m = s1.length(), n = s2.length();<br>    <span class="hljs-keyword">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[m + <span class="hljs-number">1</span>][n + <span class="hljs-number">1</span>];<br>    <span class="hljs-comment">// base case </span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        dp[i][<span class="hljs-number">0</span>] = i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>        dp[<span class="hljs-number">0</span>][j] = j;<br>    <span class="hljs-comment">// 自底向上求解</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            <span class="hljs-keyword">if</span> (s1.charAt(i-<span class="hljs-number">1</span>) == s2.charAt(j-<span class="hljs-number">1</span>))<br>                dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">else</span>               <br>                dp[i][j] = min(<br>                    dp[i - <span class="hljs-number">1</span>][j] + <span class="hljs-number">1</span>,<br>                    dp[i][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>,<br>                    dp[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>] + <span class="hljs-number">1</span><br>                );<br>    <span class="hljs-comment">// 储存着整个 s1 和 s2 的最小编辑距离</span><br>    <span class="hljs-keyword">return</span> dp[m][n];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">min</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> Math.min(a, Math.min(b, c));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、扩展延伸"><a href="#三、扩展延伸" class="headerlink" title="三、扩展延伸"></a>三、扩展延伸</h3><p>一般来说，处理两个字符串的动态规划问题，都是按本文的思路处理，建立 DP table。为什么呢，因为易于找出状态转移的关系，比如编辑距离的 DP table：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/editDistance/4.jpg"><br>还有一个细节，既然每个 <code>dp[i][j]</code> 只和它附近的三个状态有关，空间复杂度是可以压缩成 $O(min(M, N))$ 的（M，N 是两个字符串的长度）。不难，但是可解释性大大降低，读者可以自己尝试优化一下。<br>你可能还会问，<strong>这里只求出了最小的编辑距离，那具体的操作是什么</strong>？你之前举的修改公众号文章的例子，只有一个最小编辑距离肯定不够，还得知道具体怎么修改才行。<br>这个其实很简单，代码稍加修改，给 dp 数组增加额外的信息即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// int[][] dp;</span><br>Node[][] dp;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> val;<br>    <span class="hljs-keyword">int</span> choice;<br>    <span class="hljs-comment">// 0 代表啥都不做</span><br>    <span class="hljs-comment">// 1 代表插入</span><br>    <span class="hljs-comment">// 2 代表删除</span><br>    <span class="hljs-comment">// 3 代表替换</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>val</code> 属性就是之前的 dp 数组的数值，<code>choice</code> 属性代表操作。在做最优选择时，顺便把操作记录下来，然后就从结果反推具体操作。<br>我们的最终结果不是 <code>dp[m][n]</code> 吗，这里的 <code>val</code> 存着最小编辑距离，<code>choice</code> 存着最后一个操作，比如说是插入操作，那么就可以左移一格：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/editDistance/5.jpg"><br>重复此过程，可以一步步回到起点 <code>dp[0][0]</code>，形成一条路径，按这条路径上的操作进行编辑，就是最佳方案。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/editDistance/6.jpg"></p><p><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AE%BE%E8%AE%A1%EF%BC%9A%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97">上一篇：动态规划设计：最长递增子序列</a><br><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E9%AB%98%E6%A5%BC%E6%89%94%E9%B8%A1%E8%9B%8B%E9%97%AE%E9%A2%98">下一篇：经典动态规划问题：高楼扔鸡蛋</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法之区间调度问题</title>
      <link href="2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E4%B9%8B%E5%8C%BA%E9%97%B4%E8%B0%83%E5%BA%A6%E9%97%AE%E9%A2%98/"/>
      <url>2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E4%B9%8B%E5%8C%BA%E9%97%B4%E8%B0%83%E5%BA%A6%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="贪心算法之区间调度问题"><a href="#贪心算法之区间调度问题" class="headerlink" title="贪心算法之区间调度问题"></a>贪心算法之区间调度问题</h1><p>什么是贪心算法呢？贪心算法可以认为是动态规划算法的一个特例，相比动态规划，使用贪心算法需要满足更多的条件（贪心选择性质），但是效率比动态规划要高。<br>比如说一个算法问题使用暴力解法需要指数级时间，如果能使用动态规划消除重叠子问题，就可以降到多项式级别的时间，如果满足贪心选择性质，那么可以进一步降低时间复杂度，达到线性级别的。<br>什么是贪心选择性质呢，简单说就是：每一步都做出一个局部最优的选择，最终的结果就是全局最优。注意哦，这是一种特殊性质，其实只有一部分问题拥有这个性质。<br>比如你面前放着 100 张人民币，你只能拿十张，怎么才能拿最多的面额？显然每次选择剩下钞票中面值最大的一张，最后你的选择一定是最优的。<br>然而，大部分问题明显不具有贪心选择性质。比如打斗地主，对手出对儿三，按照贪心策略，你应该出尽可能小的牌刚好压制住对方，但现实情况我们甚至可能会出王炸。这种情况就不能用贪心算法，而得使用动态规划解决，参见前文「动态规划解决博弈问题」。</p><h3 id="一、问题概述"><a href="#一、问题概述" class="headerlink" title="一、问题概述"></a>一、问题概述</h3><p>言归正传，本文解决一个很经典的贪心算法问题 Interval Scheduling（区间调度问题）。给你很多形如 <code>[start, end]</code> 的闭区间，请你设计一个算法，<strong>算出这些区间中最多有几个互不相交的区间</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">intervalSchedule</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] intvs)</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>举个例子，<code>intvs = [[1,3], [2,4], [3,6]]</code>，这些区间最多有 2 个区间互不相交，即 <code>[[1,3], [3,6]]</code>，你的算法应该返回 2。注意边界相同并不算相交。<br>这个问题在生活中的应用广泛，比如你今天有好几个活动，每个活动都可以用区间 <code>[start, end]</code> 表示开始和结束的时间，请问你今天<strong>最多能参加几个活动呢？</strong>显然你一个人不能同时参加两个活动，所以说这个问题就是求这些时间区间的最大不相交子集。</p><h3 id="二、贪心解法"><a href="#二、贪心解法" class="headerlink" title="二、贪心解法"></a>二、贪心解法</h3><p>这个问题有许多看起来不错的贪心思路，却都不能得到正确答案。比如说：<br>也许我们可以每次选择可选区间中开始最早的那个？但是可能存在某些区间开始很早，但是很长，使得我们错误地错过了一些短的区间。或者我们每次选择可选区间中最短的那个？或者选择出现冲突最少的那个区间？这些方案都能很容易举出反例，不是正确的方案。<br>正确的思路其实很简单，可以分为以下三步：</p><ol><li>从区间集合 intvs 中选择一个区间 x，这个 x 是在当前所有区间中<strong>结束最早的</strong>（end 最小）。</li><li>把所有与 x 区间相交的区间从区间集合 intvs 中删除。</li><li>重复步骤 1 和 2，直到 intvs 为空为止。之前选出的那些 x 就是最大不相交子集。<br>把这个思路实现成算法的话，可以按每个区间的 <code>end</code> 数值升序排序，因为这样处理之后实现步骤 1 和步骤 2 都方便很多:<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/interval/1.gif" alt="1"><br>现在来实现算法，对于步骤 1，由于我们预先按照 <code>end</code> 排了序，所以选择 x 是很容易的。关键在于，如何去除与 x 相交的区间，选择下一轮循环的 x 呢？</li></ol><p><strong>由于我们事先排了序</strong>，不难发现所有与 x 相交的区间必然会与 x 的 <code>end</code> 相交；如果一个区间不想与 x 的 <code>end</code> 相交，它的 <code>start</code> 必须要大于（或等于）x 的 <code>end</code>：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/interval/2.jpg" alt="2"><br>看下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">intervalSchedule</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] intvs)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (intvs.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 按 end 升序排序</span><br>    Arrays.sort(intvs, <span class="hljs-keyword">new</span> Comparator&lt;<span class="hljs-keyword">int</span>[]&gt;() &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a, <span class="hljs-keyword">int</span>[] b)</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> a[<span class="hljs-number">1</span>] - b[<span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">// 至少有一个区间不相交</span><br>    <span class="hljs-keyword">int</span> count = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 排序后，第一个区间就是 x</span><br>    <span class="hljs-keyword">int</span> x_end = intvs[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] interval : intvs) &#123;<br>        <span class="hljs-keyword">int</span> start = interval[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span> (start &gt;= x_end) &#123;<br>            <span class="hljs-comment">// 找到下一个选择的区间了</span><br>            count++;<br>            x_end = interval[<span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、应用举例"><a href="#三、应用举例" class="headerlink" title="三、应用举例"></a>三、应用举例</h3><p>下面举例几道 LeetCode 题目应用一下区间调度算法。<br>第 435 题，无重叠区间：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/interval/title1.png" alt="title1"><br>我们已经会求最多有几个区间不会重叠了，那么剩下的不就是至少需要去除的区间吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">eraseOverlapIntervals</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] intervals)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = intervals.length;<br>    <span class="hljs-keyword">return</span> n - intervalSchedule(intervals);<br>&#125;<br></code></pre></td></tr></table></figure><p>第 452 题，用最少的箭头射爆气球：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/interval/title2.png" alt="title2"><br>其实稍微思考一下，这个问题和区间调度算法一模一样！如果最多有 <code>n</code> 个不重叠的区间，那么就至少需要 <code>n</code> 个箭头穿透所有区间：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/interval/3.jpg" alt="3"><br>只是有一点不一样，在 <code>intervalSchedule</code> 算法中，如果两个区间的边界触碰，不算重叠；而按照这道题目的描述，箭头如果碰到气球的边界气球也会爆炸，所以说相当于区间的边界触碰也算重叠：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/interval/4.jpg" alt="4"><br>所以只要将之前的算法稍作修改，就是这道题目的答案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findMinArrowShots</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] intvs)</span> </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] interval : intvs) &#123;<br>        <span class="hljs-keyword">int</span> start = interval[<span class="hljs-number">0</span>];<br>        <span class="hljs-comment">// 把 &gt;= 改成 &gt; 就行了</span><br>        <span class="hljs-keyword">if</span> (start &gt; x_end) &#123;<br>            count++;<br>            x_end = interval[<span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><p>这么做的原因也不难理解，因为现在边界接触也算重叠，所以 <code>start == x_end</code> 时不能更新 x。</p><p><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E5%8D%9A%E5%BC%88%E9%97%AE%E9%A2%98">上一篇：动态规划之博弈问题</a><br><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8BKMP%E5%AD%97%E7%AC%A6%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95">下一篇：动态规划之KMP字符匹配算法</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高楼扔鸡蛋进阶</title>
      <link href="2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E9%AB%98%E6%A5%BC%E6%89%94%E9%B8%A1%E8%9B%8B%E8%BF%9B%E9%98%B6/"/>
      <url>2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E9%AB%98%E6%A5%BC%E6%89%94%E9%B8%A1%E8%9B%8B%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="经典动态规划问题：高楼扔鸡蛋（进阶）"><a href="#经典动态规划问题：高楼扔鸡蛋（进阶）" class="headerlink" title="经典动态规划问题：高楼扔鸡蛋（进阶）"></a>经典动态规划问题：高楼扔鸡蛋（进阶）</h1><p>上篇文章聊了高楼扔鸡蛋问题，讲了一种效率不是很高，但是较为容易理解的动态规划解法。后台很多读者问如何更高效地解决这个问题，今天就谈两种思路，来优化一下这个问题，分别是二分查找优化和重新定义状态转移。<br>如果还不知道高楼扔鸡蛋问题的读者可以看下「经典动态规划：高楼扔鸡蛋」，那篇文章详解了题目的含义和基本的动态规划解题思路，请确保理解前文，因为今天的优化都是基于这个基本解法的。<br>二分搜索的优化思路也许是我们可以尽力尝试写出的，而修改状态转移的解法可能是不容易想到的，可以借此见识一下动态规划算法设计的玄妙，当做思维拓展。</p><h3 id="二分搜索优化"><a href="#二分搜索优化" class="headerlink" title="二分搜索优化"></a>二分搜索优化</h3><p>之前提到过这个解法，核心是因为状态转移方程的单调性，这里可以具体展开看看。<br>首先简述一下原始动态规划的思路：<br>1、暴力穷举尝试在所有楼层 <code>1 &lt;= i &lt;= N</code> 扔鸡蛋，每次选择尝试次数<strong>最少</strong>的那一层；<br>2、每次扔鸡蛋有两种可能，要么碎，要么没碎；<br>3、如果鸡蛋碎了，<code>F</code> 应该在第 <code>i</code> 层下面，否则，<code>F</code> 应该在第 <code>i</code> 层上面；<br>4、鸡蛋是碎了还是没碎，取决于哪种情况下尝试次数<strong>更多</strong>，因为我们想求的是最坏情况下的结果。<br>核心的状态转移代码是这段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 当前状态为 K 个鸡蛋，面对 N 层楼</span><br><span class="hljs-comment"># 返回这个状态下的最优结果</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dp</span>(<span class="hljs-params">K, N</span>):</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-number">1</span> &lt;= i &lt;= N:<br>        <span class="hljs-comment"># 最坏情况下的最少扔鸡蛋次数</span><br>        res = min(res, <br>                  max( <br>                        dp(K - <span class="hljs-number">1</span>, i - <span class="hljs-number">1</span>), <span class="hljs-comment"># 碎</span><br>                        dp(K, N - i)      <span class="hljs-comment"># 没碎</span><br>                     ) + <span class="hljs-number">1</span> <span class="hljs-comment"># 在第 i 楼扔了一次</span><br>                 )<br>    <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p>这个 for 循环就是下面这个状态转移方程的具体代码实现：<br>$$ dp(K, N) = \min_{0 &lt;= i &lt;= N}{\max{dp(K - 1, i - 1), dp(K, N - i)} + 1}$$<br>如果能够理解这个状态转移方程，那么就很容易理解二分查找的优化思路。<br>首先我们根据 <code>dp(K, N)</code> 数组的定义（有 <code>K</code> 个鸡蛋面对 <code>N</code> 层楼，最少需要扔几次），<strong>很容易知道 <code>K</code> 固定时，这个函数随着 <code>N</code> 的增加一定是单调递增的</strong>，无论你策略多聪明，楼层增加测试次数一定要增加。<br>那么注意 <code>dp(K - 1, i - 1)</code> 和 <code>dp(K, N - i)</code> 这两个函数，其中 <code>i</code> 是从 1 到 <code>N</code> 单增的，如果我们固定 <code>K</code> 和 <code>N</code>，<strong>把这两个函数看做关于 <code>i</code> 的函数，前者随着 <code>i</code> 的增加应该也是单调递增的，而后者随着 <code>i</code> 的增加应该是单调递减的</strong>：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%89%94%E9%B8%A1%E8%9B%8B/2.jpg"><br>这时候求二者的较大值，再求这些最大值之中的最小值，其实就是求这两条直线交点，也就是红色折线的最低点嘛。<br>我们前文「二分查找只能用来查找元素吗」讲过，二分查找的运用很广泛，形如下面这种形式的 for 循环代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>    <span class="hljs-keyword">if</span> (isOK(i))<br>        <span class="hljs-keyword">return</span> i;<br>&#125;<br></code></pre></td></tr></table></figure><p>都很有可能可以运用二分查找来优化线性搜索的复杂度，回顾这两个 <code>dp</code> 函数的曲线，我们要找的最低点其实就是这种情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++) &#123;<br>    <span class="hljs-keyword">if</span> (dp(K - <span class="hljs-number">1</span>, i - <span class="hljs-number">1</span>) == dp(K, N - i))<br>        <span class="hljs-keyword">return</span> dp(K, N - i);<br>&#125;<br></code></pre></td></tr></table></figure><p>熟悉二分搜索的同学肯定敏感地想到了，这不就是相当于求 Valley（山谷）值嘛，可以用二分查找来快速寻找这个点的，直接看代码吧，整体的思路还是一样，只是加快了搜索速度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">superEggDrop</span>(<span class="hljs-params">self, K: int, N: int</span>) -&gt; int:</span><br>        <br>    memo = dict()<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dp</span>(<span class="hljs-params">K, N</span>):</span><br>        <span class="hljs-keyword">if</span> K == <span class="hljs-number">1</span>: <span class="hljs-keyword">return</span> N<br>        <span class="hljs-keyword">if</span> N == <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> (K, N) <span class="hljs-keyword">in</span> memo:<br>            <span class="hljs-keyword">return</span> memo[(K, N)]<br>                            <br>        <span class="hljs-comment"># for 1 &lt;= i &lt;= N:</span><br>        <span class="hljs-comment">#     res = min(res, </span><br>        <span class="hljs-comment">#             max( </span><br>        <span class="hljs-comment">#                 dp(K - 1, i - 1), </span><br>        <span class="hljs-comment">#                 dp(K, N - i)      </span><br>        <span class="hljs-comment">#                 ) + 1 </span><br>        <span class="hljs-comment">#             )</span><br>        res = float(<span class="hljs-string">&#x27;INF&#x27;</span>)<br>        <span class="hljs-comment"># 用二分搜索代替线性搜索</span><br>        lo, hi = <span class="hljs-number">1</span>, N<br>        <span class="hljs-keyword">while</span> lo &lt;= hi:<br>            mid = (lo + hi) // <span class="hljs-number">2</span><br>            broken = dp(K - <span class="hljs-number">1</span>, mid - <span class="hljs-number">1</span>) <span class="hljs-comment"># 碎</span><br>            not_broken = dp(K, N - mid) <span class="hljs-comment"># 没碎</span><br>            <span class="hljs-comment"># res = min(max(碎，没碎) + 1)</span><br>            <span class="hljs-keyword">if</span> broken &gt; not_broken:<br>                hi = mid - <span class="hljs-number">1</span><br>                res = min(res, broken + <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">else</span>:<br>                lo = mid + <span class="hljs-number">1</span><br>                res = min(res, not_broken + <span class="hljs-number">1</span>)<br>        memo[(K, N)] = res<br>        <span class="hljs-keyword">return</span> res<br>    <br>    <span class="hljs-keyword">return</span> dp(K, N)<br></code></pre></td></tr></table></figure><p>这个算法的时间复杂度是多少呢？<strong>动态规划算法的时间复杂度就是子问题个数 × 函数本身的复杂度</strong>。<br>函数本身的复杂度就是忽略递归部分的复杂度，这里 <code>dp</code> 函数中用了一个二分搜索，所以函数本身的复杂度是 O(logN)。<br>子问题个数也就是不同状态组合的总数，显然是两个状态的乘积，也就是 O(KN)。<br>所以算法的总时间复杂度是 O(K*N*logN), 空间复杂度 O(KN)。效率上比之前的算法 O(KN^2) 要高效一些。</p><h3 id="重新定义状态转移"><a href="#重新定义状态转移" class="headerlink" title="重新定义状态转移"></a>重新定义状态转移</h3><p>前文「不同定义有不同解法」就提过，找动态规划的状态转移本就是见仁见智，比较玄学的事情，不同的状态定义可以衍生出不同的解法，其解法和复杂程度都可能有巨大差异。这里就是一个很好的例子。<br>再回顾一下我们之前定义的 <code>dp</code> 数组含义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dp</span>(<span class="hljs-params">k, n</span>) -&gt; int</span><br><span class="hljs-function"># 当前状态为 k 个鸡蛋，面对 n 层楼</span><br><span class="hljs-function"># 返回这个状态下最少的扔鸡蛋次数</span><br></code></pre></td></tr></table></figure><p>用 dp 数组表示的话也是一样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">dp[k][n] = m<br><span class="hljs-comment"># 当前状态为 k 个鸡蛋，面对 n 层楼</span><br><span class="hljs-comment"># 这个状态下最少的扔鸡蛋次数为 m</span><br></code></pre></td></tr></table></figure><p>按照这个定义，就是<strong>确定当前的鸡蛋个数和面对的楼层数，就知道最小扔鸡蛋次数</strong>。最终我们想要的答案就是 <code>dp(K, N)</code> 的结果。<br>这种思路下，肯定要穷举所有可能的扔法的，用二分搜索优化也只是做了「剪枝」，减小了搜索空间，但本质思路没有变，还是穷举。<br>现在，我们稍微修改 <code>dp</code> 数组的定义，<strong>确定当前的鸡蛋个数和最多允许的扔鸡蛋次数，就知道能够确定 <code>F</code> 的最高楼层数</strong>。具体来说是这个意思：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">dp[k][m] = n<br><span class="hljs-comment"># 当前有 k 个鸡蛋，可以尝试扔 m 次鸡蛋</span><br><span class="hljs-comment"># 这个状态下，最坏情况下最多能确切测试一栋 n 层的楼</span><br><span class="hljs-comment"># 比如说 dp[1][7] = 7 表示：</span><br><span class="hljs-comment"># 现在有 1 个鸡蛋，允许你扔 7 次;</span><br><span class="hljs-comment"># 这个状态下最多给你 7 层楼，</span><br><span class="hljs-comment"># 使得你可以确定楼层 F 使得鸡蛋恰好摔不碎</span><br><span class="hljs-comment"># （一层一层线性探查嘛）</span><br></code></pre></td></tr></table></figure><p>这其实就是我们原始思路的一个「反向」版本，我们先不管这种思路的状态转移怎么写，先来思考一下这种定义之下，最终想求的答案是什么？<br>我们最终要求的其实是扔鸡蛋次数 <code>m</code>，但是这时候 <code>m</code> 在状态之中而不是 <code>dp</code> 数组的结果，可以这样处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">superEggDrop</span><span class="hljs-params">(<span class="hljs-keyword">int</span> K, <span class="hljs-keyword">int</span> N)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> m = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (dp[K][m] &lt; N) &#123;<br>        m++;<br>        <span class="hljs-comment">// 状态转移...</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> m;<br>&#125;<br></code></pre></td></tr></table></figure><p>题目不是<strong>给你 <code>K</code> 鸡蛋，<code>N</code> 层楼，让你求最坏情况下最少的测试次数 <code>m</code></strong> 吗？<code>while</code> 循环结束的条件是 <code>dp[K][m] == N</code>，也就是<strong>给你 <code>K</code> 个鸡蛋，测试 <code>m</code> 次，最坏情况下最多能测试 <code>N</code> 层楼</strong>。<br>注意看这两段描述，是完全一样的！所以说这样组织代码是正确的，关键就是状态转移方程怎么找呢？还得从我们原始的思路开始讲。之前的解法配了这样图帮助大家理解状态转移思路：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%89%94%E9%B8%A1%E8%9B%8B/1.jpg"><br>这个图描述的仅仅是某一个楼层 <code>i</code>，原始解法还得线性或者二分扫描所有楼层，要求最大值、最小值。但是现在这种 <code>dp</code> 定义根本不需要这些了，基于下面两个事实：<br><strong>1、无论你在哪层楼扔鸡蛋，鸡蛋只可能摔碎或者没摔碎，碎了的话就测楼下，没碎的话就测楼上</strong>。<br><strong>2、无论你上楼还是下楼，总的楼层数 = 楼上的楼层数 + 楼下的楼层数 + 1（当前这层楼）</strong>。<br>根据这个特点，可以写出下面的状态转移方程：<br><code>dp[k][m] = dp[k][m - 1] + dp[k - 1][m - 1] + 1</code><br>**<code>dp[k][m - 1]</code> 就是楼上的楼层数<strong>，因为鸡蛋个数 <code>k</code> 不变，也就是鸡蛋没碎，扔鸡蛋次数 <code>m</code> 减一；<br>**<code>dp[k - 1][m - 1]</code> 就是楼下的楼层数</strong>，因为鸡蛋个数 <code>k</code> 减一，也就是鸡蛋碎了，同时扔鸡蛋次数 <code>m</code> 减一。<br>PS：这个 <code>m</code> 为什么要减一而不是加一？之前定义得很清楚，这个 <code>m</code> 是一个允许的次数上界，而不是扔了几次。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%89%94%E9%B8%A1%E8%9B%8B/3.jpg"><br>至此，整个思路就完成了，只要把状态转移方程填进框架即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">superEggDrop</span><span class="hljs-params">(<span class="hljs-keyword">int</span> K, <span class="hljs-keyword">int</span> N)</span> </span>&#123;<br>    <span class="hljs-comment">// m 最多不会超过 N 次（线性扫描）</span><br>    <span class="hljs-keyword">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[K + <span class="hljs-number">1</span>][N + <span class="hljs-number">1</span>];<br>    <span class="hljs-comment">// base case:</span><br>    <span class="hljs-comment">// dp[0][..] = 0</span><br>    <span class="hljs-comment">// dp[..][0] = 0</span><br>    <span class="hljs-comment">// Java 默认初始化数组都为 0</span><br>    <span class="hljs-keyword">int</span> m = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (dp[K][m] &lt; N) &#123;<br>        m++;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= K; k++)<br>            dp[k][m] = dp[k][m - <span class="hljs-number">1</span>] + dp[k - <span class="hljs-number">1</span>][m - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> m;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果你还觉得这段代码有点难以理解，其实它就等同于这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> m = <span class="hljs-number">1</span>; dp[K][m] &lt; N; m++)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= K; k++)<br>        dp[k][m] = dp[k][m - <span class="hljs-number">1</span>] + dp[k - <span class="hljs-number">1</span>][m - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>看到这种代码形式就熟悉多了吧，因为我们要求的不是 <code>dp</code> 数组里的值，而是某个符合条件的索引 <code>m</code>，所以用 <code>while</code> 循环来找到这个 <code>m</code> 而已。<br>这个算法的时间复杂度是多少？很明显就是两个嵌套循环的复杂度 O(KN)。<br>另外注意到 <code>dp[m][k]</code> 转移只和左边和左上的两个状态有关，所以很容易优化成一维 <code>dp</code> 数组，这里就不写了。</p><h3 id="还可以再优化"><a href="#还可以再优化" class="headerlink" title="还可以再优化"></a>还可以再优化</h3><p>再往下就要用一些数学方法了，不具体展开，就简单提一下思路吧。<br>在刚才的思路之上，<strong>注意函数 <code>dp(m, k)</code> 是随着 <code>m</code> 单增的，因为鸡蛋个数 <code>k</code> 不变时，允许的测试次数越多，可测试的楼层就越高</strong>。<br>这里又可以借助二分搜索算法快速逼近 <code>dp[K][m] == N</code> 这个终止条件，时间复杂度进一步下降为 O(KlogN)，我们可以设 <code>g(k, m) =</code>……<br>算了算了，打住吧。我觉得我们能够写出 O(K*N*logN) 的二分优化算法就行了，后面的这些解法呢，听个响鼓个掌就行了，把欲望限制在能力的范围之内才能拥有快乐！<br>不过可以肯定的是，根据二分搜索代替线性扫描 <code>m</code> 的取值，代码的大致框架肯定是修改穷举 <code>m</code> 的 for 循环：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 把线性搜索改成二分搜索</span><br><span class="hljs-comment">// for (int m = 1; dp[K][m] &lt; N; m++)</span><br><span class="hljs-keyword">int</span> lo = <span class="hljs-number">1</span>, hi = N;<br><span class="hljs-keyword">while</span> (lo &lt; hi) &#123;<br>    <span class="hljs-keyword">int</span> mid = (lo + hi) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (... &lt; N) &#123;<br>        lo = ...<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        hi = ...<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= K; k++)<br>        <span class="hljs-comment">// 状态转移方程</span><br>&#125;<br></code></pre></td></tr></table></figure><p>简单总结一下吧，第一个二分优化是利用了 <code>dp</code> 函数的单调性，用二分查找技巧快速搜索答案；第二种优化是巧妙地修改了状态转移方程，简化了求解了流程，但相应的，解题逻辑比较难以想到；后续还可以用一些数学方法和二分搜索进一步优化第二种解法，不过看了看镜子中的发量，算了。<br>本文终，希望对你有一点启发。</p><p><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E9%AB%98%E6%A5%BC%E6%89%94%E9%B8%A1%E8%9B%8B%E9%97%AE%E9%A2%98">上一篇：经典动态规划问题：高楼扔鸡蛋</a><br><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%E6%A8%A1%E6%9D%BF">下一篇：动态规划之子序列问题解题模板</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高楼扔鸡蛋问题</title>
      <link href="2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E9%AB%98%E6%A5%BC%E6%89%94%E9%B8%A1%E8%9B%8B%E9%97%AE%E9%A2%98/"/>
      <url>2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E9%AB%98%E6%A5%BC%E6%89%94%E9%B8%A1%E8%9B%8B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="经典动态规划问题：高楼扔鸡蛋"><a href="#经典动态规划问题：高楼扔鸡蛋" class="headerlink" title="经典动态规划问题：高楼扔鸡蛋"></a>经典动态规划问题：高楼扔鸡蛋</h1><p>今天要聊一个很经典的算法问题，若干层楼，若干个鸡蛋，让你算出最少的尝试次数，找到鸡蛋恰好摔不碎的那层楼。国内大厂以及谷歌脸书面试都经常考察这道题，只不过他们觉得扔鸡蛋太浪费，改成扔杯子，扔破碗什么的。<br>具体的问题等会再说，但是这道题的解法技巧很多，光动态规划就好几种效率不同的思路，最后还有一种极其高效数学解法。秉承咱们号一贯的作风，拒绝奇技淫巧，拒绝过于诡异的技巧，因为这些技巧无法举一反三，学了也不划算。<br>下面就来用我们一直强调的动态规划通用思路来研究一下这道题。</p><h3 id="一、解析题目"><a href="#一、解析题目" class="headerlink" title="一、解析题目"></a>一、解析题目</h3><p>题目是这样：你面前有一栋从 1 到 <code>N</code> 共 <code>N</code> 层的楼，然后给你 <code>K</code> 个鸡蛋（<code>K</code> 至少为 1）。现在确定这栋楼存在楼层 <code>0 &lt;= F &lt;= N</code>，在这层楼将鸡蛋扔下去，鸡蛋<strong>恰好没摔碎</strong>（高于 <code>F</code> 的楼层都会碎，低于 <code>F</code> 的楼层都不会碎）。现在问你，<strong>最坏</strong>情况下，你<strong>至少</strong>要扔几次鸡蛋，才能<strong>确定</strong>这个楼层 <code>F</code> 呢？<br>也就是让你找摔不碎鸡蛋的最高楼层 <code>F</code>，但什么叫「最坏情况」下「至少」要扔几次呢？我们分别举个例子就明白了。<br>比方说<strong>现在先不管鸡蛋个数的限制</strong>，有 7 层楼，你怎么去找鸡蛋恰好摔碎的那层楼？<br>最原始的方式就是线性扫描：我先在 1 楼扔一下，没碎，我再去 2 楼扔一下，没碎，我再去 3 楼……<br>以这种策略，<strong>最坏</strong>情况应该就是我试到第 7 层鸡蛋也没碎（<code>F = 7</code>），也就是我扔了 7 次鸡蛋。<br>先在你应该理解什么叫做「最坏情况」下了，<strong>鸡蛋破碎一定发生在搜索区间穷尽时</strong>，不会说你在第 1 层摔一下鸡蛋就碎了，这是你运气好，不是最坏情况。<br>现在再来理解一下什么叫「至少」要扔几次。依然不考虑鸡蛋个数限制，同样是 7 层楼，我们可以优化策略。<br>最好的策略是使用二分查找思路，我先去第 <code>(1 + 7) / 2 = 4</code> 层扔一下：<br>如果碎了说明 <code>F</code> 小于 4，我就去第 <code>(1 + 3) / 2 = 2</code> 层试……<br>如果没碎说明 <code>F</code> 大于等于 4，我就去第 <code>(5 + 7) / 2 = 6</code> 层试……<br>以这种策略，<strong>最坏</strong>情况应该是试到第 7 层鸡蛋还没碎（<code>F = 7</code>），或者鸡蛋一直碎到第 1 层（<code>F = 0</code>）。然而无论那种最坏情况，只需要试 <code>log7</code> 向上取整等于 3 次，比刚才尝试 7 次要少，这就是所谓的<strong>至少</strong>要扔几次。<br>PS：这有点像 Big O 表示法计算​算法的复杂度。<br>实际上，如果不限制鸡蛋个数的话，二分思路显然可以得到最少尝试的次数，但问题是，<strong>现在给你了鸡蛋个数的限制 <code>K</code>，直接使用二分思路就不行了</strong>。<br>比如说只给你 1 个鸡蛋，7 层楼，你敢用二分吗？你直接去第 4 层扔一下，如果鸡蛋没碎还好，但如果碎了你就没有鸡蛋继续测试了，无法确定鸡蛋恰好摔不碎的楼层 <code>F</code> 了。这种情况下只能用线性扫描的方法，算法返回结果应该是 7。<br>有的读者也许会有这种想法：二分查找排除楼层的速度无疑是最快的，那干脆先用二分查找，等到只剩 1 个鸡蛋的时候再执行线性扫描，这样得到的结果是不是就是最少的扔鸡蛋次数呢？<br>很遗憾，并不是，比如说把楼层变高一些，100 层，给你 2 个鸡蛋，你在 50 层扔一下，碎了，那就只能线性扫描 1～49 层了，最坏情况下要扔 50 次。<br>如果不要「二分」，变成「五分」「十分」都会大幅减少最坏情况下的尝试次数。比方说第一个鸡蛋每隔十层楼扔，在哪里碎了第二个鸡蛋一个个线性扫描，总共不会超过 20 次​。<br>最优解其实是 14 次。最优策略非常多，而且并没有什么规律可言。<br>说了这么多废话，就是确保大家理解了题目的意思，而且认识到这个题目确实复杂，就连我们手算都不容易，如何用算法解决呢？</p><h3 id="二、思路分析"><a href="#二、思路分析" class="headerlink" title="二、思路分析"></a>二、思路分析</h3><p>对动态规划问题，直接套我们以前多次强调的框架即可：这个问题有什么「状态」，有什么「选择」，然后穷举。<br><strong>「状态」很明显，就是当前拥有的鸡蛋数 <code>K</code> 和需要测试的楼层数 <code>N</code>**。随着测试的进行，鸡蛋个数可能减少，楼层的搜索范围会减小，这就是状态的变化。<br>**「选择」其实就是去选择哪层楼扔鸡蛋</strong>。回顾刚才的线性扫描和二分思路，二分查找每次选择到楼层区间的中间去扔鸡蛋，而线性扫描选择一层层向上测试。不同的选择会造成状态的转移。<br>现在明确了「状态」和「选择」，<strong>动态规划的基本思路就形成了</strong>：肯定是个二维的 <code>dp</code> 数组或者带有两个状态参数的 <code>dp</code> 函数来表示状态转移；外加一个 for 循环来遍历所有选择，择最优的选择更新状态：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 当前状态为 K 个鸡蛋，面对 N 层楼</span><br><span class="hljs-comment"># 返回这个状态下的最优结果</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dp</span>(<span class="hljs-params">K, N</span>):</span><br>    int res<br>    <span class="hljs-keyword">for</span> <span class="hljs-number">1</span> &lt;= i &lt;= N:<br>        res = min(res, 这次在第 i 层楼扔鸡蛋)<br>    <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p>这段伪码还没有展示递归和状态转移，不过大致的算法框架已经完成了。<br>我们选择在第 <code>i</code> 层楼扔了鸡蛋之后，可能出现两种情况：鸡蛋碎了，鸡蛋没碎。<strong>注意，这时候状态转移就来了</strong>：<br><strong>如果鸡蛋碎了</strong>，那么鸡蛋的个数 <code>K</code> 应该减一，搜索的楼层区间应该从 <code>[1..N]</code> 变为 <code>[1..i-1]</code> 共 <code>i-1</code> 层楼；<br><strong>如果鸡蛋没碎</strong>，那么鸡蛋的个数 <code>K</code> 不变，搜索的楼层区间应该从  <code>[1..N]</code> 变为 <code>[i+1..N]</code> 共 <code>N-i</code> 层楼。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%89%94%E9%B8%A1%E8%9B%8B/1.jpg"><br>PS：细心的读者可能会问，在第i层楼扔鸡蛋如果没碎，楼层的搜索区间缩小至上面的楼层，是不是应该包含第i层楼呀？不必，因为已经包含了。开头说了 F 是可以等于 0 的，向上递归后，第i层楼其实就相当于第 0 层，可以被取到，所以说并没有错误。<br>因为我们要求的是<strong>最坏情况</strong>下扔鸡蛋的次数，所以鸡蛋在第 <code>i</code> 层楼碎没碎，取决于那种情况的结果<strong>更大</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dp</span>(<span class="hljs-params">K, N</span>):</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-number">1</span> &lt;= i &lt;= N:<br>        <span class="hljs-comment"># 最坏情况下的最少扔鸡蛋次数</span><br>        res = min(res, <br>                  max( <br>                        dp(K - <span class="hljs-number">1</span>, i - <span class="hljs-number">1</span>), <span class="hljs-comment"># 碎</span><br>                        dp(K, N - i)      <span class="hljs-comment"># 没碎</span><br>                     ) + <span class="hljs-number">1</span> <span class="hljs-comment"># 在第 i 楼扔了一次</span><br>                 )<br>    <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p>递归的 base case 很容易理解：当楼层数 <code>N</code> 等于 0 时，显然不需要扔鸡蛋；当鸡蛋数 <code>K</code> 为 1 时，显然只能线性扫描所有楼层：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dp</span>(<span class="hljs-params">K, N</span>):</span><br>    <span class="hljs-keyword">if</span> K == <span class="hljs-number">1</span>: <span class="hljs-keyword">return</span> N<br>    <span class="hljs-keyword">if</span> N == <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    ...<br></code></pre></td></tr></table></figure><p>至此，其实这道题就解决了！只要添加一个备忘录消除重叠子问题即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">superEggDrop</span>(<span class="hljs-params">K: int, N: int</span>):</span><br>    memo = dict()<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dp</span>(<span class="hljs-params">K, N</span>) -&gt; int:</span><br>        <span class="hljs-comment"># base case</span><br>        <span class="hljs-keyword">if</span> K == <span class="hljs-number">1</span>: <span class="hljs-keyword">return</span> N<br>        <span class="hljs-keyword">if</span> N == <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 避免重复计算</span><br>        <span class="hljs-keyword">if</span> (K, N) <span class="hljs-keyword">in</span> memo:<br>            <span class="hljs-keyword">return</span> memo[(K, N)]<br>        res = float(<span class="hljs-string">&#x27;INF&#x27;</span>)<br>        <span class="hljs-comment"># 穷举所有可能的选择</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, N + <span class="hljs-number">1</span>):<br>            res = min(res, <br>                      max(<br>                            dp(K, N - i), <br>                            dp(K - <span class="hljs-number">1</span>, i - <span class="hljs-number">1</span>)<br>                         ) + <span class="hljs-number">1</span><br>                  )<br>        <span class="hljs-comment"># 记入备忘录</span><br>        memo[(K, N)] = res<br>        <span class="hljs-keyword">return</span> res<br>    <br>    <span class="hljs-keyword">return</span> dp(K, N)<br></code></pre></td></tr></table></figure><p>这个算法的时间复杂度是多少呢？<strong>动态规划算法的时间复杂度就是子问题个数 × 函数本身的复杂度</strong>。<br>函数本身的复杂度就是忽略递归部分的复杂度，这里 <code>dp</code> 函数中有一个 for 循环，所以函数本身的复杂度是 O(N)。<br>子问题个数也就是不同状态组合的总数，显然是两个状态的乘积，也就是 O(KN)。<br>所以算法的总时间复杂度是 O(K*N^2), 空间复杂度 O(KN)。</p><h3 id="三、疑难解答"><a href="#三、疑难解答" class="headerlink" title="三、疑难解答"></a>三、疑难解答</h3><p>这个问题很复杂，但是算法代码却十分简洁，这就是动态规划的特性，穷举加备忘录/DP table 优化，真的没啥新意。<br>首先，有读者可能不理解代码中为什么用一个 for 循环遍历楼层 <code>[1..N]</code>，也许会把这个逻辑和之前探讨的线性扫描混为一谈。其实不是的，<strong>这只是在做一次「选择」</strong>。<br>比方说你有 2 个鸡蛋，面对 10 层楼，你<strong>这次</strong>选择去哪一层楼扔呢？不知道，那就把这 10 层楼全试一遍。至于下次怎么选择不用你操心，有正确的状态转移，递归会算出每个选择的代价，我们取最优的那个就是最优解。<br>另外，这个问题还有更好的解法，比如修改代码中的 for 循环为二分搜索，可以将时间复杂度降为 O(K*N*logN)；再改进动态规划解法可以进一步降为 O(KN)；使用数学方法解决，时间复杂度达到最优 O(K*logN)，空间复杂度达到 O(1)。<br>二分的解法也有点误导性，你很可能以为它跟我们之前讨论的二分思路扔鸡蛋有关系，实际上没有半毛钱关系。能用二分搜索是因为状态转移方程的函数图像具有单调性，可以快速找到最值。<br>简单介绍一下二分查找的优化吧，其实只是在优化这段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dp</span>(<span class="hljs-params">K, N</span>):</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-number">1</span> &lt;= i &lt;= N:<br>        <span class="hljs-comment"># 最坏情况下的最少扔鸡蛋次数</span><br>        res = min(res, <br>                  max( <br>                        dp(K - <span class="hljs-number">1</span>, i - <span class="hljs-number">1</span>), <span class="hljs-comment"># 碎</span><br>                        dp(K, N - i)      <span class="hljs-comment"># 没碎</span><br>                     ) + <span class="hljs-number">1</span> <span class="hljs-comment"># 在第 i 楼扔了一次</span><br>                 )<br>    <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p>这个 for 循环就是下面这个状态转移方程的具体代码实现：</p><p>$ dp(K, N) = \min_{0 &lt;= i &lt;= N}{\max{dp(K - 1, i - 1), dp(K, N - i)} + 1} $</p><p>首先我们根据 <code>dp(K, N)</code> 数组的定义（有 <code>K</code> 个鸡蛋面对 <code>N</code> 层楼，最少需要扔几次），<strong>很容易知道 <code>K</code> 固定时，这个函数一定是单调递增的</strong>，无论你策略多聪明，楼层增加测试次数一定要增加。<br>那么注意 <code>dp(K - 1, i - 1)</code> 和 <code>dp(K, N - i)</code> 这两个函数，其中 <code>i</code> 是从 1 到 <code>N</code> 单增的，如果我们固定 <code>K</code> 和 <code>N</code>，<strong>把这两个函数看做关于 <code>i</code> 的函数，前者随着 <code>i</code> 的增加应该也是单调递增的，而后者随着 <code>i</code> 的增加应该是单调递减的</strong>：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%89%94%E9%B8%A1%E8%9B%8B/2.jpg"><br>这时候求二者的较大值，再求这些最大值之中的最小值，其实就是求这个交点嘛，熟悉二分搜索的同学肯定敏感地想到了，这不就是相当于求 Valley（山谷）值嘛，可以用二分查找来快速寻找这个点的。<br>直接贴一下代码吧，思路还是完全一样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">superEggDrop</span>(<span class="hljs-params">self, K: int, N: int</span>) -&gt; int:</span><br>        <br>    memo = dict()<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dp</span>(<span class="hljs-params">K, N</span>):</span><br>        <span class="hljs-keyword">if</span> K == <span class="hljs-number">1</span>: <span class="hljs-keyword">return</span> N<br>        <span class="hljs-keyword">if</span> N == <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> (K, N) <span class="hljs-keyword">in</span> memo:<br>            <span class="hljs-keyword">return</span> memo[(K, N)]<br>                            <br>        <span class="hljs-comment"># for 1 &lt;= i &lt;= N:</span><br>        <span class="hljs-comment">#     res = min(res, </span><br>        <span class="hljs-comment">#             max( </span><br>    <span class="hljs-comment">#                     dp(K - 1, i - 1), </span><br>    <span class="hljs-comment">#                     dp(K, N - i)      </span><br>        <span class="hljs-comment">#                 ) + 1 </span><br>        <span class="hljs-comment">#             )</span><br>        res = float(<span class="hljs-string">&#x27;INF&#x27;</span>)<br>        <span class="hljs-comment"># 用二分搜索代替线性搜索</span><br>        lo, hi = <span class="hljs-number">1</span>, N<br>        <span class="hljs-keyword">while</span> lo &lt;= hi:<br>            mid = (lo + hi) // <span class="hljs-number">2</span><br>            broken = dp(K - <span class="hljs-number">1</span>, mid - <span class="hljs-number">1</span>) <span class="hljs-comment"># 碎</span><br>            not_broken = dp(K, N - mid) <span class="hljs-comment"># 没碎</span><br>            <span class="hljs-comment"># res = min(max(碎，没碎) + 1)</span><br>            <span class="hljs-keyword">if</span> broken &gt; not_broken:<br>                hi = mid - <span class="hljs-number">1</span><br>                res = min(res, broken + <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">else</span>:<br>                lo = mid + <span class="hljs-number">1</span><br>                res = min(res, not_broken + <span class="hljs-number">1</span>)<br>        memo[(K, N)] = res<br>        <span class="hljs-keyword">return</span> res<br>    <br>    <span class="hljs-keyword">return</span> dp(K, N)<br></code></pre></td></tr></table></figure><p>这里就不展开其他解法了，留在下一篇文章 <a href="%E9%AB%98%E6%A5%BC%E6%89%94%E9%B8%A1%E8%9B%8B%E8%BF%9B%E9%98%B6">高楼扔鸡蛋进阶</a><br>我觉得吧，我们这种解法就够了：找状态，做选择，足够清晰易懂，可流程化，可举一反三。掌握这套框架学有余力的话，再去考虑那些奇技淫巧也不迟。<br>最后预告一下，《动态规划详解（修订版）》和《回溯算法详解（修订版）》已经动笔了，教大家用模板的力量来对抗变化无穷的算法题，敬请期待。</p><p><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB">上一篇：编辑距离</a><br><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E9%AB%98%E6%A5%BC%E6%89%94%E9%B8%A1%E8%9B%8B%E8%BF%9B%E9%98%B6">下一篇：经典动态规划问题：高楼扔鸡蛋（进阶）</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linuxshell</title>
      <link href="2016/01/01/%E6%8A%80%E6%9C%AF/linuxshell/"/>
      <url>2016/01/01/%E6%8A%80%E6%9C%AF/linuxshell/</url>
      
        <content type="html"><![CDATA[<p>我个人很喜欢使用 Linux 系统，虽然说 Windows 的图形化界面做的确实比 Linux 好，但是对脚本的支持太差了。一开始有点不习惯命令行操作，但是熟悉了之后反而发现移动鼠标点点点才是浪费时间的罪魁祸首。。。<br><strong>那么对于 Linux 命令行，本文不是介绍某些命令的用法，而是说明一些简单却特别容易让人迷惑的细节问题</strong>。<br>1、标准输入和命令参数的区别。<br>2、在后台运行命令在退出终端后也全部退出了。<br>3、单引号和双引号表示字符串的区别。<br>4、有的命令和<code>sudo</code>一起用就 command not found。</p><h3 id="一、标准输入和参数的区别"><a href="#一、标准输入和参数的区别" class="headerlink" title="一、标准输入和参数的区别"></a>一、标准输入和参数的区别</h3><p>这个问题一定是最容易让人迷惑的，具体来说，就是搞不清什么时候用管道符<code>|</code>和文件重定向<code>&gt;</code>，<code>&lt;</code>，什么时候用变量<code>$</code>。<br>比如说，我现在有个自动连接宽带的 shell 脚本<code>connect.sh</code>，存在我的家目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">where</span> connect.sh</span><br>/home/fdl/bin/connect.sh<br></code></pre></td></tr></table></figure><p>如果我想删除这个脚本，而且想少敲几次键盘，应该怎么操作呢？我曾经这样尝试过：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">where</span> connect.sh | rm</span><br></code></pre></td></tr></table></figure><p>实际上，这样操作是错误的，正确的做法应该是这样的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> rm $(<span class="hljs-built_in">where</span> connect.sh)</span><br></code></pre></td></tr></table></figure><p>前者试图将<code>where</code>的结果连接到<code>rm</code>的标准输入，后者试图将结果作为命令行参数传入。<br><strong>标准输入就是编程语言中诸如<code>scanf</code>或者<code>readline</code>这种命令；而参数是指程序的<code>main</code>函数传入的<code>args</code>字符数组</strong>。<br>前文「Linux文件描述符」说过，管道符和重定向符是将数据作为程序的标准输入，而<code>$(cmd)</code>是读取<code>cmd</code>命令输出的数据作为参数。<br>用刚才的例子说，<code>rm</code>命令源代码中肯定不接受标准输入，而是接收命令行参数，删除相应的文件。作为对比，<code>cat</code>命令是既接受标准输入，又接受命令行参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> cat filename</span><br>...file text...<br><span class="hljs-meta">$</span><span class="bash"> cat &lt; filename</span><br>...file text...<br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;hello world&#x27;</span> | cat</span><br>hello world<br></code></pre></td></tr></table></figure><p><strong>如果命令能够让终端阻塞，说明该命令接收标准输入，反之就是不接受</strong>，比如你只运行<code>cat</code>命令不加任何参数，终端就会阻塞，等待你输入字符串并回显相同的字符串。</p><h3 id="二、后台运行程序"><a href="#二、后台运行程序" class="headerlink" title="二、后台运行程序"></a>二、后台运行程序</h3><p>比如说你远程登录到服务器上，运行一个 Django web 程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> python manager.py runserver 0.0.0.0</span><br>Listening on 0.0.0.0:8080...<br></code></pre></td></tr></table></figure><p>现在你可以通过服务器的 IP 地址测试 Django 服务，但是终端此时就阻塞了，你输入什么都不响应，除非输入 Ctrl-C 或者 Ctrl-/ 终止 python 进程。<br>可以在命令之后加一个<code>&amp;</code>符号，这样命令行不会阻塞，可以响应你后续输入的命令，但是如果你退出服务器的登录，就不能访问该网页了。<br>如果你想在退出服务器之后仍然能够访问 web 服务，应该这样写命令 <code>(cmd &amp;)</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> (python manager.py runserver 0.0.0.0 &amp;)</span><br>Listening on 0.0.0.0:8080...<br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">logout</span></span><br></code></pre></td></tr></table></figure><p><strong>底层原理是这样的</strong>：<br>每一个命令行终端都是一个 shell 进程，你在这个终端里执行的程序实际上都是这个 shell 进程分出来的子进程。正常情况下，shell 进程会阻塞，等待子进程退出才重新接收你输入的新的命令。加上<code>&amp;</code>号，只是让 shell 进程不再阻塞，可以继续响应你的新命令。但是无论如何，你如果关掉了这个 shell 命令行端口，依附于它的所有子进程都会退出。<br>而<code>(cmd &amp;)</code>这样运行命令，则是将<code>cmd</code>命令挂到一个<code>systemd</code>系统守护进程名下，认<code>systemd</code>做爸爸，这样当你退出当前终端时，对于刚才的<code>cmd</code>命令就完全没有影响了。<br>类似的，还有一种后台运行常用的做法是这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> nohub some_cmd &amp;</span><br></code></pre></td></tr></table></figure><p><code>nohub</code>命令也是类似的原理，不过通过我的测试，还是<code>(cmd &amp;)</code>这种形式更加稳定。</p><h3 id="三、单引号和双引号的区别"><a href="#三、单引号和双引号的区别" class="headerlink" title="三、单引号和双引号的区别"></a>三、单引号和双引号的区别</h3><p>不同的 shell 行为会有细微区别，但有一点是确定的，<strong>对于<code>$</code>，<code>(</code>，<code>)</code>这几个符号，单引号包围的字符串不会做任何转义，双引号包围的字符串会转义</strong>。<br>shell 的行为可以测试，使用<code>set -x</code>命令，会开启 shell 的命令回显，你可以通过回显观察 shell 到底在执行什么命令：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/linuxshell/1.png"><br>可见 <code>echo $(cmd)</code> 和 <code>echo &quot;$(cmd)&quot;</code>，结果差不多，但是仍然有区别。注意观察，双引号转义完成的结果会自动增加单引号，而前者不会。<br><strong>也就是说，如果 <code>$</code> 读取出的参数字符串包含空格，应该用双引号括起来，否则就会出错</strong>。</p><h3 id="四、sudo-找不到命令"><a href="#四、sudo-找不到命令" class="headerlink" title="四、sudo 找不到命令"></a>四、sudo 找不到命令</h3><p>有时候我们普通用户可以用的命令，用<code>sudo</code>加权限之后却报错 command not found：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> connect.sh</span><br>network-manager: Permission denied<br><span class="hljs-meta">$</span><span class="bash"> sudo connect.sh</span><br>sudo: command not found<br></code></pre></td></tr></table></figure><p>原因在于，<code>connect.sh</code>这个脚本仅存在于该用户的环境变量中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">where</span> connect.sh </span><br>/home/fdl/bin/connect.sh<br></code></pre></td></tr></table></figure><p><strong>当使用<code>sudo</code>时，系统认为是 root 用户在执行命令，所以会去搜索 root 用户的环境变量</strong>，而这个脚本在 root 的环境变量目录中当然是找不到的。<br>解决方法是使用脚本文件的路径，而不是仅仅通过脚本名称：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo /home/fdl/bin/connect.sh</span><br></code></pre></td></tr></table></figure><p><a href="/2016/01/01/%E6%8A%80%E6%9C%AF/session%E5%92%8Ccookie">上一篇：一文看懂 session 和 cookie</a><br><a href="/2016/01/01/%E6%8A%80%E6%9C%AF/%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF">下一篇：加密算法的前身今世</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux进程</title>
      <link href="2016/01/01/%E6%8A%80%E6%9C%AF/linux%E8%BF%9B%E7%A8%8B/"/>
      <url>2016/01/01/%E6%8A%80%E6%9C%AF/linux%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux的进程、线程、文件描述符是什么"><a href="#Linux的进程、线程、文件描述符是什么" class="headerlink" title="Linux的进程、线程、文件描述符是什么"></a>Linux的进程、线程、文件描述符是什么</h1><p>说到进程，恐怕面试中最常见的问题就是线程和进程的关系了，那么先说一下答案：<strong>在 Linux 系统中，进程和线程几乎没有区别</strong>。<br>Linux 中的进程就是一个数据结构，看明白就可以理解文件描述符、重定向、管道命令的底层工作原理，最后我们从操作系统的角度看看为什么说线程和进程基本没有区别。</p><h3 id="一、进程是什么"><a href="#一、进程是什么" class="headerlink" title="一、进程是什么"></a>一、进程是什么</h3><p>首先，抽象地来说，我们的计算机就是这个东西：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/linuxProcess/1.jpg"><br>这个大的矩形表示计算机的<strong>内存空间</strong>，其中的小矩形代表<strong>进程</strong>，左下角的圆形表示<strong>磁盘</strong>，右下角的图形表示一些<strong>输入输出设备</strong>，比如鼠标键盘显示器等等。另外，注意到内存空间被划分为了两块，上半部分表示<strong>用户空间</strong>，下半部分表示<strong>内核空间</strong>。<br>用户空间装着用户进程需要使用的资源，比如你在程序代码里开一个数组，这个数组肯定存在用户空间；内核空间存放内核进程需要加载的系统资源，这一些资源一般是不允许用户访问的。但是注意有的用户进程会共享一些内核空间的资源，比如一些动态链接库等等。<br>我们用 C 语言写一个 hello 程序，编译后得到一个可执行文件，在命令行运行就可以打印出一句 hello world，然后程序退出。在操作系统层面，就是新建了一个进程，这个进程将我们编译出来的可执行文件读入内存空间，然后执行，最后退出。<br><strong>你编译好的那个可执行程序只是一个文件</strong>，不是进程，可执行文件必须要载入内存，包装成一个进程才能真正跑起来。进程是要依靠操作系统创建的，每个进程都有它的固有属性，比如进程号（PID）、进程状态、打开的文件等等，进程创建好之后，读入你的程序，你的程序才被系统执行。<br>那么，操作系统是如何创建进程的呢？<strong>对于操作系统，进程就是一个数据结构</strong>，我们直接来看 Linux 的源码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> &#123;</span><br><span class="hljs-comment">// 进程状态</span><br><span class="hljs-keyword">long</span>  state;<br><span class="hljs-comment">// 虚拟内存结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span>  *<span class="hljs-title">mm</span>;</span><br><span class="hljs-comment">// 进程号</span><br><span class="hljs-keyword">pid_t</span>  pid;<br><span class="hljs-comment">// 指向父进程的指针</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> __<span class="hljs-title">rcu</span>  *<span class="hljs-title">parent</span>;</span><br><span class="hljs-comment">// 子进程列表</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span><span class="hljs-title">children</span>;</span><br><span class="hljs-comment">// 存放文件系统信息的指针</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fs_struct</span>*<span class="hljs-title">fs</span>;</span><br><span class="hljs-comment">// 一个数组，包含该进程打开的文件指针</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">files_struct</span>*<span class="hljs-title">files</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><code>task_struct</code>就是 Linux 内核对于一个进程的描述，也可以称为「进程描述符」。源码比较复杂，我这里就截取了一小部分比较常见的。<br>其中比较有意思的是<code>mm</code>指针和<code>files</code>指针。<code>mm</code>指向的是进程的虚拟内存，也就是载入资源和可执行文件的地方；<code>files</code>指针指向一个数组，这个数组里装着所有该进程打开的文件的指针。</p><h3 id="二、文件描述符是什么"><a href="#二、文件描述符是什么" class="headerlink" title="二、文件描述符是什么"></a>二、文件描述符是什么</h3><p>先说<code>files</code>，它是一个文件指针数组。一般来说，一个进程会从<code>files[0]</code>读取输入，将输出写入<code>files[1]</code>，将错误信息写入<code>files[2]</code>。<br>举个例子，以我们的角度 C 语言的<code>printf</code>函数是向命令行打印字符，但是从进程的角度来看，就是向<code>files[1]</code>写入数据；同理，<code>scanf</code>函数就是进程试图从<code>files[0]</code>这个文件中读取数据。<br><strong>每个进程被创建时，<code>files</code>的前三位被填入默认值，分别指向标准输入流、标准输出流、标准错误流。我们常说的「文件描述符」就是指这个文件指针数组的索引</strong>，所以程序的文件描述符默认情况下 0 是输入，1 是输出，2 是错误。</p><p>我们可以重新画一幅图：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/linuxProcess/2.jpg"><br>对于一般的计算机，输入流是键盘，输出流是显示器，错误流也是显示器，所以现在这个进程和内核连了三根线。因为硬件都是由内核管理的，我们的进程需要通过「系统调用」让内核进程访问硬件资源。<br>PS：不要忘了，Linux 中一切都被抽象成文件，设备也是文件，可以进行读和写。<br>如果我们写的程序需要其他资源，比如打开一个文件进行读写，这也很简单，进行系统调用，让内核把文件打开，这个文件就会被放到<code>files</code>的第 4 个位置：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/linuxProcess/3.jpg"><br>明白了这个原理，<strong>输入重定向</strong>就很好理解了，程序想读取数据的时候就会去<code>files[0]</code>读取，所以我们只要把<code>files[0]</code>指向一个文件，那么程序就会从这个文件中读取数据，而不是从键盘：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">command</span> &lt; file.txt</span><br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/linuxProcess/5.jpg"><br>同理，<strong>输出重定向</strong>就是把<code>files[1]</code>指向一个文件，那么程序的输出就不会写入到显示器，而是写入到这个文件中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">command</span> &gt; file.txt</span><br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/linuxProcess/4.jpg"><br>错误重定向也是一样的，就不再赘述。<br><strong>管道符</strong>其实也是异曲同工，把一个进程的输出流和另一个进程的输入流接起一条「管道」，数据就在其中传递，不得不说这种设计思想真的很优美：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> cmd1 | cmd2 | cmd3</span><br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/linuxProcess/6.jpg"><br>到这里，你可能也看出「Linux 中一切皆文件」设计思路的高明了，不管是设备、另一个进程、socket 套接字还是真正的文件，全部都可以读写，统一装进一个简单的<code>files</code>数组，进程通过简单的文件描述符访问相应资源，具体细节交于操作系统，有效解耦，优美高效。</p><h3 id="三、线程是什么"><a href="#三、线程是什么" class="headerlink" title="三、线程是什么"></a>三、线程是什么</h3><p>首先要明确的是，多进程和多线程都是并发，都可以提高处理器的利用效率，所以现在的关键是，多线程和多进程有啥区别。<br>为什么说 Linux 中线程和进程基本没有区别呢，因为从 Linux 内核的角度来看，并没有把线程和进程区别对待。<br>我们知道系统调用<code>fork()</code>可以新建一个子进程，函数<code>pthread()</code>可以新建一个线程。<strong>但无论线程还是进程，都是用<code>task_struct</code>结构表示的，唯一的区别就是共享的数据区域不同</strong>。<br>换句话说，线程看起来跟进程没有区别，只是线程的某些数据区域和其父进程是共享的，而子进程是拷贝副本，而不是共享。就比如说，<code>mm</code>结构和<code>files</code>结构在线程中都是共享的，我画两张图你就明白了：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/linuxProcess/7.jpg"><br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/linuxProcess/8.jpg"><br>所以说，我们的多线程程序要利用锁机制，避免多个线程同时往同一区域写入数据，否则可能造成数据错乱。<br>那么你可能问，<strong>既然进程和线程差不多，而且多进程数据不共享，即不存在数据错乱的问题，为什么多线程的使用比多进程普遍得多呢</strong>？<br>因为现实中数据共享的并发更普遍呀，比如十个人同时从一个账户取十元，我们希望的是这个共享账户的余额正确减少一百元，而不是希望每人获得一个账户的拷贝，每个拷贝账户减少十元。<br>当然，必须要说明的是，只有 Linux 系统将线程看做共享数据的进程，不对其做特殊看待，其他的很多操作系统是对线程和进程区别对待的，线程有其特有的数据结构，我个人认为不如 Linux 的这种设计简洁，增加了系统的复杂度。<br>在 Linux 中新建线程和进程的效率都是很高的，对于新建进程时内存区域拷贝的问题，Linux 采用了 copy-on-write 的策略优化，也就是并不真正复制父进程的内存空间，而是等到需要写操作时才去复制。<strong>所以 Linux 中新建进程和新建线程都是很迅速的</strong>。</p><p><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7">上一篇：双指针技巧解题框架</a><br><a href="/2016/01/01/%E6%8A%80%E6%9C%AF/%E5%9C%A8%E7%BA%BF%E7%BB%83%E4%B9%A0%E5%B9%B3%E5%8F%B0">下一篇：Git/SQL/正则表达式的在线练习平台</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis入侵</title>
      <link href="2016/01/01/%E6%8A%80%E6%9C%AF/redis%E5%85%A5%E4%BE%B5/"/>
      <url>2016/01/01/%E6%8A%80%E6%9C%AF/redis%E5%85%A5%E4%BE%B5/</url>
      
        <content type="html"><![CDATA[<p>好吧，我也做了回标题党，像我这么细心的同学，怎么可能让服务器被入侵呢？<br>其实是这样的，昨天我和一个朋友聊天，他说他自己有一台云服务器运行了 Redis 数据库，有一天突然发现数据库里的<strong>数据全没了</strong>，只剩下一个奇奇怪怪的键值对，其中值看起来像一个 RSA 公钥的字符串，他以为是误操作删库了，幸好自己的服务器里没啥重要的数据，也就没在意。<br>经过一番攀谈交心了解到，他跑了一个比较古老已经停止维护的开源项目，安装的旧版本的 Redis，而且他对 Linux 的使用不是很熟练。我就知道，他的服务器已经被攻陷了，想到也许还会有不少像我这位朋友的人，不重视操作系统的权限、防火墙的设置和数据库的保护，我就写一篇文章简单看看这种情况出现的原因，以及如何防范。<br>PS：这种手法现在已经行不通了，因为新版本 Redis 都增加了 protect mode，增加了安全性，我们只能在本地简单模拟一下，就别乱试了。</p><h3 id="事件经过"><a href="#事件经过" class="headerlink" title="事件经过"></a>事件经过</h3><p>其实这种攻击手法都是 2015 年的事了，那时候 Redis 的安全保护机制比较差，只能靠运维人员来合理配置以保证数据库的安全。有段时间，全球几万个 Redis 节点遭到了攻击，出现了上述奇怪的现象，所有数据被清空，只剩一个键叫 <code>crackit</code>，它的值形似 RSA 公钥的字符串。<br>后来查证，攻击者利用 Redis 动态设置配置和数据持久化的功能，把自己的 RSA 公钥写入到了被攻击服务器的 <code>/root/.ssh/authored_keys</code> 这个文件，从而可以用私钥直接登录对方的 root 用户，侵入对方系统。<br>沦陷的服务器安全防护做的很不好，具体如下：<br>1、Redis 的端口是默认端口，而且可以从公网访问。<br>2、Redis 还没设密码。<br>3、Redis 进程是由 root 用户启动的。<br>以上每个点都是比较危险的，合在一起，那真是很致命了。且不说别人把公钥写到你的系统里，就说连上你的数据库然后删库，那损失都够大了。那么具体的流程是什么呢，下面我在本地回环地址上简单演示一下。</p><h3 id="本地演示"><a href="#本地演示" class="headerlink" title="本地演示"></a>本地演示</h3><p>Redis 监听的默认端口是 6379，我们设置它接收网卡 127.0.0.1 的连接，这样我从本地肯定可以连接 Redis，以此模拟「从公网可以访问 Redis」这一条件。<br>现在我是名叫 fdl 的普通用户，我想用 ssh 登录我系统上的 root 用户，要输入 root 的密码，我不知道，所以没办法登录。<br>除了密码登录之外，还可以使用 RSA 密钥对登录，但是必须要把我的公钥存到 root 的家目录中 <code>/root/.ssh/authored_keys</code>。我们知道 <code>/root</code> 目录的权限设置是不允许任何其他用户闯入读写的：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/redis%E5%85%A5%E4%BE%B5/1.png"><br>但是，我发现自己竟然可以直接访问 Redis：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/redis%E5%85%A5%E4%BE%B5/2.png"><br>如果 Redis 是以 root 的身份运行的，那么我就可以通过操作 Redis，让它把我的公钥写到 root 的家目录中。Redis 有一种持久化方式是生成 RDB 文件，其中会包含原始数据。<br>我露出了邪恶的微笑，先把 Redis 中的数据全部清空，然后把我的 RSA 公钥写到数据库里，这里在开头和结尾加换行符目的是避免 RDB 文件生成过程中损坏到公钥字符串：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/redis%E5%85%A5%E4%BE%B5/3.png"><br>命令 Redis 把生成的数据文件保存到 <code>/root/.ssh/</code> 中的 <code>authored_keys</code> 文件中：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/redis%E5%85%A5%E4%BE%B5/4.png"><br>现在，root 的家目录中已经包含了我们的 RSA 公钥，我们现在可以通过密钥对登录进 root 了：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/redis%E5%85%A5%E4%BE%B5/5.png"><br>看一下刚才写入 root 家的公钥：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/redis%E5%85%A5%E4%BE%B5/6.png"><br>乱码是 GDB 文件的某种编码吧，但是中间的公钥被完整保存了，而且 ssh 登录程序竟然也识别了这段被乱码包围的公钥！<br>至此，拥有了 root 权限，就可以为所欲为了。。。</p><h3 id="吸取教训"><a href="#吸取教训" class="headerlink" title="吸取教训"></a>吸取教训</h3><p>虽然现在基本不会受到这种攻击（新版本的 Redis 没有密码时默认不对外网开放），但是对于系统的安全性是每个人都应该重视的。<br>我们自己折腾东西，用个低配云服务器，为了省事儿一般也不认真配置防火墙，数据库不设密码或者设成 admin、root 这样简单的密码，反正也没啥数据。这样肯定不是个好习惯。<br>现在我们的计算机系统越来越完善，每个成熟的项目都由最优秀的一帮人维护，从技术上说应该算是无懈可击了，那么唯一可能出问题的地方就在于使用它们的人。<br>就像经常看到有人的 QQ 被盗，我相信盗号的人肯定不是跑到腾讯的数据库里盗号，肯定是 QQ 号主安全防范意识差，在哪个钓鱼网站输入了自己的账号密码，导致被盗。我基本没见过微信被盗的，可能是微信弱化密码登录，改用二维码扫描登录的原因。这应该也算是一种安全方面的考量吧，毕竟微信是有支付功能的。<br>上面这种骗局对于技术人来说，看看 url，浏览器分析一下网络包就很容易识别出来，但是你还别不信，一般人真的搞不明白怎么识别钓鱼网站和官方网站。就像我真没想到都 2020 年了，还有人在找 Redis 的这个漏洞，而且还有人中招。。。<br>那么说回 Redis 数据库的使用，在官网上明确写出了安全防护的建议，我简单总结一下吧：<br>1、不要用 root 用户启动 Redis Server，而且一定要设置密码，而且密码不要太短，否则容易被暴力破解。<br>2、配置服务器防火墙和 Redis 的 config 文件，尽量不要让 Redis 与外界接触。<br>3、利用 rename 功能伪装 flushall 这种危险命令，以防被删库，丢失数据。</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线练习平台</title>
      <link href="2016/01/01/%E6%8A%80%E6%9C%AF/%E5%9C%A8%E7%BA%BF%E7%BB%83%E4%B9%A0%E5%B9%B3%E5%8F%B0/"/>
      <url>2016/01/01/%E6%8A%80%E6%9C%AF/%E5%9C%A8%E7%BA%BF%E7%BB%83%E4%B9%A0%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<p>虽说我没事就喜欢喷应试教育，但我也从应试教育中发现了一个窍门：如果能够以刷题的形式学习某项技能，效率和效果是最佳的。对于技术的学习，我经常面临的困境是，<strong>理论知识知道的不少，但是有的场景实在无法模拟，缺少亲自动手实践的机会</strong>，如果能有一本带标准答案的习题册让我刷刷就好了。<br>所以在学习新技术时，我首先会去搜索是否有在线刷题平台，你还别说，有的大神真就做了很不错的在线练习平台，下面就介绍几个平台，分别是学习 Git、SQL、正则表达式的在线练习平台。</p><h3 id="一、练习-Git"><a href="#一、练习-Git" class="headerlink" title="一、练习 Git"></a>一、练习 Git</h3><p>这是个叫做 Learning Git Branching 的项目，是我一定要推荐的：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/online/1.png"><br>正如对话框中的自我介绍，这确实也是我至今发现的<strong>最好</strong>的 Git 动画教程，没有之一。<br>想当年我用 Git 就会 <code>add .</code>，<code>clone</code>，<code>push</code>，<code>pull</code>，<code>commit</code> 几个命令，其他的命令完全不会，Git 就是一个下载器，Github 就是个资源网站加免费图床，命令能不能达成目的都是靠运气。什么版本控制，我根本搞不懂，也懒得去看那一堆乱七八糟的文档。<br>这个网站的教程不是给你举那种修改文件的细节例子，而是将每次 <code>commit</code> 都抽象成树的节点，<strong>用动画闯关的形式</strong>，让你自由使用 Git 命令完成目标：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/online/2.png"><br>所有 Git 分支都被可视化了，你只要在左侧的命令行输入 Git 命令，分支会进行相应的变化，只要达成任务目标，你就过关啦！网站还会记录你的命令数，试试能不能以最少的命令数过关！<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/online/3.png"><br>我一开始以为这个教程只包含本地 Git 仓库的版本管理，<strong>后来我惊奇地发现它还有远程仓库的操作教程</strong>！<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/online/4.png"><br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/online/5.png"><br>真的跟玩游戏一样，难度设计合理，流畅度很好，我一玩都停不下来了，几小时就打通了，哈哈哈！<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/online/6.png"><br>总之，这个教程很适合初学和进阶，如果你觉得自己对 Git 的掌握还不太好，用 Git 命令还是靠碰运气，就可以玩玩这个教程，相信能够让你更熟练地使用 Git。<br>它是一个开源项目，Github 项目地址：<br><a href="https://github.com/pcottle/learnGitBranching">https://github.com/pcottle/learnGitBranching</a><br>教程网站地址：<br><a href="https://learngitbranching.js.org/">https://learngitbranching.js.org</a></p><h3 id="二、练习正则表达式"><a href="#二、练习正则表达式" class="headerlink" title="二、练习正则表达式"></a>二、练习正则表达式</h3><p><strong>正则表达式是个非常强有力的工具</strong>，可以说计算机中的一切数据都是字符，借助正则表达式这种模式匹配工具，操作计算机可以说是如虎添翼。<br>我这里要推荐两个网站，一个是练习平台，一个是测试正则表达式的平台。<br>先说练习平台，叫做 RegexOne：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/online/9.png"><br>前面有基本教程，后面有一些常见的正则表达式题目，比如判断邮箱、URL、电话号，或者抽取日志的关键信息等等。<br>只要写出符合要求的正则表达式，就可以进入下一个问题，关键是每道题还有标准答案，可以点击下面的 solution 按钮查看：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/online/10.png"><br>RegexOne 网址：<br><a href="https://regexone.com/">https://regexone.com/</a><br>再说测试工具，是个叫做 RegExr 的 Github 项目，这是它的网站：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/online/11.png"><br>可以看见，输入文本和正则模式串后，<strong>网站会给正则表达式添加好看且容易辨认的样式，自动在文本中搜索模式串，高亮显示匹配的字符串，并且还会显示每个分组捕获的字符串</strong>。<br>这个网站可以配合前面的正则练习平台使用，在这里尝试各种表达式，成功匹配之后粘贴过去。<br>RegExr 网址：<br><a href="https://regexr.com/">https://regexr.com/</a></p><h3 id="三、练习-SQL"><a href="#三、练习-SQL" class="headerlink" title="三、练习 SQL"></a>三、练习 SQL</h3><p>这是一个叫做 SQLZOO 的网站，左侧是所有的练习内容：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/online/7.png"><br>SQLZOO 是一款很好用的 SQL 练习平台，英文不难理解，可以直接看英文版，但是也可以切换繁体中文，比较友好。<br>这里都是比较常用的 SQL 命令，给你一个需求，你写 SQL 语句实现正确的查询结果。<strong>最重要的是，这里不仅对每个命令的用法有详细解释，每个专题后面还有选择题（quiz），而且有判题系统，甚至有的比较难的题目还有视频讲解</strong>：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/online/8.png"><br>至于难度，循序渐进，即便对新手也很友好，靠后的问题确实比较有技巧性，相信这是热爱思维挑战的人喜欢的！LeetCode 也有 SQL 相关的题目，不过难度一般比较大，我觉得 SQLZOO 刷完基础 SQL 命令再去 LeetCode 刷比较合适。<br>网站地址：<br><a href="https://sqlzoo.net/">https://sqlzoo.net/</a></p><p><a href="/2016/01/01/%E6%8A%80%E6%9C%AF/linux%E8%BF%9B%E7%A8%8B">上一篇：Linux的进程、线程、文件描述符是什么</a><br><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3%E8%BF%9B%E9%98%B6">下一篇：动态规划详解</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>session和cookie</title>
      <link href="2016/01/01/%E6%8A%80%E6%9C%AF/session%E5%92%8Ccookie/"/>
      <url>2016/01/01/%E6%8A%80%E6%9C%AF/session%E5%92%8Ccookie/</url>
      
        <content type="html"><![CDATA[<p>cookie 大家应该都熟悉，比如说登录某些网站一段时间后，就要求你重新登录；再比如有的同学很喜欢玩爬虫技术，有时候网站就是可以拦截住你的爬虫，这些都和 cookie 有关。如果你明白了服务器后端对于 cookie 和 session 的处理逻辑，就可以解释这些现象，甚至钻一些空子无限白嫖，待我慢慢道来。</p><h3 id="一、session-和-cookie-简介"><a href="#一、session-和-cookie-简介" class="headerlink" title="一、session 和 cookie 简介"></a>一、session 和 cookie 简介</h3><p>cookie 的出现是因为 HTTP 是无状态的一种协议，换句话说，服务器记不住你，可能你每刷新一次网页，就要重新输入一次账号密码进行登录。这显然是让人无法接受的，cookie 的作用就好比服务器给你贴个标签，然后你每次向服务器再发请求时，服务器就能够 cookie 认出你。<br>抽象地概括一下：<strong>一个 cookie 可以认为是一个「变量」，形如 <code>name=value</code>，存储在浏览器；一个 session 可以理解为一种数据结构，多数情况是「映射」（键值对），存储在服务器上</strong>。<br>注意，我说的是「一个」cookie 可以认为是一个变量，但是服务器可以一次设置多个 cookie，所以有时候说 cookie 是「一组」键值对儿，这也可以说得通。<br>cookie 可以在服务器端通过 HTTP 的 SetCookie 字段设置 cookie，比如我用 Go 语言写的一个简单服务：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">cookie</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>    <span class="hljs-comment">// 设置了两个 cookie </span><br>http.SetCookie(w, &amp;http.Cookie&#123;<br>Name:       <span class="hljs-string">&quot;name1&quot;</span>,<br>Value:      <span class="hljs-string">&quot;value1&quot;</span>,<br>&#125;)<br>http.SetCookie(w, &amp;http.Cookie&#123;<br>Name:  <span class="hljs-string">&quot;name2&quot;</span>,<br>Value: <span class="hljs-string">&quot;value2&quot;</span>,<br>&#125;)<br>    <span class="hljs-comment">// 将字符串写入网页</span><br>fmt.Fprintln(w, <span class="hljs-string">&quot;页面内容&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>当浏览器访问对应网址时，通过浏览器的开发者工具查看此次 HTTP 通信的细节，可以看见服务器的回应发出了两次 <code>SetCookie</code> 命令：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/session/1.png"><br>在这之后，浏览器的请求中的 <code>Cookie</code> 字段就带上了这两个 cookie：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/session/2.png"><br><strong>cookie 的作用其实就是这么简单，无非就是服务器给每个客户端（浏览器）打的标签</strong>，方便服务器辨认而已。当然，HTTP 还有很多参数可以设置 cookie，比如过期时间，或者让某个 cookie 只有某个特定路径才能使用等等。<br>但问题是，我们也知道现在的很多网站功能很复杂，而且涉及很多的数据交互，比如说电商网站的购物车功能，信息量大，而且结构也比较复杂，无法通过简单的 cookie 机制传递这么多信息，而且要知道 cookie 字段是存储在 HTTP header 中的，就算能够承载这些信息，也会消耗很多的带宽，比较消耗网络资源。<br>session 就可以配合 cookie 解决这一问题，比如说一个 cookie 存储这样一个变量 <code>sessionID=xxxx</code>，仅仅把这一个 cookie 传给服务器，然后服务器通过这个 ID 找到对应的 session，这个 session 是一个数据结构，里面存储着该用户的购物车等详细信息，服务器可以通过这些信息返回该用户的定制化网页，有效解决了追踪用户的问题。<br><strong>session 是一个数据结构，由网站的开发者设计，所以可以承载各种数据</strong>，只要客户端的 cookie 传来一个唯一的 session ID，服务器就可以找到对应的 session，认出这个客户。<br>当然，由于 session 存储在服务器中，肯定会消耗服务器的资源，所以 session 一般都会有一个过期时间，服务器一般会定期检查并删除过期的 session，如果后来该用户再次访问服务器，可能就会面临重新登录等等措施，然后服务器新建一个 session，将 session ID 通过 cookie 的形式传送给客户端。<br>那么，我们知道 cookie 和 session 的原理，有什么切实的好处呢？<strong>除了应对面试，我给你说一个鸡贼的用处，就是可以白嫖某些服务</strong>。<br>有些网站，你第一次使用它的服务，它直接免费让你试用，但是用一次之后，就让你登录然后付费继续使用该服务。而且你发现网站似乎通过某些手段记住了你的电脑，除非你换个电脑或者换个浏览器才能再白嫖一次。<br>那么问题来了，你试用的时候没有登录，网站服务器是怎么记住你的呢？这就很显然了，服务器一定是给你的浏览器打了 cookie，后台建立了对应的 session 记录你的状态。你的浏览器在每次访问该网站的时候都会听话地带着 cookie，服务器一查 session 就知道这个浏览器已经免费使用过了，得让它登录付费，不能让它继续白嫖了。<br>那如果我不让浏览器发送 cookie，每次都伪装成一个第一次来试用的小萌新，不就可以不断白嫖了么？浏览器会把网站的 cookie 以文件的形式存在某些地方（不同的浏览器配置不同），你把他们找到然后删除就行了。但是对于 Firefox 和 Chrome 浏览器，有很多插件可以直接编辑 cookie，比如我的 Chrome 浏览器就用的一款叫做 EditThisCookie 的插件，这是他们官网：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/session/3.png" alt="http://www.editthiscookie.com/"><br>这类插件可以读取浏览器在当前网页的 cookie，点开插件可以任意编辑和删除 cookie。<strong>当然，偶尔白嫖一两次还行，不鼓励高频率白嫖，想常用还是掏钱吧，否则网站赚不到钱，就只能取消免费试用这个机制了</strong>。<br>以上就是关于 cookie 和 session 的简单介绍，cookie 是 HTTP 协议的一部分，不算复杂，而 session 是可以定制的，所以下面详细看一下实现 session 管理的代码架构吧。</p><h3 id="二、session-的实现"><a href="#二、session-的实现" class="headerlink" title="二、session 的实现"></a>二、session 的实现</h3><p>session 的原理不难，但是具体实现它可是很有技巧的，一般需要三个组件配合完成，它们分别是 <code>Manager</code>、<code>Provider</code> 和 <code>Session</code> 三个类（接口）。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/session/4.jpg"><br>1、浏览器通过 HTTP 协议向服务器请求路径 <code>/content</code> 的网页资源，对应路径上有一个 Handler 函数接收请求，解析 HTTP header 中的 cookie，得到其中存储的 sessionID，然后把这个 ID 发给 <code>Manager</code>。<br>2、<code>Manager</code> 充当一个 session 管理器的角色，主要存储一些配置信息，比如 session 的存活时间，cookie 的名字等等。而所有的 session 存在 <code>Manager</code> 内部的一个 <code>Provider</code> 中。所以 <code>Manager</code> 会把 <code>sid</code>（sessionID）传递给 <code>Provider</code>，让它去找这个 ID 对应的具体是哪个 session。<br>3、<code>Provider</code> 就是一个容器，最常见的应该就是一个散列表，将每个 <code>sid</code> 和对应的 session 一一映射起来。收到 <code>Manager</code> 传递的 <code>sid</code> 之后，它就找到 <code>sid</code> 对应的 session 结构，也就是 <code>Session</code> 结构，然后返回它。<br>4、<code>Session</code> 中存储着用户的具体信息，由 Handler 函数中的逻辑拿出这些信息，生成该用户的 HTML 网页，返回给客户端。<br>那么你也许会问，为什么搞这么麻烦，直接在 Handler 函数中搞一个哈希表，然后存储 <code>sid</code> 和 <code>Session</code> 结构的映射不就完事儿了？<br><strong>这就是设计层面的技巧了</strong>，下面就来说说，为什么分成 <code>Manager</code>、<code>Provider</code> 和 <code>Session</code>。</p><p>先从最底层的 <code>Session</code> 说。既然 session 就是键值对，为啥不直接用哈希表，而是要抽象出这么一个数据结构呢？<br>第一，因为 <code>Session</code> 结构可能不止存储了一个哈希表，还可以存储一些辅助数据，比如 <code>sid</code>，访问次数，过期时间或者最后一次的访问时间，这样便于实现想 LRU、LFU 这样的算法。<br>第二，因为 session 可以有不同的存储方式。如果用编程语言内置的哈希表，那么 session 数据就是存储在内存中，如果数据量大，很容易造成程序崩溃，而且一旦程序结束，所有 session 数据都会丢失。所以可以有很多种 session 的存储方式，比如存入缓存数据库 Redis，或者存入 MySQL 等等。<br>因此，<code>Session</code> 结构提供一层抽象，屏蔽不同存储方式的差异，只要提供一组通用接口操纵键值对：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Session <span class="hljs-keyword">interface</span> &#123;<br>    <span class="hljs-comment">// 设置键值对</span><br>    Set(key, val <span class="hljs-keyword">interface</span>&#123;&#125;)<br>    <span class="hljs-comment">// 获取 key 对应的值</span><br>    Get(key <span class="hljs-keyword">interface</span>&#123;&#125;) <span class="hljs-keyword">interface</span>&#123;&#125;<br>    <span class="hljs-comment">// 删除键 key</span><br>Delete(key <span class="hljs-keyword">interface</span>&#123;&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>再说 <code>Provider</code> 为啥要抽象出来。我们上面那个图的 <code>Provider</code> 就是一个散列表，保存 <code>sid</code> 到 <code>Session</code> 的映射，但是实际中肯定会更加复杂。我们不是要时不时删除一些 session 吗，除了设置存活时间之外，还可以采用一些其他策略，比如 LRU 缓存淘汰算法，这样就需要 <code>Provider</code> 内部使用哈希链表这种数据结构来存储 session。<br>PS：关于 LRU 算法的奥妙，参见前文「LRU 算法详解」。<br>因此，<code>Provider</code> 作为一个容器，就是要屏蔽算法细节，以合理的数据结构和算法组织 <code>sid</code> 和 <code>Session</code> 的映射关系，只需要实现下面这几个方法实现对 session 的增删查改：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Provider <span class="hljs-keyword">interface</span> &#123;<br>    <span class="hljs-comment">// 新增并返回一个 session</span><br>    SessionCreate(sid <span class="hljs-keyword">string</span>) (Session, error)<br>    <span class="hljs-comment">// 删除一个 session</span><br>    SessionDestroy(sid <span class="hljs-keyword">string</span>)<br>    <span class="hljs-comment">// 查找一个 session</span><br>    SessionRead(sid <span class="hljs-keyword">string</span>) (Session, error)<br>    <span class="hljs-comment">// 修改一个session</span><br>    SessionUpdate(sid <span class="hljs-keyword">string</span>)<br>    <span class="hljs-comment">// 通过类似 LRU 的算法回收过期的 session</span><br>SessionGC(maxLifeTime <span class="hljs-keyword">int64</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>最后说 <code>Manager</code>，大部分具体工作都委托给 <code>Session</code> 和 <code>Provider</code> 承担了，<code>Manager</code> 主要就是一个参数集合，比如 session 的存活时间，清理过期 session 的策略，以及 session 的可用存储方式。<code>Manager</code> 屏蔽了操作的具体细节，我们可以通过 <code>Manager</code> 灵活地配置 session 机制。<br>综上，session 机制分成几部分的最主要原因就是解耦，实现定制化。我在 Github 上看过几个 Go 语言实现的 session 服务，源码都很简单，有兴趣的朋友可以学习学习：<br><a href="https://github.com/alexedwards/scs">https://github.com/alexedwards/scs</a><br><a href="https://github.com/astaxie/build-web-application-with-golang">https://github.com/astaxie/build-web-application-with-golang</a></p><p><a href="/2016/01/01/%E6%8A%80%E6%9C%AF/linux%E8%BF%9B%E7%A8%8B">上一篇：Linux的进程、线程、文件描述符是什么</a><br><a href="/2016/01/01/%E6%8A%80%E6%9C%AF/linuxshell">下一篇：关于 Linux shell 你必须知道的</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码技术</title>
      <link href="2016/01/01/%E6%8A%80%E6%9C%AF/%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF/"/>
      <url>2016/01/01/%E6%8A%80%E6%9C%AF/%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<p>说到密码，我们第一个想到的就是登陆账户的密码，但是从密码学的角度来看，这种根本就不算合格的密码。<br>为什么呢，因为我们的账户密码，是依靠隐蔽性来达到加密作用：密码藏在我心里，你不知道，所以你登不上我的账户。<br>然而密码技术认为，「保密」信息总有一天会被扒出来，所以加密算法不应该依靠「保密」来保证机密性，而应该做到：即便知道了加密算法，依然无计可施。说的魔幻一点就是，告诉你我的密码，你依然不知道我的密码。</p><p>最玄学的就是 Diffie-Hellman 密钥交换算法，我当初就觉得很惊奇，两个人当着你的面互相报几个数字，他们就可以拥有一个共同的秘密，而你却根本不可能算出来这个秘密。下文会着重介绍一下这个算法。<br>本文讨论的密码技术要解决的主要是信息传输中的加密和解密问题。要假设数据传输过程是不安全的，所有信息都在被窃听的，所以发送端要把信息加密，接收方收到信息之后，肯定得知道如何解密。有意思的是，如果你能够让接收者知道如何解密，那么窃听者不是也能够知道如何解密了吗？<br>下面，<strong>我们会介绍对称加密算法、密钥交换算法、非对称加密算法、数字签名、公钥证书</strong>，看看解决安全传输问题的一路坎坷波折。</p><h3 id="一、对称性加密"><a href="#一、对称性加密" class="headerlink" title="一、对称性加密"></a>一、对称性加密</h3><p>对称性密码，也叫共享密钥密码，顾名思义，这种加密方式用相同的密钥进行加密和解密。<br>比如我说一种最简单的对称加密的方法。首先我们知道信息都可以表示成 0/1 比特序列，也知道相同的两个比特序列做异或运算的结果为 0。<br>那么我们就可以生成一个长度和原始信息一样的随机比特序列作为密钥，然后用它对原始信息做异或运算，就生成了密文。反之，再用该密钥对密文做一次异或运算，就可以恢复原始信息。<br>这是一个简单例子，不过有些过于简单，有很多问题。比如密钥的长度和原始信息完全一致，如果原始信息很大，密钥也会一样大，而且生成大量真随机比特序列的计算开销也比较大。<br>当然，有很多更复杂优秀的对称加密算法解决了这些问题，比如 Rijndael 算法、三重 DES 算法等等。<strong>它们从算法上是无懈可击的，也就是拥有巨大的密钥空间，基本无法暴力破解，而且加密过程相对快速</strong>。<br><strong>但是，一切对称加密算法的软肋在于密钥的配送</strong>。加密和解密用同一个密钥，发送方必须设法把密钥发送给接收方。如果窃听者有能力窃取密文，肯定也可以窃取密钥，那么再无懈可击的算法依然不攻自破。<br>所以，下面介绍两种解决密钥配送问题最常见的算法，分别是 Diffie-Hellman 密钥交换算法和非对称加密算法。</p><h3 id="二、密钥交换算法"><a href="#二、密钥交换算法" class="headerlink" title="二、密钥交换算法"></a>二、密钥交换算法</h3><p>我们所说的密钥一般就是一个很大的数字，算法用这个数加密、解密。问题在于，信道是不安全的，所有发出的数据都会被窃取。换句话说，有没有一种办法，能够让两个人在众目睽睽之下，光明正大地交换一个秘密，把对称性密钥安全地送到接收方的手中？<br>Diffie-Hellman 密钥交换算法可以做到。<strong>准确的说，该算法并不是把一个秘密安全地「送给」对方，而是通过一些共享的数字，双方「心中」各自「生成」了一个相同的秘密，而且双方的这个秘密，是第三方窃听者无法生成的</strong>。<br>也许这就是传说中的心有灵犀一点通吧。<br>这个算法规则不算复杂，你甚至都可以找个朋友尝试一下共享秘密，等会我会简单画出它的基本流程。在此之前，需要明确一个问题：<strong>并不是所有运算都有逆运算</strong>。<br>最简单的例子就是我们熟知的单向散列函数，给一个数字 <code>a</code> 和一个散列函数 <code>f</code>，你可以很快计算出 <code>f(a)</code>，但是如果给你 <code>f(a)</code> 和 <code>f</code>，推出 <code>a</code> 是一件基本做不到的事。密钥交换算法之所以看起来如此玄幻，就是利用了这种不可逆的性质。<br>下面，看下密钥交换算法的流程是什么，按照命名惯例，准备执行密钥交换算法的双方称为 Alice 和 Bob，在网络中企图窃取他俩通信内容的坏人称为 Hack 吧。<br>首先，Alice 和 Bob 协商出两个数字 <code>N</code> 和 <code>G</code> 作为生成元，当然协商过程可以被窃听者 Hack 窃取，所以我把这两个数画到中间，代表三方都知道：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF/1.jpg"><br>现在 Alice 和 Bob <strong>心中</strong>各自想一个数字出来，分别称为 <code>A</code> 和 <code>B</code> 吧：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF/2.jpg"><br>现在 Alice 将自己心里的这个数字 <code>A</code> 和 <code>G</code> 通过某些运算得出一个数 <code>AG</code>，然后发给 Bob；Bob 将自己心里的数 <code>B</code> 和 <code>G</code> 通过相同的运算得出一个数 <code>BG</code>，然后发给 Alice：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF/3.jpg"><br>现在的情况变成这样了：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF/4.jpg"><br>注意，类似刚才举的散列函数的例子，知道 <code>AG</code> 和 <code>G</code>，并不能反推出 <code>A</code> 是多少，<code>BG</code> 同理。<br>那么，Alice 可以通过 <code>BG</code> 和自己的 <code>A</code> 通过某些运算得到一个数 <code>ABG</code>，Bob 也可以通过 <code>AG</code> 和自己的 <code>B</code> 通过某些运算得到 <code>ABG</code>，这个数就是 Alice 和 Bob 共有的秘密。<br>而对于 Hack，可以窃取传输过程中的 <code>G</code>，<code>AG</code>，<code>BG</code>，但是由于计算不可逆，怎么都无法结合出 <code>ABG</code> 这个数字。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF/5.jpg"><br>以上就是基本流程，至于具体的数字取值是有讲究的，运算方法在百度上很容易找到，限于篇幅我就不具体写了。<br>该算法可以在第三者窃听的前提下，算出一个别人无法算出的秘密作为对称性加密算法的密钥，开始对称加密的通信。<br>对于该算法，Hack 又想到一种破解方法，不是窃听 Alice 和 Bob 的通信数据，而是直接同时冒充 Alice 和 Bob 的身份，也就是我们说的「<strong>中间人攻击</strong>」：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF/6.jpg"><br>这样，双方根本无法察觉在和 Hack 共享秘密，后果就是 Hack 可以解密甚至修改数据。<br><strong>可见，密钥交换算法也不算完全解决了密钥配送问题，缺陷在于无法核实对方身份</strong>。所以密钥交换算法之前一般要核实对方身份，比如使用数字签名。</p><h3 id="三、非对称加密"><a href="#三、非对称加密" class="headerlink" title="三、非对称加密"></a>三、非对称加密</h3><p>非对称加密的思路就是，干脆别偷偷摸摸传输密钥了，我把加密密钥和解密密钥分开，公钥用于加密，私钥用于解密。只把公钥传送给对方，然后对方开始给我发送加密的数据，我用私钥就可以解密。至于窃听者，拿到公钥和加密数据也没用，因为只有我手上的私钥才能解密。<br>可以这样想，<strong>私钥是钥匙，而公钥是锁，可以把锁公开出去，让别人把数据锁起来发给我；而钥匙一定要留在自己手里，用于解锁</strong>。我们常见的 RSA 算法就是典型的非对称加密算法，具体实现比较复杂，我就不写了，网上很多资料。<br>在实际应用中，非对称性加密的运算速度要比对称性加密慢很多的，所以传输大量数据时，一般不会用公钥直接加密数据，而是加密对称性加密的密钥，传输给对方，然后双方使用对称性加密算法传输数据。<br>需要注意的是，类似 Diffie-Hellman 算法，<strong>非对称加密算法也无法确定通信双方的身份，依然会遭到中间人攻击</strong>。比如 Hack 拦截 Bob 发出的公钥，然后冒充 Bob 的身份给 Alice 发送自己的公钥，那么不知情的 Alice 就会把私密数据用 Hack 的公钥加密，Hack 可以通过私钥解密窃取。<br>那么，Diffie-Hellman 算法和 RSA 非对称加密算法都可以一定程度上解决密钥配送的问题，也具有相同的缺陷，二者的应用场景有什么区别呢？<br>简单来说，根据两种算法的基本原理就可以看出来：<br>如果双方有一个对称加密方案，希望加密通信，而且不能让别人得到钥匙，那么可以使用 Diffie-Hellman 算法交换密钥。<br>如果你希望任何人都可以对信息加密，而只有你能够解密，那么就使用 RSA 非对称加密算法，公布公钥。<br>下面，我们尝试着解决认证发送方身份的问题。</p><h3 id="四、数字签名"><a href="#四、数字签名" class="headerlink" title="四、数字签名"></a>四、数字签名</h3><p>刚才说非对称加密，把公钥公开用于他人对数据加密然后发给你，只有用你手上对应的私钥才能将密文解密。其实，<strong>私钥也可用用来加密数据的，对于 RSA 算法，私钥加密的数据只有公钥才能解开</strong>。<br>数字签名也是利用了非对称性密钥的特性，但是和公钥加密完全颠倒过来：<strong>仍然公布公钥，但是用你的私钥加密数据，然后把加密的数据公布出去，这就是数字签名</strong>。<br>你可能问，这有什么用，公钥可以解开私钥加密，我还加密发出去，不是多此一举吗？<br>是的，但是<strong>数字签名的作用本来就不是保证数据的机密性，而是证明你的身份</strong>，证明这些数据确实是由你本人发出的。<br>你想想，你的私钥加密的数据，只有你的公钥才能解开，那么如果一份加密数据能够被你的公钥解开，不就说明这份数据是你（私钥持有者）本人发布的吗？<br>当然，加密数据仅仅是一个签名，签名应该和数据一同发出，具体流程应该是：<br>1、Bob 生成公钥和私钥，然后把公钥公布出去，私钥自己保留。<br>2、<strong>用私钥加密数据作为签名，然后将数据附带着签名一同发布出去</strong>。<br>3、Alice 收到数据和签名，需要检查此份数据是否是 Bob 所发出，于是用 Bob 之前发出的公钥尝试解密签名，将收到的数据和签名解密后的结果作对比，如果完全相同，说明数据没被篡改，且确实由 Bob 发出。<br>为什么 Alice 这么肯定呢，毕竟数据和签名是两部分，都可以被掉包呀？原因如下：<br>1、如果有人修改了数据，那么 Alice 解密签名之后，对比发现二者不一致，察觉出异常。<br>2、如果有人替换了签名，那么 Alice 用 Bob 的公钥只能解出一串乱码，显然和数据不一致。<br>3、也许有人企图修改数据，然后将修改之后的数据制成签名，使得 Alice 的对比无法发现不一致；但是一旦解开签名，就不可能再重新生成 Bob 的签名了，因为没有 Bob 的私钥。<br>综上，<strong>数字签名可以一定程度上认证数据的来源</strong>。之所以说是一定程度上，是因为这种方式依然可能受到中间人攻击。一旦涉及公钥的发布，接收方就可能收到中间人的假公钥，进行错误的认证，这个问题始终避免不了。<br>说来可笑，数字签名就是验证对方身份的一种方式，但是前提是对方的身份必须是真的… 这似乎陷入一个先有鸡还是先有蛋的死循环，<strong>要想确定对方的身份，必须有一个信任的源头，否则的话，再多的流程也只是在转移问题，而不是真正解决问题</strong>。</p><h3 id="五、公钥证书"><a href="#五、公钥证书" class="headerlink" title="五、公钥证书"></a>五、公钥证书</h3><p><strong>证书其实就是公钥 + 签名，由第三方认证机构颁发</strong>。引入可信任的第三方，是终结信任循环的一种可行方案。<br>证书认证的流程大致如下：<br>1、Bob 去可信任的认证机构证实本人真实身份，并提供自己的公钥。<br>2、Alice 想跟 Bob 通信，首先向认证机构请求 Bob 的公钥，认证机构会把一张证书（Bob 的公钥以及自己对其公钥的签名）发送给 Alice。<br>3、Alice 检查签名，确定该公钥确实由这家认证机构发送，中途未被篡改。<br>4、Alice 通过这个公钥加密数据，开始和 Bob 通信。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF/7.jpg" alt="图片来自《图解密码技术》"><br>PS：以上只是为了说明，证书只需要安装一次，并不需要每次都向认证机构请求；一般是服务器直接给客户端发送证书，而不是认证机构。<br>也许有人问，Alice 要想通过数字签名确定证书的有效性，前提是要有该机构的（认证）公钥，这不是又回到刚才的死循环了吗？<br>我们安装的正规浏览器中都预存了正规认证机构的证书（包含其公钥），用于确认机构身份，所以说证书的认证是可信的。<br>Bob 向机构提供公钥的过程中，需要提供很多个人信息进行身份验证，比较严格，所以说也算是可靠的。<br>获得了 Bob 的可信公钥，Alice 和 Bob 之间的通信基于加密算法的保护，是完全无懈可击的。<br>现在的正规网站，大都使用 HTTPS 协议，就是在 HTTP 协议和 TCP 协议之间加了一个 SSL/TLS 安全层。在你的浏览器和网站服务器完成 TCP 握手后，SSL 协议层也会进行 SSL 握手交换安全参数，其中就包含该网站的证书，以便浏览器验证站点身份。SSL 安全层验证完成之后，上层的 HTTP 协议内容都会被加密，保证数据的安全传输。<br>这样一来，传统的中间人攻击就几乎没有了生存空间，攻击手段只能由技术缺陷转变为坑蒙拐骗。事实上，这种手段的效果反而更高效，比如我就发现<strong>网上不少下载网站发布的浏览器，不仅包含乱七八糟的导航和收藏网址，还包含一些不正规的认证机构证书。任何人都可以申请证书，这些不正规证书很可能造成安全隐患</strong>。</p><h3 id="六、最后总结"><a href="#六、最后总结" class="headerlink" title="六、最后总结"></a>六、最后总结</h3><p>对称性加密算法使用同一个密钥加密和解密，难以破解，加密速度较快，但是存在密钥配送问题。<br>Diffie-Hellman 密钥交换算法可以让双方「心有灵犀一点通」，一定程度解决密钥配送问题，但是无法验证通信方的身份，所以可能受到中间人攻击。<br>非对称性加密算法生成一对儿密钥，把加密和解密的工作分开了。<br>RSA 算法作为经典的非对称加密算法，有两种用途：如果用于加密，可以把公钥发布出去用于加密，只有自己的私钥可以解密，保证了数据的机密性；如果用于数字签名，把公钥发布出去后，用私钥加密数据作为签名，以证明该数据由私钥持有者所发送。但是无论那种用法，涉及公钥的发布，都无法避免中间人攻击。<br>公钥证书就是公钥 + 签名，由可信任的第三方认证机构颁发。由于正规浏览器都预装了可信的认证机构的公钥，所以可以有效防止中间人攻击。<br>HTTPS 协议中的 SSL/TLS 安全层会组合使用以上几种加密方式，<strong>所以说不要安装非正规的浏览器，不要乱安装未知来源的证书</strong>。<br>密码技术只是安全的一小部分，即便是通过正规机构认证的 HTTPS 站点，也不意味着可信任，只能说明其数据传输是安全的。技术永远不可能真正保护你，最重要的还是得提高个人的安全防范意识，多留心眼儿，谨慎处理敏感数据。</p><p><a href="/2016/01/01/%E6%8A%80%E6%9C%AF/linuxshell">上一篇：关于 Linux shell 你必须知道的</a><br><a href="/2016/01/01/%E6%8A%80%E6%9C%AF/%E5%9C%A8%E7%BA%BF%E7%BB%83%E4%B9%A0%E5%B9%B3%E5%8F%B0">下一篇：Git/SQL/正则表达式的在线练习平台</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉堆详解实现优先级队列</title>
      <link href="2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%8F%89%E5%A0%86%E8%AF%A6%E8%A7%A3%E5%AE%9E%E7%8E%B0%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97/"/>
      <url>2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%8F%89%E5%A0%86%E8%AF%A6%E8%A7%A3%E5%AE%9E%E7%8E%B0%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉堆详解实现优先级队列"><a href="#二叉堆详解实现优先级队列" class="headerlink" title="二叉堆详解实现优先级队列"></a>二叉堆详解实现优先级队列</h1><p>二叉堆（Binary Heap）没什么神秘，性质比二叉搜索树 BST 还简单。其主要操作就两个，<code>sink</code>（下沉）和 <code>swim</code>（上浮），用以维护二叉堆的性质。其主要应用有两个，首先是一种排序方法「堆排序」，第二是一种很有用的数据结构「优先级队列」。<br>本文就以实现优先级队列（Priority Queue）为例，通过图片和人类的语言来描述一下二叉堆怎么运作的。</p><h3 id="一、二叉堆概览"><a href="#一、二叉堆概览" class="headerlink" title="一、二叉堆概览"></a>一、二叉堆概览</h3><p>首先，二叉堆和二叉树有啥关系呢，为什么人们总数把二叉堆画成一棵二叉树？<br>因为，二叉堆其实就是一种特殊的二叉树（完全二叉树），只不过存储在数组里。一般的链表二叉树，我们操作节点的指针，而在数组里，我们把数组索引作为指针：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 父节点的索引</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">parent</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> root / <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-comment">// 左孩子的索引</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">left</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> root * <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-comment">// 右孩子的索引</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">right</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> root * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>画个图你立即就能理解了，注意数组的第一个索引 0 空着不用，<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/heap/1.png" alt="1"><br>PS：因为数组索引是数组，为了方便区分，将字符作为数组元素。<br>你看到了，把 arr[1] 作为整棵树的根的话，每个节点的父节点和左右孩子的索引都可以通过简单的运算得到，这就是二叉堆设计的一个巧妙之处。为了方便讲解，下面都会画的图都是二叉树结构，相信你能把树和数组对应起来。<br>二叉堆还分为最大堆和最小堆。<strong>最大堆的性质是：每个节点都大于等于它的两个子节点。</strong>类似的，最小堆的性质是：每个节点都小于等于它的子节点。<br>两种堆核心思路都是一样的，本文以最大堆为例讲解。<br>对于一个最大堆，根据其性质，显然堆顶，也就是 arr[1] 一定是所有元素中最大的元素。</p><h3 id="二、优先级队列概览"><a href="#二、优先级队列概览" class="headerlink" title="二、优先级队列概览"></a>二、优先级队列概览</h3><p>优先级队列这种数据结构有一个很有用的功能，你插入或者删除元素的时候，元素会自动排序，这底层的原理就是二叉堆的操作。<br>数据结构的功能无非增删查该，优先级队列有两个主要 API，分别是 <code>insert</code> 插入一个元素和 <code>delMax</code> 删除最大元素（如果底层用最小堆，那么就是 <code>delMin</code>）。<br>下面我们实现一个简化的优先级队列，先看下代码框架：<br>PS：为了清晰起见，这里用到 Java 的泛型，<code>Key</code> 可以是任何一种可比较大小的数据类型，你可以认为它是 int、char 等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MaxPQ</span></span><br><span class="hljs-class">    &lt;<span class="hljs-title">Key</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Key</span>&gt;&gt; </span>&#123;<br>    <span class="hljs-comment">// 存储元素的数组</span><br>    <span class="hljs-keyword">private</span> Key[] pq;<br>    <span class="hljs-comment">// 当前 Priority Queue 中的元素个数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MaxPQ</span><span class="hljs-params">(<span class="hljs-keyword">int</span> cap)</span> </span>&#123;<br>        <span class="hljs-comment">// 索引 0 不用，所以多分配一个空间</span><br>        pq = (Key[]) <span class="hljs-keyword">new</span> Comparable[cap + <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-comment">/* 返回当前队列中最大元素 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Key <span class="hljs-title">max</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> pq[<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-comment">/* 插入元素 e */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(Key e)</span> </span>&#123;...&#125;<br>    <span class="hljs-comment">/* 删除并返回当前队列中最大元素 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Key <span class="hljs-title">delMax</span><span class="hljs-params">()</span> </span>&#123;...&#125;<br>    <span class="hljs-comment">/* 上浮第 k 个元素，以维护最大堆性质 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span> </span>&#123;...&#125;<br>    <span class="hljs-comment">/* 下沉第 k 个元素，以维护最大堆性质 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sink</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span> </span>&#123;...&#125;<br>    <span class="hljs-comment">/* 交换数组的两个元素 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>        Key temp = pq[i];<br>        pq[i] = pq[j];<br>        pq[j] = temp;<br>    &#125;<br>    <span class="hljs-comment">/* pq[i] 是否比 pq[j] 小？ */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">less</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> pq[i].compareTo(pq[j]) &lt; <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">/* 还有 left, right, parent 三个方法 */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>空出来的四个方法是二叉堆和优先级队列的奥妙所在，下面用图文来逐个理解。</p><h3 id="三、实现-swim-和-sink"><a href="#三、实现-swim-和-sink" class="headerlink" title="三、实现 swim 和 sink"></a>三、实现 swim 和 sink</h3><p>为什么要有上浮 swim 和下沉 sink 的操作呢？为了维护堆结构。<br>我们要讲的是最大堆，每个节点都比它的两个子节点大，但是在插入元素和删除元素时，难免破坏堆的性质，这就需要通过这两个操作来恢复堆的性质了。<br>对于最大堆，会破坏堆性质的有有两种情况：</p><ol><li>如果某个节点 A 比它的子节点（中的一个）小，那么 A 就不配做父节点，应该下去，下面那个更大的节点上来做父节点，这就是对 A 进行<strong>下沉</strong>。</li><li>如果某个节点 A 比它的父节点大，那么 A 不应该做子节点，应该把父节点换下来，自己去做父节点，这就是对 A 的<strong>上浮</strong>。<br>当然，错位的节点 A 可能要上浮（或下沉）很多次，才能到达正确的位置，恢复堆的性质。所以代码中肯定有一个 <code>while</code> 循环。<br>细心的读者也许会问，这两个操作不是互逆吗，所以上浮的操作一定能用下沉来完成，为什么我还要费劲写两个方法？<br>是的，操作是互逆等价的，但是最终我们的操作只会在堆底和堆顶进行（等会讲原因），显然堆底的「错位」元素需要上浮，堆顶的「错位」元素需要下沉。</li></ol><p><strong>上浮的代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    <span class="hljs-comment">// 如果浮到堆顶，就不能再上浮了</span><br>    <span class="hljs-keyword">while</span> (k &gt; <span class="hljs-number">1</span> &amp;&amp; less(parent(k), k)) &#123;<br>        <span class="hljs-comment">// 如果第 k 个元素比上层大</span><br>        <span class="hljs-comment">// 将 k 换上去</span><br>        exch(parent(k), k);<br>        k = parent(k);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>画个 GIF 看一眼就明白了：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/heap/swim.gif" alt="2"><br><strong>下沉的代码实现：</strong><br>下沉比上浮略微复杂一点，因为上浮某个节点 A，只需要 A 和其父节点比较大小即可；但是下沉某个节点 A，需要 A 和其<strong>两个子节点</strong>比较大小，如果 A 不是最大的就需要调整位置，要把较大的那个子节点和 A 交换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sink</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    <span class="hljs-comment">// 如果沉到堆底，就沉不下去了</span><br>    <span class="hljs-keyword">while</span> (left(k) &lt;= N) &#123;<br>        <span class="hljs-comment">// 先假设左边节点较大</span><br>        <span class="hljs-keyword">int</span> older = left(k);<br>        <span class="hljs-comment">// 如果右边节点存在，比一下大小</span><br>        <span class="hljs-keyword">if</span> (right(k) &lt;= N &amp;&amp; less(older, right(k)))<br>            older = right(k);<br>        <span class="hljs-comment">// 结点 k 比俩孩子都大，就不必下沉了</span><br>        <span class="hljs-keyword">if</span> (less(older, k)) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">// 否则，不符合最大堆的结构，下沉 k 结点</span><br>        exch(k, older);<br>        k = older;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>画个 GIF 看下就明白了：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/heap/sink.gif" alt="3"><br>至此，二叉堆的主要操作就讲完了，一点都不难吧，代码加起来也就十行。明白了 <code>sink</code> 和 <code>swim</code> 的行为，下面就可以实现优先级队列了。</p><h3 id="四、实现-delMax-和-insert"><a href="#四、实现-delMax-和-insert" class="headerlink" title="四、实现 delMax 和 insert"></a>四、实现 delMax 和 insert</h3><p>这两个方法就是建立在 <code>swim</code> 和 <code>sink</code> 上的。<br>**<code>insert</code> 方法先把要插入的元素添加到堆底的最后，然后让其上浮到正确位置。**<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/heap/insert.gif" alt="4"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(Key e)</span> </span>&#123;<br>    N++;<br>    <span class="hljs-comment">// 先把新元素加到最后</span><br>    pq[N] = e;<br>    <span class="hljs-comment">// 然后让它上浮到正确的位置</span><br>    swim(N);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>delMax</code> 方法先把堆顶元素 A 和堆底最后的元素 B 对调，然后删除 A，最后让 B 下沉到正确位置。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Key <span class="hljs-title">delMax</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 最大堆的堆顶就是最大元素</span><br>    Key max = pq[<span class="hljs-number">1</span>];<br>    <span class="hljs-comment">// 把这个最大元素换到最后，删除之</span><br>    exch(<span class="hljs-number">1</span>, N);<br>    pq[N] = <span class="hljs-keyword">null</span>;<br>    N--;<br>    <span class="hljs-comment">// 让 pq[1] 下沉到正确位置</span><br>    sink(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> max;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/heap/delete.gif" alt="5"><br>至此，一个优先级队列就实现了，插入和删除元素的时间复杂度为 $O(logK)$，$K$ 为当前二叉堆（优先级队列）中的元素总数。因为我们时间复杂度主要花费在 <code>sink</code> 或者 <code>swim</code> 上，而不管上浮还是下沉，最多也就树（堆）的高度，也就是 log 级别。</p><h3 id="五、最后总结"><a href="#五、最后总结" class="headerlink" title="五、最后总结"></a>五、最后总结</h3><p>二叉堆就是一种完全二叉树，所以适合存储在数组中，而且二叉堆拥有一些特殊性质。<br>二叉堆的操作很简单，主要就是上浮和下沉，来维护堆的性质（堆有序），核心代码也就十行。<br>优先级队列是基于二叉堆实现的，主要操作是插入和删除。插入是先插到最后，然后上浮到正确位置；删除是调换位置后再删除，然后下沉到正确位置。核心代码也就十行。<br>也许这就是数据结构的威力，简单的操作就能实现巧妙的功能，真心佩服发明二叉堆算法的人！</p><p><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%954">上一篇：学习数据结构和算法读什么书</a><br><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/LRU%E7%AE%97%E6%B3%95">下一篇：LRU算法详解</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索树操作集锦</title>
      <link href="2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E6%93%8D%E4%BD%9C%E9%9B%86%E9%94%A6/"/>
      <url>2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E6%93%8D%E4%BD%9C%E9%9B%86%E9%94%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉搜索树操作集锦"><a href="#二叉搜索树操作集锦" class="headerlink" title="二叉搜索树操作集锦"></a>二叉搜索树操作集锦</h1><p>通过之前的文章<a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%AD%A6%E4%B9%A0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E7%9A%84%E9%AB%98%E6%95%88%E6%96%B9%E6%B3%95">框架思维</a>，二叉树的遍历框架应该已经印到你的脑子里了，这篇文章就来实操一下，看看框架思维是怎么灵活运用，秒杀一切二叉树问题的。<br>二叉树算法的设计的总路线：明确一个节点要做的事情，然后剩下的事抛给框架。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    <span class="hljs-comment">// root 需要做什么？在这做。</span><br>    <span class="hljs-comment">// 其他的不用 root 操心，抛给框架</span><br>    traverse(root.left);<br>    traverse(root.right);<br>&#125;<br></code></pre></td></tr></table></figure><p>举两个简单的例子体会一下这个思路，热热身。<br><strong>1. 如何把二叉树所有的节点中的值加一？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">plusOne</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span>;<br>    root.val += <span class="hljs-number">1</span>;<br>    plusOne(root.left);<br>    plusOne(root.right);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2. 如何判断两棵二叉树是否完全相同？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isSameTree</span><span class="hljs-params">(TreeNode root1, TreeNode root2)</span> </span>&#123;<br>    <span class="hljs-comment">// 都为空的话，显然相同</span><br>    <span class="hljs-keyword">if</span> (root1 == <span class="hljs-keyword">null</span> &amp;&amp; root2 == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    <span class="hljs-comment">// 一个为空，一个非空，显然不同</span><br>    <span class="hljs-keyword">if</span> (root1 == <span class="hljs-keyword">null</span> || root2 == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-comment">// 两个都非空，但 val 不一样也不行</span><br>    <span class="hljs-keyword">if</span> (root1.val != root2.val) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-comment">// root1 和 root2 该比的都比完了</span><br>    <span class="hljs-keyword">return</span> isSameTree(root1.left, root2.left)<br>        &amp;&amp; isSameTree(root1.right, root2.right);<br>&#125;<br></code></pre></td></tr></table></figure><p>借助框架，上面这两个例子不难理解吧？如果可以理解，那么所有二叉树算法你都能解决。</p><p>二叉搜索树（Binary Search Tree，简称 BST）是一种很常用的的二叉树。它的定义是：一个二叉树中，任意节点的值要大于等于左子树所有节点的值，且要小于等于右边子树的所有节点的值。<br>如下就是一个符合定义的 BST：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/BST/BST_example.png" alt="BST"></p><p>下面实现 BST 的基础操作：判断 BST 的合法性、增、删、查。其中“删”和“判断合法性”略微复杂。<br><strong>零、判断 BST 的合法性</strong><br>这里是有坑的哦，我们按照刚才的思路，每个节点自己要做的事不就是比较自己和左右孩子吗？看起来应该这样写代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isValidBST</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">if</span> (root.left != <span class="hljs-keyword">null</span> &amp;&amp; root.val &lt;= root.left.val) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">if</span> (root.right != <span class="hljs-keyword">null</span> &amp;&amp; root.val &gt;= root.right.val) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">return</span> isValidBST(root.left)<br>        &amp;&amp; isValidBST(root.right);<br>&#125;<br></code></pre></td></tr></table></figure><p>但是这个算法出现了错误，BST 的每个节点应该要小于右边子树的所有节点，下面这个二叉树显然不是 BST，但是我们的算法会把它判定为 BST。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/BST/%E5%81%87BST.png" alt="notBST"><br>出现错误，不要慌张，框架没有错，一定是某个细节问题没注意到。我们重新看一下 BST 的定义，root 需要做的不只是和左右子节点比较，而是要整个左子树和右子树所有节点比较。怎么办，鞭长莫及啊！<br>这种情况，我们可以使用辅助函数，增加函数参数列表，在参数中携带额外信息，请看正确的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isValidBST</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> isValidBST(root, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isValidBST</span><span class="hljs-params">(TreeNode root, TreeNode min, TreeNode max)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">if</span> (min != <span class="hljs-keyword">null</span> &amp;&amp; root.val &lt;= min.val) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">if</span> (max != <span class="hljs-keyword">null</span> &amp;&amp; root.val &gt;= max.val) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">return</span> isValidBST(root.left, min, root) <br>        &amp;&amp; isValidBST(root.right, root, max);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>一、在 BST 中查找一个数是否存在</strong><br>根据我们的指导思想，可以这样写代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isInBST</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">if</span> (root.val == target) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">return</span> isInBST(root.left, target)<br>        || isInBST(root.right, target);<br>&#125;<br></code></pre></td></tr></table></figure><p>这样写完全正确，充分证明了你的框架性思维已经养成。现在你可以考虑一点细节问题了：如何充分利用信息，把 BST 这个“左小右大”的特性用上？<br>很简单，其实不需要递归地搜索两边，类似二分查找思想，根据 target 和 root.val 的大小比较，就能排除一边。我们把上面的思路稍稍改动：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isInBST</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">if</span> (root.val == target)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">if</span> (root.val &lt; target) <br>        <span class="hljs-keyword">return</span> isInBST(root.right, target);<br>    <span class="hljs-keyword">if</span> (root.val &gt; target)<br>        <span class="hljs-keyword">return</span> isInBST(root.left, target);<br>    <span class="hljs-comment">// root 该做的事做完了，顺带把框架也完成了，妙</span><br>&#125;<br></code></pre></td></tr></table></figure><p>于是，我们对原始框架进行改造，抽象出一套<strong>针对 BST 的遍历框架</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BST</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root.val == target)<br>        <span class="hljs-comment">// 找到目标，做点什么</span><br>    <span class="hljs-keyword">if</span> (root.val &lt; target) <br>        BST(root.right, target);<br>    <span class="hljs-keyword">if</span> (root.val &gt; target)<br>        BST(root.left, target);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>二、在 BST 中插入一个数</strong><br>对数据结构的操作无非遍历 + 访问，遍历就是“找”，访问就是“改”。具体到这个问题，插入一个数，就是先找到插入位置，然后进行插入操作。<br>上一个问题，我们总结了 BST 中的遍历框架，就是“找”的问题。直接套框架，加上“改”的操作即可。一旦涉及“改”，函数就要返回 TreeNode 类型，并且对递归调用的返回值进行接收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">TreeNode <span class="hljs-title">insertIntoBST</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>    <span class="hljs-comment">// 找到空位置插入新节点</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TreeNode(val);<br>    <span class="hljs-comment">// if (root.val == val)</span><br>    <span class="hljs-comment">//     BST 中一般不会插入已存在元素</span><br>    <span class="hljs-keyword">if</span> (root.val &lt; val) <br>        root.right = insertIntoBST(root.right, val);<br>    <span class="hljs-keyword">if</span> (root.val &gt; val) <br>        root.left = insertIntoBST(root.left, val);<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>三、在 BST 中删除一个数</strong><br>这个问题稍微复杂，不过你有框架指导，难不住你。跟插入操作类似，先“找”再“改”，先把框架写出来再说：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">TreeNode <span class="hljs-title">deleteNode</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root.val == key) &#123;<br>        <span class="hljs-comment">// 找到啦，进行删除</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (root.val &gt; key) &#123;<br>        root.left = deleteNode(root.left, key);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (root.val &lt; key) &#123;<br>        root.right = deleteNode(root.right, key);<br>    &#125;<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><p>找到目标节点了，比方说是节点 A，如何删除这个节点，这是难点。因为删除节点的同时不能破坏 BST 的性质。有三种情况，用图片来说明。<br>情况 1：A 恰好是末端节点，两个子节点都为空，那么它可以当场去世了。<br>图片来自 LeetCode<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/BST/bst_deletion_case_1.png" alt="1"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (root.left == <span class="hljs-keyword">null</span> &amp;&amp; root.right == <span class="hljs-keyword">null</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure><p>情况 2：A 只有一个非空子节点，那么它要让这个孩子接替自己的位置。<br>图片来自 LeetCode<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/BST/bst_deletion_case_2.png" alt="2"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 排除了情况 1 之后</span><br><span class="hljs-keyword">if</span> (root.left == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> root.right;<br><span class="hljs-keyword">if</span> (root.right == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> root.left;<br></code></pre></td></tr></table></figure><p>情况 3：A 有两个子节点，麻烦了，为了不破坏 BST 的性质，A 必须找到左子树中最大的那个节点，或者右子树中最小的那个节点来接替自己。我们以第二种方式讲解。<br>图片来自 LeetCode<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/BST/bst_deletion_case_3.png" alt="2"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (root.left != <span class="hljs-keyword">null</span> &amp;&amp; root.right != <span class="hljs-keyword">null</span>) &#123;<br>    <span class="hljs-comment">// 找到右子树的最小节点</span><br>    TreeNode minNode = getMin(root.right);<br>    <span class="hljs-comment">// 把 root 改成 minNode</span><br>    root.val = minNode.val;<br>    <span class="hljs-comment">// 转而去删除 minNode</span><br>    root.right = deleteNode(root.right, minNode.val);<br>&#125;<br></code></pre></td></tr></table></figure><p>三种情况分析完毕，填入框架，简化一下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">TreeNode <span class="hljs-title">deleteNode</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">if</span> (root.val == key) &#123;<br>        <span class="hljs-comment">// 这两个 if 把情况 1 和 2 都正确处理了</span><br>        <span class="hljs-keyword">if</span> (root.left == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> root.right;<br>        <span class="hljs-keyword">if</span> (root.right == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> root.left;<br>        <span class="hljs-comment">// 处理情况 3</span><br>        TreeNode minNode = getMin(root.right);<br>        root.val = minNode.val;<br>        root.right = deleteNode(root.right, minNode.val);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (root.val &gt; key) &#123;<br>        root.left = deleteNode(root.left, key);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (root.val &lt; key) &#123;<br>        root.right = deleteNode(root.right, key);<br>    &#125;<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br><span class="hljs-function">TreeNode <span class="hljs-title">getMin</span><span class="hljs-params">(TreeNode node)</span> </span>&#123;<br>    <span class="hljs-comment">// BST 最左边的就是最小的</span><br>    <span class="hljs-keyword">while</span> (node.left != <span class="hljs-keyword">null</span>) node = node.left;<br>    <span class="hljs-keyword">return</span> node;<br>&#125; <br></code></pre></td></tr></table></figure><p>删除操作就完成了。注意一下，这个删除操作并不完美，因为我们一般不会通过 root.val = minNode.val 修改节点内部的值来交换节点，而是通过一系列略微复杂的链表操作交换 root 和 minNode 两个节点。因为具体应用中，val 域可能会很大，修改起来很耗时，而链表操作无非改一改指针，而不会去碰内部数据。<br>但这里忽略这个细节，旨在突出 BST 基本操作的共性，以及借助框架逐层细化问题的思维方式。<br><strong>四、最后总结</strong><br>通过这篇文章，你学会了如下几个技巧：</p><ol><li>二叉树算法设计的总路线：把当前节点要做的事做好，其他的交给递归框架，不用当前节点操心。</li><li>如果当前节点会对下面的子节点有整体影响，可以通过辅助函数增长参数列表，借助参数传递信息。</li><li>在二叉树框架之上，扩展出一套 BST 遍历框架：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BST</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root.val == target)<br>        <span class="hljs-comment">// 找到目标，做点什么</span><br>    <span class="hljs-keyword">if</span> (root.val &lt; target) <br>        BST(root.right, target);<br>    <span class="hljs-keyword">if</span> (root.val &gt; target)<br>        BST(root.left, target);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>掌握了 BST 的基本操作。</li></ol><p><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/LRU%E7%AE%97%E6%B3%95">上一篇：LRU算法详解</a><br><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E5%8D%95%E8%B0%83%E6%A0%88">下一篇：特殊数据结构：单调栈</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单调栈</title>
      <link href="2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
      <url>2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E5%8D%95%E8%B0%83%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h3 id="如何使用单调栈解题"><a href="#如何使用单调栈解题" class="headerlink" title="如何使用单调栈解题"></a>如何使用单调栈解题</h3><p>栈（stack）是很简单的一种数据结构，先进后出的逻辑顺序，符合某些问题的特点，比如说函数调用栈。<br>单调栈实际上就是栈，只是利用了一些巧妙的逻辑，使得每次新元素入栈后，栈内的元素都保持有序（单调递增或单调递减）。<br>听起来有点像堆（heap）？不是的，单调栈用途不太广泛，只处理一种典型的问题，叫做 Next Greater Element。本文用讲解单调队列的算法模版解决这类问题，并且探讨处理「循环数组」的策略。<br>首先，讲解 Next Greater Number 的原始问题：给你一个数组，返回一个等长的数组，对应索引存储着下一个更大元素，如果没有更大的元素，就存 -1。不好用语言解释清楚，直接上一个例子：<br>给你一个数组 [2,1,2,4,3]，你返回数组 [4,2,4,-1,-1]。<br>解释：第一个 2 后面比 2 大的数是 4; 1 后面比 1 大的数是 2；第二个 2 后面比 2 大的数是 4; 4 后面没有比 4 大的数，填 -1；3 后面没有比 3 大的数，填 -1。<br>这道题的暴力解法很好想到，就是对每个元素后面都进行扫描，找到第一个更大的元素就行了。但是暴力解法的时间复杂度是 O(n^2)。<br>这个问题可以这样抽象思考：把数组的元素想象成并列站立的人，元素大小想象成人的身高。这些人面对你站成一列，如何求元素「2」的 Next Greater Number 呢？很简单，如果能够看到元素「2」，那么他后面可见的第一个人就是「2」的 Next Greater Number，因为比「2」小的元素身高不够，都被「2」挡住了，第一个露出来的就是答案。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8D%95%E8%B0%83%E6%A0%88/1.png" alt="ink-image"><br>这个情景很好理解吧？带着这个抽象的情景，先来看下代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">nextGreaterElement</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">ans</span><span class="hljs-params">(nums.size())</span></span>; <span class="hljs-comment">// 存放答案的数组</span><br>    <span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; s;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = nums.size() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123; <span class="hljs-comment">// 倒着往栈里放</span><br>        <span class="hljs-keyword">while</span> (!s.empty() &amp;&amp; s.top() &lt;= nums[i]) &#123; <span class="hljs-comment">// 判定个子高矮</span><br>            s.pop(); <span class="hljs-comment">// 矮个起开，反正也被挡着了。。。</span><br>        &#125;<br>        ans[i] = s.empty() ? <span class="hljs-number">-1</span> : s.top(); <span class="hljs-comment">// 这个元素身后的第一个高个</span><br>        s.push(nums[i]); <span class="hljs-comment">// 进队，接受之后的身高判定吧！</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><p>这就是单调队列解决问题的模板。for 循环要从后往前扫描元素，因为我们借助的是栈的结构，倒着入栈，其实是正着出栈。while 循环是把两个“高个”元素之间的元素排除，因为他们的存在没有意义，前面挡着个“更高”的元素，所以他们不可能被作为后续进来的元素的 Next Great Number 了。<br>这个算法的时间复杂度不是那么直观，如果你看到 for 循环嵌套 while 循环，可能认为这个算法的复杂度也是 O(n^2)，但是实际上这个算法的复杂度只有 O(n)。<br>分析它的时间复杂度，要从整体来看：总共有 n 个元素，每个元素都被 push 入栈了一次，而最多会被 pop 一次，没有任何冗余操作。所以总的计算规模是和元素规模 n 成正比的，也就是 O(n) 的复杂度。<br>现在，你已经掌握了单调栈的使用技巧，来一个简单的变形来加深一下理解。<br>给你一个数组 T = [73, 74, 75, 71, 69, 72, 76, 73]，这个数组存放的是近几天的天气气温（这气温是铁板烧？不是的，这里用的华氏度）。你返回一个数组，计算：对于每一天，你还要至少等多少天才能等到一个更暖和的气温；如果等不到那一天，填 0 。<br>举例：给你 T = [73, 74, 75, 71, 69, 72, 76, 73]，你返回 [1, 1, 4, 2, 1, 1, 0, 0]。<br>解释：第一天 73 华氏度，第二天 74 华氏度，比 73 大，所以对于第一天，只要等一天就能等到一个更暖和的气温。后面的同理。<br>你已经对 Next Greater Number 类型问题有些敏感了，这个问题本质上也是找 Next Greater Number，只不过现在不是问你 Next Greater Number 是多少，而是问你当前距离 Next Greater Number 的距离而已。<br>相同类型的问题，相同的思路，直接调用单调栈的算法模板，稍作改动就可以啦，直接上代码把。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">dailyTemperatures</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; T)</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">ans</span><span class="hljs-params">(T.size())</span></span>;<br>    <span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; s; <span class="hljs-comment">// 这里放元素索引，而不是元素</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = T.size() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">while</span> (!s.empty() &amp;&amp; T[s.top()] &lt;= T[i]) &#123;<br>            s.pop();<br>        &#125;<br>        ans[i] = s.empty() ? <span class="hljs-number">0</span> : (s.top() - i); <span class="hljs-comment">// 得到索引间距</span><br>        s.push(i); <span class="hljs-comment">// 加入索引，而不是元素</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><p>单调栈讲解完毕。下面开始另一个重点：如何处理「循环数组」。<br>同样是 Next Greater Number，现在假设给你的数组是个环形的，如何处理？<br>给你一个数组 [2,1,2,4,3]，你返回数组 [4,2,4,-1,4]。拥有了环形属性，最后一个元素 3 绕了一圈后找到了比自己大的元素 4 。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8D%95%E8%B0%83%E6%A0%88/2.png" alt="ink-image"></p><p>首先，计算机的内存都是线性的，没有真正意义上的环形数组，但是我们可以模拟出环形数组的效果，一般是通过 % 运算符求模（余数），获得环形特效：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-keyword">int</span> n = arr.length, index = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>    print(arr[index % n]);<br>    index++;<br>&#125;<br></code></pre></td></tr></table></figure><p>回到 Next Greater Number 的问题，增加了环形属性后，问题的难点在于：这个 Next 的意义不仅仅是当前元素的右边了，有可能出现在当前元素的左边（如上例）。<br>明确问题，问题就已经解决了一半了。我们可以考虑这样的思路：将原始数组“翻倍”，就是在后面再接一个原始数组，这样的话，按照之前“比身高”的流程，每个元素不仅可以比较自己右边的元素，而且也可以和左边的元素比较了。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8D%95%E8%B0%83%E6%A0%88/3.png" alt="ink-image (2)"><br>怎么实现呢？你当然可以把这个双倍长度的数组构造出来，然后套用算法模板。但是，我们可以不用构造新数组，而是利用循环数组的技巧来模拟。直接看代码吧：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">nextGreaterElements</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = nums.size();<br>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">res</span><span class="hljs-params">(n)</span></span>; <span class="hljs-comment">// 存放结果</span><br>    <span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; s;<br>    <span class="hljs-comment">// 假装这个数组长度翻倍了</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span> * n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">while</span> (!s.empty() &amp;&amp; s.top() &lt;= nums[i % n])<br>            s.pop();<br>        res[i % n] = s.empty() ? <span class="hljs-number">-1</span> : s.top();<br>        s.push(nums[i % n]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，你已经掌握了单调栈的设计方法及代码模板，学会了解决 Next Greater Number，并能够处理循环数组了。<br>你的在看，是对我的鼓励。关注公众号：labuladong</p><p><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E6%93%8D%E4%BD%9C%E9%9B%86%E9%94%A6">上一篇：二叉搜索树操作集锦</a><br><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97">下一篇：特殊数据结构：单调队列</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单调队列</title>
      <link href="2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
      <url>2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="特殊数据结构：单调队列"><a href="#特殊数据结构：单调队列" class="headerlink" title="特殊数据结构：单调队列"></a>特殊数据结构：单调队列</h1><p>前文讲了一种特殊的数据结构「单调栈」monotonic stack，解决了一类问题「Next Greater Number」，本文写一个类似的数据结构「单调队列」。<br>也许这种数据结构的名字你没听过，其实没啥难的，就是一个「队列」，只是使用了一点巧妙的方法，使得队列中的元素单调递增（或递减）。这个数据结构有什么用？可以解决滑动窗口的一系列问题。<br>看一道 LeetCode 题目，难度 hard：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/title.png"></p><h3 id="一、搭建解题框架"><a href="#一、搭建解题框架" class="headerlink" title="一、搭建解题框架"></a>一、搭建解题框架</h3><p>这道题不复杂，难点在于如何在 O(1) 时间算出每个「窗口」中的最大值，使得整个算法在线性时间完成。在之前我们探讨过类似的场景，得到一个结论：<br>在一堆数字中，已知最值，如果给这堆数添加一个数，那么比较一下就可以很快算出最值；但如果减少一个数，就不一定能很快得到最值了，而要遍历所有数重新找最值。<br>回到这道题的场景，每个窗口前进的时候，要添加一个数同时减少一个数，所以想在 O(1) 的时间得出新的最值，就需要「单调队列」这种特殊的数据结构来辅助了。<br>一个普通的队列一定有这两个操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Queue</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>;<br>    <span class="hljs-comment">// 或 enqueue，在队尾加入元素 n</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">// 或 dequeue，删除队头元素</span><br>&#125;<br></code></pre></td></tr></table></figure><p>一个「单调队列」的操作也差不多：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MonotonicQueue</span> </span>&#123;<br>    <span class="hljs-comment">// 在队尾添加元素 n</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>;<br>    <span class="hljs-comment">// 返回当前队列中的最大值</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">// 队头元素如果是 n，删除它</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然，这几个 API 的实现方法肯定跟一般的 Queue 不一样，不过我们暂且不管，而且认为这几个操作的时间复杂度都是 O(1)，先把这道「滑动窗口」问题的解答框架搭出来：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">maxSlidingWindow</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    MonotonicQueue window;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.size(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; k - <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//先把窗口的前 k - 1 填满</span><br>            window.push(nums[i]);<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 窗口开始向前滑动</span><br>            window.push(nums[i]);<br>            res.push_back(window.max());<br>            window.pop(nums[i - k + <span class="hljs-number">1</span>]);<br>            <span class="hljs-comment">// nums[i - k + 1] 就是窗口最后的元素</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/1.png" alt="图示"><br>这个思路很简单，能理解吧？下面我们开始重头戏，单调队列的实现。</p><h3 id="二、实现单调队列数据结构"><a href="#二、实现单调队列数据结构" class="headerlink" title="二、实现单调队列数据结构"></a>二、实现单调队列数据结构</h3><p>首先我们要认识另一种数据结构：deque，即双端队列。很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">deque</span> </span>&#123;<br>    <span class="hljs-comment">// 在队头插入元素 n</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_front</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>;<br>    <span class="hljs-comment">// 在队尾插入元素 n</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_back</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>;<br>    <span class="hljs-comment">// 在队头删除元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pop_front</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">// 在队尾删除元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pop_back</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">// 返回队头元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">front</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">// 返回队尾元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">back</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>而且，这些操作的复杂度都是 O(1)。这其实不是啥稀奇的数据结构，用链表作为底层结构的话，很容易实现这些功能。<br>「单调队列」的核心思路和「单调栈」类似。单调队列的 push 方法依然在队尾添加元素，但是要把前面比新元素小的元素都删掉：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MonotonicQueue</span> &#123;</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; data;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (!data.empty() &amp;&amp; data.back() &lt; n) <br>            data.pop_back();<br>        data.push_back(n);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>你可以想象，加入数字的大小代表人的体重，把前面体重不足的都压扁了，直到遇到更大的量级才停住。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/2.png"><br>如果每个元素被加入时都这样操作，最终单调队列中的元素大小就会保持一个单调递减的顺序，因此我们的 max() API 可以可以这样写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> data.front();<br>&#125;<br></code></pre></td></tr></table></figure><p>pop() API 在队头删除元素 n，也很好写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!data.empty() &amp;&amp; data.front() == n)<br>        data.pop_front();<br>&#125;<br></code></pre></td></tr></table></figure><p>之所以要判断 <code>data.front() == n</code>，是因为我们想删除的队头元素 n 可能已经被「压扁」了，这时候就不用删除了：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/3.png"><br>至此，单调队列设计完毕，看下完整的解题代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MonotonicQueue</span> &#123;</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; data;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (!data.empty() &amp;&amp; data.back() &lt; n) <br>            data.pop_back();<br>        data.push_back(n);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> data.front(); &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!data.empty() &amp;&amp; data.front() == n)<br>            data.pop_front();<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">maxSlidingWindow</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    MonotonicQueue window;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.size(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; k - <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//先填满窗口的前 k - 1</span><br>            window.push(nums[i]);<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 窗口向前滑动</span><br>            window.push(nums[i]);<br>            res.push_back(window.max());<br>            window.pop(nums[i - k + <span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>三、算法复杂度分析</strong><br>读者可能疑惑，push 操作中含有 while 循环，时间复杂度不是 O(1) 呀，那么本算法的时间复杂度应该不是线性时间吧？<br>单独看 push 操作的复杂度确实不是 O(1)，但是算法整体的复杂度依然是 O(N) 线性时间。要这样想，nums 中的每个元素最多被 push_back 和 pop_back 一次，没有任何多余操作，所以整体的复杂度还是 O(N)。<br>空间复杂度就很简单了，就是窗口的大小 O(k)。<br><strong>四、最后总结</strong><br>有的读者可能觉得「单调队列」和「优先级队列」比较像，实际上差别很大的。<br>单调队列在添加元素的时候靠删除元素保持队列的单调性，相当于抽取出某个函数中单调递增（或递减）的部分；而优先级队列（二叉堆）相当于自动排序，差别大了去了。<br>赶紧去拿下 LeetCode 第 239 道题吧～</p><p><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E5%8D%95%E8%B0%83%E6%A0%88">上一篇：特殊数据结构：单调栈</a><br><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E8%AE%BE%E8%AE%A1Twitter">下一篇：设计Twitter</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现计算器</title>
      <link href="2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E5%AE%9E%E7%8E%B0%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
      <url>2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E5%AE%9E%E7%8E%B0%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="拆解复杂问题：实现计算器"><a href="#拆解复杂问题：实现计算器" class="headerlink" title="拆解复杂问题：实现计算器"></a>拆解复杂问题：实现计算器</h1><p>我们最终要实现的计算器功能如下：</p><p>1、输入一个字符串，可以包含<code>+ - * /</code>、数字、括号以及空格，你的算法返回运算结构。<br>2、要符合运算法则，括号的优先级最高，先乘除后加减。<br>3、除号是整数除法，无论正负都向 0 取整（5/2=2，-5/2=-2）。<br>4、可以假定输入的算式一定合法，且计算过程不会出现整型溢出，不会出现除数为 0 的意外情况。<br>比如输入如下字符串，算法会返回 9：<br><code>3 * (2-6 /(3 -7))</code><br>可以看到，这就已经非常接近我们实际生活中使用的计算器了，虽然我们以前肯定都用过计算器，但是如果简单思考一下其算法实现，就会大惊失色：<br>1、按照常理处理括号，要先计算最内层的括号，然后向外慢慢化简。这个过程我们手算都容易出错，何况写成算法呢！<br>2、要做到先乘除，后加减，这一点教会小朋友还不算难，但教给计算机恐怕有点困难。<br>3、要处理空格。我们为了美观，习惯性在数字和运算符之间打个空格，但是计算之中得想办法忽略这些空格。<br>我记得很多大学数据结构的教材上，在讲栈这种数据结构的时候，应该都会用计算器举例，但是有一说一，讲的真的垃圾，不知道多少未来的计算机科学家就被这种简单的数据结构劝退了。<br>那么本文就来聊聊怎么实现上述一个功能完备的计算器功能，<strong>关键在于层层拆解问题，化整为零，逐个击破</strong>，相信这种思维方式能帮大家解决各种复杂问题。<br>下面就来拆解，从最简单的一个问题开始。</p><h3 id="一、字符串转整数"><a href="#一、字符串转整数" class="headerlink" title="一、字符串转整数"></a>一、字符串转整数</h3><p>是的，就是这么一个简单的问题，首先告诉我，怎么把一个字符串形式的<strong>正</strong>整数，转化成 int 型？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">string</span> s = <span class="hljs-string">&quot;458&quot;</span>;<br><span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.size(); i++) &#123;<br>    <span class="hljs-keyword">char</span> c = s[i];<br>    n = <span class="hljs-number">10</span> * n + (c - <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><span class="hljs-comment">// n 现在就等于 458</span><br></code></pre></td></tr></table></figure><p>这个还是很简单的吧，老套路了。但是即便这么简单，依然有坑：**<code>(c - &#39;0&#39;)</code>的这个括号不能省略，否则可能造成整型溢出**。<br>因为变量<code>c</code>是一个 ASCII 码，如果不加括号就会先加后减，想象一下<code>s</code>如果接近 INT_MAX，就会溢出。所以用括号保证先减后加才行。</p><h3 id="二、处理加减法"><a href="#二、处理加减法" class="headerlink" title="二、处理加减法"></a>二、处理加减法</h3><p>现在进一步，<strong>如果输入的这个算式只包含加减法，而且不存在空格</strong>，你怎么计算结果？我们拿字符串算式<code>1-12+3</code>为例，来说一个很简单的思路：<br>1、先给第一个数字加一个默认符号<code>+</code>，变成<code>+1-12+3</code>。<br>2、把一个运算符和数字组合成一对儿，也就是三对儿<code>+1</code>，<code>-12</code>，<code>+3</code>，把它们转化成数字，然后放到一个栈中。<br>3、将栈中所有的数字求和，就是原算式的结果。<br>我们直接看代码，结合一张图就看明白了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">calculate</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span> </span>&#123;<br>    <span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; stk;<br>    <span class="hljs-comment">// 记录算式中的数字</span><br>    <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 记录 num 前的符号，初始化为 +</span><br>    <span class="hljs-keyword">char</span> sign = <span class="hljs-string">&#x27;+&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.size(); i++) &#123;<br>        <span class="hljs-keyword">char</span> c = s[i];<br>        <span class="hljs-comment">// 如果是数字，连续读取到 num</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isdigit</span>(c)) <br>            num = <span class="hljs-number">10</span> * num + (c - <span class="hljs-string">&#x27;0&#x27;</span>);<br>        <span class="hljs-comment">// 如果不是数字，就是遇到了下一个符号，</span><br>        <span class="hljs-comment">// 之前的数字和符号就要存进栈中</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">isdigit</span>(c) || i == s.size() - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">switch</span> (sign) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>                    stk.push(num); <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>                    stk.push(-num); <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 更新符号为当前符号，数字清零</span><br>            sign = c;<br>            num = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 将栈中所有结果求和就是答案</span><br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!stk.empty()) &#123;<br>        res += stk.top();<br>        stk.pop();<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>我估计就是中间带<code>switch</code>语句的部分有点不好理解吧，<code>i</code>就是从左到右扫描，<code>sign</code>和<code>num</code>跟在它身后。当<code>s[i]</code>遇到一个运算符时，情况是这样的：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/calculator/1.jpg"><br>所以说，此时要根据<code>sign</code>的 case 不同选择<code>nums</code>的正负号，存入栈中，然后更新<code>sign</code>并清零<code>nums</code>记录下一对儿符合和数字的组合。<br>另外注意，不只是遇到新的符号会触发入栈，当<code>i</code>走到了算式的尽头（<code>i == s.size() - 1</code>），也应该将前面的数字入栈，方便后续计算最终结果。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/calculator/2.jpg"><br>至此，仅处理紧凑加减法字符串的算法就完成了，请确保理解以上内容，后续的内容就基于这个框架修修改改就完事儿了。</p><h3 id="三、处理乘除法"><a href="#三、处理乘除法" class="headerlink" title="三、处理乘除法"></a>三、处理乘除法</h3><p>其实思路跟仅处理加减法没啥区别，拿字符串<code>2-3*4+5</code>举例，核心思路依然是把字符串分解成符号和数字的组合。<br>比如上述例子就可以分解为<code>+2</code>，<code>-3</code>，<code>*4</code>，<code>+5</code>几对儿，我们刚才不是没有处理乘除号吗，很简单，<strong>其他部分都不用变</strong>，在<code>switch</code>部分加上对应的 case 就行了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.size(); i++) &#123;<br>    <span class="hljs-keyword">char</span> c = s[i];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isdigit</span>(c)) <br>        num = <span class="hljs-number">10</span> * num + (c - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">isdigit</span>(c) || i == s.size() - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">switch</span> (sign) &#123;<br>            <span class="hljs-keyword">int</span> pre;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>                stk.push(num); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>                stk.push(-num); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-comment">// 只要拿出前一个数字做对应运算即可</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>                pre = stk.top();<br>                stk.pop();<br>                stk.push(pre * num);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>                pre = stk.top();<br>                stk.pop();<br>                stk.push(pre / num);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">// 更新符号为当前符号，数字清零</span><br>        sign = c;<br>        num = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/calculator/3.jpg"><br><strong>乘除法优先于加减法体现在，乘除法可以和栈顶的数结合，而加减法只能把自己放入栈</strong>。<br>现在我们思考一下<strong>如何处理字符串中可能出现的空格字符</strong>。其实也非常简单，想想空格字符的出现，会影响我们现有代码的哪一部分？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 如果 c 非数字</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">isdigit</span>(c) || i == s.size() - <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">switch</span> (c) &#123;...&#125;<br>    sign = c;<br>    num = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>显然空格会进入这个 if 语句，但是我们并不想让空格的情况进入这个 if，因为这里会更新<code>sign</code>并清零<code>nums</code>，空格根本就不是运算符，应该被忽略。<br>那么只要多加一个条件即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> ((!<span class="hljs-built_in">isdigit</span>(c) &amp;&amp; c != <span class="hljs-string">&#x27; &#x27;</span>) || i == s.size() - <span class="hljs-number">1</span>) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>好了，现在我们的算法已经可以按照正确的法则计算加减乘除，并且自动忽略空格符，剩下的就是如何让算法正确识别括号了。</p><h3 id="四、处理括号"><a href="#四、处理括号" class="headerlink" title="四、处理括号"></a>四、处理括号</h3><p>处理算式中的括号看起来应该是最难的，但真没有看起来那么难。<br>为了规避编程语言的繁琐细节，我把前面解法的代码翻译成 Python 版本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">calculate</span>(<span class="hljs-params">s: str</span>) -&gt; int:</span><br>        <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">helper</span>(<span class="hljs-params">s: List</span>) -&gt; int:</span><br>        stack = []<br>        sign = <span class="hljs-string">&#x27;+&#x27;</span><br>        num = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> len(s) &gt; <span class="hljs-number">0</span>:<br>            c = s.pop(<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">if</span> c.isdigit():<br>                num = <span class="hljs-number">10</span> * num + int(c)<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">not</span> c.isdigit() <span class="hljs-keyword">and</span> c != <span class="hljs-string">&#x27; &#x27;</span>) <span class="hljs-keyword">or</span> len(s) == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">if</span> sign == <span class="hljs-string">&#x27;+&#x27;</span>:<br>                    stack.append(num)<br>                <span class="hljs-keyword">elif</span> sign == <span class="hljs-string">&#x27;-&#x27;</span>:<br>                    stack.append(-num)<br>                <span class="hljs-keyword">elif</span> sign == <span class="hljs-string">&#x27;*&#x27;</span>:<br>                    stack[<span class="hljs-number">-1</span>] = stack[<span class="hljs-number">-1</span>] * num<br>                <span class="hljs-keyword">elif</span> sign == <span class="hljs-string">&#x27;/&#x27;</span>:<br>                    <span class="hljs-comment"># python 除法向 0 取整的写法</span><br>                    stack[<span class="hljs-number">-1</span>] = int(stack[<span class="hljs-number">-1</span>] / float(num))                    <br>                num = <span class="hljs-number">0</span><br>                sign = c<br>        <span class="hljs-keyword">return</span> sum(stack)<br>    <span class="hljs-comment"># 需要把字符串转成列表方便操作</span><br>    <span class="hljs-keyword">return</span> helper(list(s))<br></code></pre></td></tr></table></figure><p>这段代码跟刚才 C++ 代码完全相同，唯一的区别是，不是从左到右遍历字符串，而是不断从左边<code>pop</code>出字符，本质还是一样的。<br>那么，为什么说处理括号没有看起来那么难呢，<strong>因为括号具有递归性质</strong>。我们拿字符串<code>3*(4-5/2)-6</code>举例：<br>calculate(<code>3*(4-5/2)-6</code>)<br>= 3 * calculate(<code>4-5/2</code>) - 6<br>= 3 * 2 - 6<br>= 0<br>可以脑补一下，无论多少层括号嵌套，通过 calculate 函数递归调用自己，都可以将括号中的算式化简成一个数字。<strong>换句话说，括号包含的算式，我们直接视为一个数字就行了</strong>。<br>现在的问题是，递归的开始条件和结束条件是什么？<strong>遇到<code>(</code>开始递归，遇到<code>)</code>结束递归</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">calculate</span>(<span class="hljs-params">s: str</span>) -&gt; int:</span><br>        <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">helper</span>(<span class="hljs-params">s: List</span>) -&gt; int:</span><br>        stack = []<br>        sign = <span class="hljs-string">&#x27;+&#x27;</span><br>        num = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> len(s) &gt; <span class="hljs-number">0</span>:<br>            c = s.pop(<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">if</span> c.isdigit():<br>                num = <span class="hljs-number">10</span> * num + int(c)<br>            <span class="hljs-comment"># 遇到左括号开始递归计算 num</span><br>            <span class="hljs-keyword">if</span> c == <span class="hljs-string">&#x27;(&#x27;</span>:<br>                num = helper(s)<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">not</span> c.isdigit() <span class="hljs-keyword">and</span> c != <span class="hljs-string">&#x27; &#x27;</span>) <span class="hljs-keyword">or</span> len(s) == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">if</span> sign == <span class="hljs-string">&#x27;+&#x27;</span>: ...<br>                <span class="hljs-keyword">elif</span> sign == <span class="hljs-string">&#x27;-&#x27;</span>: ... <br>                <span class="hljs-keyword">elif</span> sign == <span class="hljs-string">&#x27;*&#x27;</span>: ...<br>                <span class="hljs-keyword">elif</span> sign == <span class="hljs-string">&#x27;/&#x27;</span>: ...<br>                num = <span class="hljs-number">0</span><br>                sign = c<br>            <span class="hljs-comment"># 遇到右括号返回递归结果</span><br>            <span class="hljs-keyword">if</span> c == <span class="hljs-string">&#x27;)&#x27;</span>: <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> sum(stack)<br>    <span class="hljs-keyword">return</span> helper(list(s))<br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/calculator/4.jpg"><br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/calculator/5.jpg"><br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/calculator/6.jpg"><br>你看，加了两三行代码，就可以处理括号了，这就是递归的魅力。至此，计算器的全部功能就实现了，通过对问题的层层拆解化整为零，再回头看，这个问题似乎也没那么复杂嘛。</p><h3 id="五、最后总结"><a href="#五、最后总结" class="headerlink" title="五、最后总结"></a>五、最后总结</h3><p>本文借实现计算器的问题，主要想表达的是一种处理复杂问题的思路。<br>我们首先从字符串转数字这个简单问题开始，进而处理只包含加减法的算式，进而处理包含加减乘除四则运算的算式，进而处理空格字符，进而处理包含括号的算式。<br><strong>可见，对于一些比较困难的问题，其解法并不是一蹴而就的，而是步步推进，螺旋上升的</strong>。如果一开始给你原题，你不会做，甚至看不懂答案，都很正常，关键在于我们自己如何简化问题，如何以退为进。<br><strong>退而求其次是一种很聪明策略</strong>。你想想啊，假设这是一道考试题，你不会实现这个计算器，但是你写了字符串转整数的算法并指出了容易溢出的陷阱，那起码可以得 20 分吧；如果你能够处理加减法，那可以得 40 分吧；如果你能处理加减乘除四则运算，那起码够 70 分了；再加上处理空格字符，80 有了吧。我就是不会处理括号，那就算了，80 已经很 OK 了好不好。</p><p><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BD%8D%E6%93%8D%E4%BD%9C">上一篇：常用的位操作</a><br><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E7%83%A7%E9%A5%BC%E6%8E%92%E5%BA%8F">下一篇：烧饼排序</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构系列</title>
      <link href="2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/"/>
      <url>2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构系列"><a href="#数据结构系列" class="headerlink" title="数据结构系列"></a>数据结构系列</h1><ul><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%AD%A6%E4%B9%A0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E7%9A%84%E9%AB%98%E6%95%88%E6%96%B9%E6%B3%95">学习算法和刷题的思路指南</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%954">学习数据结构和算法读什么书</a></li><li><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%8F%89%E5%A0%86%E8%AF%A6%E8%A7%A3%E5%AE%9E%E7%8E%B0%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97">二叉堆详解实现优先级队列</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/LRU%E7%AE%97%E6%B3%95">LRU算法详解</a></li><li><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E6%93%8D%E4%BD%9C%E9%9B%86%E9%94%A6">二叉搜索树操作集锦</a></li><li><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E5%8D%95%E8%B0%83%E6%A0%88">特殊数据结构：单调栈</a></li><li><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97">特殊数据结构：单调队列</a></li><li><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E8%AE%BE%E8%AE%A1Twitter">设计Twitter</a></li><li><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E9%80%92%E5%BD%92%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86">递归反转链表的一部分</a></li><li><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97">队列实现栈|栈实现队列</a><br>这一章主要是一些特殊的数据结构设计，比如单调栈解决 Next Greater Number，单调队列解决滑动窗口问题；还有常用数据结构的操作，比如链表、树、二叉堆。</li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计Twitter</title>
      <link href="2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E8%AE%BE%E8%AE%A1Twitter/"/>
      <url>2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E8%AE%BE%E8%AE%A1Twitter/</url>
      
        <content type="html"><![CDATA[<h1 id="设计Twitter"><a href="#设计Twitter" class="headerlink" title="设计Twitter"></a>设计Twitter</h1><p>「design Twitter」是 LeetCode 上第 335 道题目，不仅题目本身很有意思，而且把合并多个有序链表的算法和面向对象设计（OO design）结合起来了，很有实际意义，本文就带大家来看看这道题。<br>至于 Twitter 的什么功能跟算法有关系，等我们描述一下题目要求就知道了。</p><h3 id="一、题目及应用场景简介"><a href="#一、题目及应用场景简介" class="headerlink" title="一、题目及应用场景简介"></a>一、题目及应用场景简介</h3><p>Twitter 和微博功能差不多，我们主要要实现这样几个 API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Twitter</span> </span>&#123;<br>    <span class="hljs-comment">/** user 发表一条 tweet 动态 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postTweet</span><span class="hljs-params">(<span class="hljs-keyword">int</span> userId, <span class="hljs-keyword">int</span> tweetId)</span> </span>&#123;&#125;<br>    <br>    <span class="hljs-comment">/** 返回该 user 关注的人（包括他自己）最近的动态 id，</span><br><span class="hljs-comment">    最多 10 条，而且这些动态必须按从新到旧的时间线顺序排列。*/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">getNewsFeed</span><span class="hljs-params">(<span class="hljs-keyword">int</span> userId)</span> </span>&#123;&#125;<br>    <br>    <span class="hljs-comment">/** follower 关注 followee，如果 Id 不存在则新建 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">follow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> followerId, <span class="hljs-keyword">int</span> followeeId)</span> </span>&#123;&#125;<br>    <br>    <span class="hljs-comment">/** follower 取关 followee，如果 Id 不存在则什么都不做 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unfollow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> followerId, <span class="hljs-keyword">int</span> followeeId)</span> </span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>举个具体的例子，方便大家理解 API 的具体用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">Twitter twitter = <span class="hljs-keyword">new</span> Twitter();<br>twitter.postTweet(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>);<br><span class="hljs-comment">// 用户 1 发送了一条新推文 5</span><br>twitter.getNewsFeed(<span class="hljs-number">1</span>);<br><span class="hljs-comment">// return [5]，因为自己是关注自己的</span><br>twitter.follow(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-comment">// 用户 1 关注了用户 2</span><br>twitter.postTweet(<span class="hljs-number">2</span>, <span class="hljs-number">6</span>);<br><span class="hljs-comment">// 用户2发送了一个新推文 (id = 6)</span><br>twitter.getNewsFeed(<span class="hljs-number">1</span>);<br><span class="hljs-comment">// return [6, 5]</span><br><span class="hljs-comment">// 解释：用户 1 关注了自己和用户 2，所以返回他们的最近推文</span><br><span class="hljs-comment">// 而且 6 必须在 5 之前，因为 6 是最近发送的</span><br>twitter.unfollow(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-comment">// 用户 1 取消关注了用户 2</span><br>twitter.getNewsFeed(<span class="hljs-number">1</span>);<br><span class="hljs-comment">// return [5]</span><br></code></pre></td></tr></table></figure><p>这个场景在我们的现实生活中非常常见。拿朋友圈举例，比如我刚加到女神的微信，然后我去刷新一下我的朋友圈动态，那么女神的动态就会出现在我的动态列表，而且会和其他动态按时间排好序。只不过 Twitter 是单向关注，微信好友相当于双向关注。除非，被屏蔽…<br>这几个 API 中大部分都很好实现，最核心的功能难点应该是 <code>getNewsFeed</code>，因为返回的结果必须在时间上有序，但问题是用户的关注是动态变化的，怎么办？<br><strong>这里就涉及到算法了</strong>：如果我们把每个用户各自的推文存储在链表里，每个链表节点存储文章 id 和一个时间戳 time（记录发帖时间以便比较），而且这个链表是按 time 有序的，那么如果某个用户关注了 k 个用户，我们就可以用合并 k 个有序链表的算法合并出有序的推文列表，正确地 <code>getNewsFeed</code> 了！<br>具体的算法等会讲解。不过，就算我们掌握了算法，应该如何编程表示用户 user 和推文动态 tweet 才能把算法流畅地用出来呢？<strong>这就涉及简单的面向对象设计了</strong>，下面我们来由浅入深，一步一步进行设计。</p><h3 id="二、面向对象设计"><a href="#二、面向对象设计" class="headerlink" title="二、面向对象设计"></a>二、面向对象设计</h3><p>根据刚才的分析，我们需要一个 User 类，储存 user 信息，还需要一个 Tweet 类，储存推文信息，并且要作为链表的节点。所以我们先搭建一下整体的框架：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Twitter</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> timestamp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tweet</span> </span>&#123;&#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;&#125;<br>    <span class="hljs-comment">/* 还有那几个 API 方法 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postTweet</span><span class="hljs-params">(<span class="hljs-keyword">int</span> userId, <span class="hljs-keyword">int</span> tweetId)</span> </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">getNewsFeed</span><span class="hljs-params">(<span class="hljs-keyword">int</span> userId)</span> </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">follow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> followerId, <span class="hljs-keyword">int</span> followeeId)</span> </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unfollow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> followerId, <span class="hljs-keyword">int</span> followeeId)</span> </span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>之所以要把 Tweet 和 User 类放到 Twitter 类里面，是因为 Tweet 类必须要用到一个全局时间戳 timestamp，而 User 类又需要用到 Tweet 类记录用户发送的推文，所以它们都作为内部类。不过为了清晰和简洁，下文会把每个内部类和 API 方法单独拿出来实现。<br><strong>1、Tweet 类的实现</strong><br>根据前面的分析，Tweet 类很容易实现：每个 Tweet 实例需要记录自己的 tweetId 和发表时间 time，而且作为链表节点，要有一个指向下一个节点的 next 指针。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tweet</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> time;<br>    <span class="hljs-keyword">private</span> Tweet next;<br>    <span class="hljs-comment">// 需要传入推文内容（id）和发文时间</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Tweet</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> time)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.time = time;<br>        <span class="hljs-keyword">this</span>.next = <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E8%AE%BE%E8%AE%A1Twitter/tweet.jpg" alt="tweet"><br><strong>2、User 类的实现</strong><br>我们根据实际场景想一想，一个用户需要存储的信息有 userId，关注列表，以及该用户发过的推文列表。其中关注列表应该用集合（Hash Set）这种数据结构来存，因为不能重复，而且需要快速查找；推文列表应该由链表这种数据结构储存，以便于进行有序合并的操作。画个图理解一下：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E8%AE%BE%E8%AE%A1Twitter/user.jpg" alt="User"><br>除此之外，根据面向对象的设计原则，「关注」「取关」和「发文」应该是 User 的行为，况且关注列表和推文列表也存储在 User 类中，所以我们也应该给 User 添加 follow，unfollow 和 post 这几个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// static int timestamp = 0</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">public</span> Set&lt;Integer&gt; followed;<br>    <span class="hljs-comment">// 用户发表的推文链表头结点</span><br>    <span class="hljs-keyword">public</span> Tweet head;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> userId)</span> </span>&#123;<br>        followed = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        <span class="hljs-keyword">this</span>.id = userId;<br>        <span class="hljs-keyword">this</span>.head = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">// 关注一下自己</span><br>        follow(id);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">follow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> userId)</span> </span>&#123;<br>        followed.add(userId);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unfollow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> userId)</span> </span>&#123;<br>        <span class="hljs-comment">// 不可以取关自己</span><br>        <span class="hljs-keyword">if</span> (userId != <span class="hljs-keyword">this</span>.id)<br>            followed.remove(userId);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">post</span><span class="hljs-params">(<span class="hljs-keyword">int</span> tweetId)</span> </span>&#123;<br>        Tweet twt = <span class="hljs-keyword">new</span> Tweet(tweetId, timestamp);<br>        timestamp++;<br>        <span class="hljs-comment">// 将新建的推文插入链表头</span><br>        <span class="hljs-comment">// 越靠前的推文 time 值越大</span><br>        twt.next = head;<br>        head = twt;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3、几个 API 方法的实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Twitter</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> timestamp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tweet</span> </span>&#123;...&#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;...&#125;<br>    <span class="hljs-comment">// 我们需要一个映射将 userId 和 User 对象对应起来</span><br>    <span class="hljs-keyword">private</span> HashMap&lt;Integer, User&gt; userMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-comment">/** user 发表一条 tweet 动态 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postTweet</span><span class="hljs-params">(<span class="hljs-keyword">int</span> userId, <span class="hljs-keyword">int</span> tweetId)</span> </span>&#123;<br>        <span class="hljs-comment">// 若 userId 不存在，则新建</span><br>        <span class="hljs-keyword">if</span> (!userMap.containsKey(userId))<br>            userMap.put(userId, <span class="hljs-keyword">new</span> User(userId));<br>        User u = userMap.get(userId);<br>        u.post(tweetId);<br>    &#125;<br>    <br>    <span class="hljs-comment">/** follower 关注 followee */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">follow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> followerId, <span class="hljs-keyword">int</span> followeeId)</span> </span>&#123;<br>        <span class="hljs-comment">// 若 follower 不存在，则新建</span><br><span class="hljs-keyword">if</span>(!userMap.containsKey(followerId))&#123;<br>User u = <span class="hljs-keyword">new</span> User(followerId);<br>userMap.put(followerId, u);<br>&#125;<br>        <span class="hljs-comment">// 若 followee 不存在，则新建</span><br><span class="hljs-keyword">if</span>(!userMap.containsKey(followeeId))&#123;<br>User u = <span class="hljs-keyword">new</span> User(followeeId);<br>userMap.put(followeeId, u);<br>&#125;<br>userMap.get(followerId).follow(followeeId);<br>    &#125;<br>    <br>    <span class="hljs-comment">/** follower 取关 followee，如果 Id 不存在则什么都不做 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unfollow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> followerId, <span class="hljs-keyword">int</span> followeeId)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (userMap.containsKey(followerId)) &#123;<br>            User flwer = userMap.get(followerId);<br>            flwer.unfollow(followeeId);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/** 返回该 user 关注的人（包括他自己）最近的动态 id，</span><br><span class="hljs-comment">    最多 10 条，而且这些动态必须按从新到旧的时间线顺序排列。*/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">getNewsFeed</span><span class="hljs-params">(<span class="hljs-keyword">int</span> userId)</span> </span>&#123;<br>        <span class="hljs-comment">// 需要理解算法，见下文</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、算法设计"><a href="#三、算法设计" class="headerlink" title="三、算法设计"></a>三、算法设计</h3><p>实现合并 k 个有序链表的算法需要用到优先级队列（Priority Queue），这种数据结构是「二叉堆」最重要的应用，你可以理解为它可以对插入的元素自动排序。乱序的元素插入其中就被放到了正确的位置，可以按照从小到大（或从大到小）有序地取出元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">PriorityQueue pq<br><span class="hljs-comment"># 乱序插入</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>&#125;:<br>    pq.add(i)<br><span class="hljs-keyword">while</span> pq <span class="hljs-keyword">not</span> empty:<br>    <span class="hljs-comment"># 每次取出第一个（最小）元素</span><br>    print(pq.pop())<br><span class="hljs-comment"># 输出有序：1,2,4,6,9</span><br></code></pre></td></tr></table></figure><p>借助这种牛逼的数据结构支持，我们就很容易实现这个核心功能了。注意我们把优先级队列设为按 time 属性<strong>从大到小降序排列</strong>，因为 time 越大意味着时间越近，应该排在前面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">getNewsFeed</span><span class="hljs-params">(<span class="hljs-keyword">int</span> userId)</span> </span>&#123;<br>    List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-keyword">if</span> (!userMap.containsKey(userId)) <span class="hljs-keyword">return</span> res;<br>    <span class="hljs-comment">// 关注列表的用户 Id</span><br>    Set&lt;Integer&gt; users = userMap.get(userId).followed;<br>    <span class="hljs-comment">// 自动通过 time 属性从大到小排序，容量为 users 的大小</span><br>    PriorityQueue&lt;Tweet&gt; pq = <br>        <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;(users.size(), (a, b)-&gt;(b.time - a.time));<br>    <span class="hljs-comment">// 先将所有链表头节点插入优先级队列</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> id : users) &#123;<br>        Tweet twt = userMap.get(id).head;<br>        <span class="hljs-keyword">if</span> (twt == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">continue</span>;<br>        pq.add(twt);<br>    &#125;<br>    <span class="hljs-keyword">while</span> (!pq.isEmpty()) &#123;<br>        <span class="hljs-comment">// 最多返回 10 条就够了</span><br>        <span class="hljs-keyword">if</span> (res.size() == <span class="hljs-number">10</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">// 弹出 time 值最大的（最近发表的）</span><br>        Tweet twt = pq.poll();<br>        res.add(twt.id);<br>        <span class="hljs-comment">// 将下一篇 Tweet 插入进行排序</span><br>        <span class="hljs-keyword">if</span> (twt.next != <span class="hljs-keyword">null</span>) <br>            pq.add(twt.next);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个过程是这样的，下面是我制作的一个 GIF 图描述合并链表的过程。假设有三个 Tweet 链表按 time 属性降序排列，我们把他们降序合并添加到 res 中。注意图中链表节点中的数字是 time 属性，不是 id 属性：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E8%AE%BE%E8%AE%A1Twitter/merge.gif" alt="gif"><br>至此，这道一个极其简化的 Twitter 时间线功能就设计完毕了。</p><h3 id="四、最后总结"><a href="#四、最后总结" class="headerlink" title="四、最后总结"></a>四、最后总结</h3><p>本文运用简单的面向对象技巧和合并 k 个有序链表的算法设计了一套简化的时间线功能，这个功能其实广泛地运用在许多社交应用中。<br>我们先合理地设计出 User 和 Tweet 两个类，然后基于这个设计之上运用算法解决了最重要的一个功能。可见实际应用中的算法并不是孤立存在的，需要和其他知识混合运用，才能发挥实际价值。<br>当然，实际应用中的社交 App 数据量是巨大的，考虑到数据库的读写性能，我们的设计可能承受不住流量压力，还是有些太简化了。而且实际的应用都是一个极其庞大的工程，比如下图，是 Twitter 这样的社交网站大致的系统结构：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E8%AE%BE%E8%AE%A1Twitter/design.png" alt="design"><br>我们解决的问题应该只能算 Timeline Service 模块的一小部分，功能越多，系统的复杂性可能是指数级增长的。所以说合理的顶层设计十分重要，其作用是远超某一个算法的。<br>最后，Github 上有一个优秀的开源项目叫 <a href="https://github.com/donnemartin/system-design-primer">system-design-primer</a>，专门收集了很多大型系统设计的案例和解析，而且有中文版本，上面这个图也出自该项目。对系统设计感兴趣的读者可以点击链接查看。<br>PS：本文前两张图片和 GIF 是我第一次尝试用平板的绘图软件制作的，花了很多时间，尤其是 GIF 图，需要一帧一帧制作。如果本文内容对你有帮助，点个赞分个享，鼓励一下我呗！</p><p><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97">上一篇：特殊数据结构：单调队列</a><br><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E9%80%92%E5%BD%92%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86">下一篇：递归反转链表的一部分</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归反转链表的一部分</title>
      <link href="2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E9%80%92%E5%BD%92%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86/"/>
      <url>2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E9%80%92%E5%BD%92%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1 id="递归反转链表的一部分"><a href="#递归反转链表的一部分" class="headerlink" title="递归反转链表的一部分"></a>递归反转链表的一部分</h1><p>反转单链表的迭代实现不是一个困难的事情，但是递归实现就有点难度了，如果再加一点难度，让你仅仅反转单链表中的一部分，你是否能<strong>够递归实现</strong>呢？<br>本文就来由浅入深，step by step 地解决这个问题。如果你还不会递归地反转单链表也没关系，<strong>本文会从递归反转整个单链表开始拓展</strong>，只要你明白单链表的结构，相信你能够有所收获。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 单链表节点的结构</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> val;<br>    ListNode next;<br>    ListNode(<span class="hljs-keyword">int</span> x) &#123; val = x; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>什么叫反转单链表的一部分呢，就是给你一个索引区间，让你把单链表中这部分元素反转，其他部分不变：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/title.png"><br><strong>注意这里的索引是从 1 开始的</strong>。迭代的思路大概是：先用一个 for 循环找到第 <code>m</code> 个位置，然后再用一个 for 循环将 <code>m</code> 和 <code>n</code> 之间的元素反转。但是我们的递归解法不用一个 for 循环，纯递归实现反转。<br>迭代实现思路看起来虽然简单，但是细节问题很多的，反而不容易写对。相反，递归实现就很简洁优美，下面就由浅入深，先从反转整个单链表说起。</p><h3 id="一、递归反转整个链表"><a href="#一、递归反转整个链表" class="headerlink" title="一、递归反转整个链表"></a>一、递归反转整个链表</h3><p>这个算法可能很多读者都听说过，这里详细介绍一下，先直接看实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">ListNode <span class="hljs-title">reverse</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> head;<br>    ListNode last = reverse(head.next);<br>    head.next.next = head;<br>    head.next = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">return</span> last;<br>&#125;<br></code></pre></td></tr></table></figure><p>看起来是不是感觉不知所云，完全不能理解这样为什么能够反转链表？这就对了，这个算法常常拿来显示递归的巧妙和优美，我们下面来详细解释一下这段代码。<br><strong>对于递归算法，最重要的就是明确递归函数的定义</strong>。具体来说，我们的 <code>reverse</code> 函数定义是这样的：<br><strong>输入一个节点 <code>head</code>，将「以 <code>head</code> 为起点」的链表反转，并返回反转之后的头结点</strong>。<br>明白了函数的定义，在来看这个问题。比如说我们想反转这个链表：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/1.jpg"><br>那么输入 <code>reverse(head)</code> 后，会在这里进行递归：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ListNode last = reverse(head.next);<br></code></pre></td></tr></table></figure><p>不要跳进递归（你的脑袋能压几个栈呀？），而是要根据刚才的函数定义，来弄清楚这段代码会产生什么结果：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/2.jpg"><br>这个 <code>reverse(head.next)</code> 执行完成后，整个链表就成了这样：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/3.jpg"><br>并且根据函数定义，<code>reverse</code> 函数会返回反转之后的头结点，我们用变量 <code>last</code> 接收了。<br>现在再来看下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">head.next.next = head;<br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/4.jpg"><br>接下来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">head.next = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">return</span> last;<br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/5.jpg"><br>神不神奇，这样整个链表就反转过来了！递归代码就是这么简洁优雅，不过其中有两个地方需要注意：<br>1、递归函数要有 base case，也就是这句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> head;<br></code></pre></td></tr></table></figure><p>意思是如果链表只有一个节点的时候反转也是它自己，直接返回即可。<br>2、当链表递归反转之后，新的头结点是 <code>last</code>，而之前的 <code>head</code> 变成了最后一个节点，别忘了链表的末尾要指向 null：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">head.next = <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure><p>理解了这两点后，我们就可以进一步深入了，接下来的问题其实都是在这个算法上的扩展。</p><h3 id="二、反转链表前-N-个节点"><a href="#二、反转链表前-N-个节点" class="headerlink" title="二、反转链表前 N 个节点"></a>二、反转链表前 N 个节点</h3><p>这次我们实现一个这样的函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 将链表的前 n 个节点反转（n &lt;= 链表长度）</span><br><span class="hljs-function">ListNode <span class="hljs-title">reverseN</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> n)</span></span><br></code></pre></td></tr></table></figure><p>比如说对于下图链表，执行 <code>reverseN(head, 3)</code>：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/6.jpg"><br>解决思路和反转整个链表差不多，只要稍加修改即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">ListNode successor = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 后驱节点</span><br><span class="hljs-comment">// 反转以 head 为起点的 n 个节点，返回新的头结点</span><br><span class="hljs-function">ListNode <span class="hljs-title">reverseN</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123; <br>        <span class="hljs-comment">// 记录第 n + 1 个节点</span><br>        successor = head.next;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-comment">// 以 head.next 为起点，需要反转前 n - 1 个节点</span><br>    ListNode last = reverseN(head.next, n - <span class="hljs-number">1</span>);<br>    head.next.next = head;<br>    <span class="hljs-comment">// 让反转之后的 head 节点和后面的节点连起来</span><br>    head.next = successor;<br>    <span class="hljs-keyword">return</span> last;<br>&#125;    <br></code></pre></td></tr></table></figure><p>具体的区别：<br>1、base case 变为 <code>n == 1</code>，反转一个元素，就是它本身，同时<strong>要记录后驱节点</strong>。<br>2、刚才我们直接把 <code>head.next</code> 设置为 null，因为整个链表反转后原来的 <code>head</code> 变成了整个链表的最后一个节点。但现在 <code>head</code> 节点在递归反转之后不一定是最后一个节点了，所以要记录后驱 <code>successor</code>（第 n + 1 个节点），反转之后将 <code>head</code> 连接上。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/7.jpg"><br>OK，如果这个函数你也能看懂，就离实现「反转一部分链表」不远了。</p><h3 id="三、反转链表的一部分"><a href="#三、反转链表的一部分" class="headerlink" title="三、反转链表的一部分"></a>三、反转链表的一部分</h3><p>现在解决我们最开始提出的问题，给一个索引区间 <code>[m,n]</code>（索引从 1 开始），仅仅反转区间中的链表元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">ListNode <span class="hljs-title">reverseBetween</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n)</span></span><br></code></pre></td></tr></table></figure><p>首先，如果 <code>m == 1</code>，就相当于反转链表开头的 <code>n</code> 个元素嘛，也就是我们刚才实现的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">ListNode <span class="hljs-title">reverseBetween</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">// base case</span><br>    <span class="hljs-keyword">if</span> (m == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 相当于反转前 n 个元素</span><br>        <span class="hljs-keyword">return</span> reverseN(head, n);<br>    &#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果 <code>m != 1</code> 怎么办？如果我们把 <code>head</code> 的索引视为 1，那么我们是想从第 <code>m</code> 个元素开始反转对吧；如果把 <code>head.next</code> 的索引视为 1 呢？那么相对于 <code>head.next</code>，反转的区间应该是从第 <code>m - 1</code> 个元素开始的；那么对于 <code>head.next.next</code> 呢……<br>区别于迭代思想，这就是递归思想，所以我们可以完成代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">ListNode <span class="hljs-title">reverseBetween</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">// base case</span><br>    <span class="hljs-keyword">if</span> (m == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> reverseN(head, n);<br>    &#125;<br>    <span class="hljs-comment">// 前进到反转的起点触发 base case</span><br>    head.next = reverseBetween(head.next, m - <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，我们的最终大 BOSS 就被解决了。</p><h3 id="四、最后总结"><a href="#四、最后总结" class="headerlink" title="四、最后总结"></a>四、最后总结</h3><p>递归的思想相对迭代思想，稍微有点难以理解，处理的技巧是：不要跳进递归，而是利用明确的定义来实现算法逻辑。<br>处理看起来比较困难的问题，可以尝试化整为零，把一些简单的解法进行修改，解决困难的问题。<br>值得一提的是，递归操作链表并不高效。和迭代解法相比，虽然时间复杂度都是 O(N)，但是迭代解法的空间复杂度是 O(1)，而递归解法需要堆栈，空间复杂度是 O(N)。所以递归操作链表可以作为对递归算法的练习或者拿去和小伙伴装逼，但是考虑效率的话还是使用迭代算法更好。</p><p><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E8%AE%BE%E8%AE%A1Twitter">上一篇：设计Twitter</a><br><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97">下一篇：队列实现栈|栈实现队列</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列实现栈栈实现队列</title>
      <link href="2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
      <url>2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="队列实现栈-栈实现队列"><a href="#队列实现栈-栈实现队列" class="headerlink" title="队列实现栈|栈实现队列"></a>队列实现栈|栈实现队列</h1><p>队列是一种先进先出的数据结构，栈是一种先进后出的数据结构，形象一点就是这样：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%A0%88%E9%98%9F%E5%88%97/1.jpg"><br>这两种数据结构底层其实都是数组或者链表实现的，只是 API 限定了它们的特性，那么今天就来看看如何使用「栈」的特性来实现一个「队列」，如何用「队列」实现一个「栈」。</p><h3 id="一、用栈实现队列"><a href="#一、用栈实现队列" class="headerlink" title="一、用栈实现队列"></a>一、用栈实现队列</h3><p>首先，队列的 API 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyQueue</span> </span>&#123;<br>    <br>    <span class="hljs-comment">/** 添加元素到队尾 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>;<br>    <br>    <span class="hljs-comment">/** 删除队头的元素并返回 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>;<br>    <br>    <span class="hljs-comment">/** 返回队头元素 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">peek</span><span class="hljs-params">()</span></span>;<br>    <br>    <span class="hljs-comment">/** 判断队列是否为空 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们使用两个栈 <code>s1, s2</code> 就能实现一个队列的功能（这样放置栈可能更容易理解）：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%A0%88%E9%98%9F%E5%88%97/2.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyQueue</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Stack&lt;Integer&gt; s1, s2;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyQueue</span><span class="hljs-params">()</span> </span>&#123;<br>        s1 = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        s2 = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    &#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>当调用 <code>push</code> 让元素入队时，只要把元素压入 <code>s1</code> 即可，比如说 <code>push</code> 进 3 个元素分别是 1,2,3，那么底层结构就是这样：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%A0%88%E9%98%9F%E5%88%97/3.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 添加元素到队尾 */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    s1.push(x);<br>&#125;<br></code></pre></td></tr></table></figure><p>那么如果这时候使用 <code>peek</code> 查看队头的元素怎么办呢？按道理队头元素应该是 1，但是在 <code>s1</code> 中 1 被压在栈底，现在就要轮到 <code>s2</code> 起到一个中转的作用了：当 <code>s2</code> 为空时，可以把 <code>s1</code> 的所有元素取出再添加进 <code>s2</code>，<strong>这时候 <code>s2</code> 中元素就是先进先出顺序了</strong>。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%A0%88%E9%98%9F%E5%88%97/4.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 返回队头元素 */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">peek</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (s2.isEmpty())<br>        <span class="hljs-comment">// 把 s1 元素压入 s2</span><br>        <span class="hljs-keyword">while</span> (!s1.isEmpty())<br>            s2.push(s1.pop());<br>    <span class="hljs-keyword">return</span> s2.peek();<br>&#125;<br></code></pre></td></tr></table></figure><p>同理，对于 <code>pop</code> 操作，只要操作 <code>s2</code> 就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 删除队头的元素并返回 */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 先调用 peek 保证 s2 非空</span><br>    peek();<br>    <span class="hljs-keyword">return</span> s2.pop();<br>&#125;<br></code></pre></td></tr></table></figure><p>最后，如何判断队列是否为空呢？如果两个栈都为空的话，就说明队列为空：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 判断队列是否为空 */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> s1.isEmpty() &amp;&amp; s2.isEmpty();<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，就用栈结构实现了一个队列，核心思想是利用两个栈互相配合。<br>值得一提的是，这几个操作的时间复杂度是多少呢？有点意思的是 <code>peek</code> 操作，调用它时可能触发 <code>while</code> 循环，这样的话时间复杂度是 O(N)，但是大部分情况下 <code>while</code> 循环不会被触发，时间复杂度是 O(1)。由于 <code>pop</code> 操作调用了 <code>peek</code>，它的时间复杂度和 <code>peek</code> 相同。<br>像这种情况，可以说它们的<strong>最坏时间复杂度</strong>是 O(N)，因为包含 <code>while</code> 循环，<strong>可能</strong>需要从 <code>s1</code> 往 <code>s2</code> 搬移元素。<br>但是它们的<strong>均摊时间复杂度</strong>是 O(1)，这个要这么理解：对于一个元素，最多只可能被搬运一次，也就是说 <code>peek</code> 操作平均到每个元素的时间复杂度是 O(1)。</p><h3 id="二、用队列实现栈"><a href="#二、用队列实现栈" class="headerlink" title="二、用队列实现栈"></a>二、用队列实现栈</h3><p>如果说双栈实现队列比较巧妙，那么用队列实现栈就比较简单粗暴了，只需要一个队列作为底层数据结构。首先看下栈的 API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStack</span> </span>&#123;<br>    <br>    <span class="hljs-comment">/** 添加元素到栈顶 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>;<br>    <br>    <span class="hljs-comment">/** 删除栈顶的元素并返回 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>;<br>    <br>    <span class="hljs-comment">/** 返回栈顶元素 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span></span>;<br>    <br>    <span class="hljs-comment">/** 判断栈是否为空 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>先说 <code>push</code> API，直接将元素加入队列，同时记录队尾元素，因为队尾元素相当于栈顶元素，如果要 <code>top</code> 查看栈顶元素的话可以直接返回：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStack</span> </span>&#123;<br>    Queue&lt;Integer&gt; q = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    <span class="hljs-keyword">int</span> top_elem = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">/** 添加元素到栈顶 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-comment">// x 是队列的队尾，是栈的栈顶</span><br>        q.offer(x);<br>        top_elem = x;<br>    &#125;<br>    <br>    <span class="hljs-comment">/** 返回栈顶元素 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> top_elem;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们的底层数据结构是先进先出的队列，每次 <code>pop</code> 只能从队头取元素；但是栈是后进先出，也就是说 <code>pop</code> API 要从队尾取元素。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%A0%88%E9%98%9F%E5%88%97/5.jpg"><br>解决方法简单粗暴，把队列前面的都取出来再加入队尾，让之前的队尾元素排到队头，这样就可以取出了：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%A0%88%E9%98%9F%E5%88%97/6.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 删除栈顶的元素并返回 */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> size = q.size();<br>    <span class="hljs-keyword">while</span> (size &gt; <span class="hljs-number">1</span>) &#123;<br>        q.offer(q.poll());<br>        size--;<br>    &#125;<br>    <span class="hljs-comment">// 之前的队尾元素已经到了队头</span><br>    <span class="hljs-keyword">return</span> q.poll();<br>&#125;<br></code></pre></td></tr></table></figure><p>这样实现还有一点小问题就是，原来的队尾元素被提到队头并删除了，但是 <code>top_elem</code> 变量没有更新，我们还需要一点小修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 删除栈顶的元素并返回 */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> size = q.size();<br>    <span class="hljs-comment">// 留下队尾 2 个元素</span><br>    <span class="hljs-keyword">while</span> (size &gt; <span class="hljs-number">2</span>) &#123;<br>        q.offer(q.poll());<br>        size--;<br>    &#125;<br>    <span class="hljs-comment">// 记录新的队尾元素</span><br>    top_elem = q.peek();<br>    q.offer(q.poll());<br>    <span class="hljs-comment">// 删除之前的队尾元素</span><br>    <span class="hljs-keyword">return</span> q.poll();<br>&#125;<br></code></pre></td></tr></table></figure><p>最后，API <code>empty</code> 就很容易实现了，只要看底层的队列是否为空即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 判断栈是否为空 */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> q.isEmpty();<br>&#125;<br></code></pre></td></tr></table></figure><p>很明显，用队列实现栈的话，<code>pop</code> 操作时间复杂度是 O(N)，其他操作都是 O(1)​。​<br>个人认为，用队列实现栈是没啥亮点的问题，但是<strong>用双栈实现队列是值得学习的</strong>。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%A0%88%E9%98%9F%E5%88%97/4.jpg"><br>从栈 <code>s1</code> 搬运元素到 <code>s2</code> 之后，元素在 <code>s2</code> 中就变成了队列的先进先出顺序，这个特性有点类似「负负得正」，确实不太容易想到。<br>希望本文对你有帮助。</p><p><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E9%80%92%E5%BD%92%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86">上一篇：递归反转链表的一部分</a><br><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF">下一篇：算法学习之路</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FloodFill算法详解及应用</title>
      <link href="2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/FloodFill%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
      <url>2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/FloodFill%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="FloodFill算法详解及应用"><a href="#FloodFill算法详解及应用" class="headerlink" title="FloodFill算法详解及应用"></a>FloodFill算法详解及应用</h1><p>啥是 FloodFill 算法呢，最直接的一个应用就是「颜色填充」，就是 Windows 绘画本中那个小油漆桶的标志，可以把一块被圈起来的区域全部染色。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/floodfill/floodfill.gif" alt="floodfill"><br>这种算法思想还在许多其他地方有应用。比如说扫雷游戏，有时候你点一个方格，会一下子展开一片区域，这个展开过程，就是 FloodFill 算法实现的。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/floodfill/%E6%89%AB%E9%9B%B7.png" alt="扫雷"><br>类似的，像消消乐这类游戏，相同方块积累到一定数量，就全部消除，也是 FloodFill 算法的功劳。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/floodfill/xiaoxiaole.jpg" alt="xiaoxiaole"><br>通过以上的几个例子，你应该对 FloodFill 算法有个概念了，现在我们要抽象问题，提取共同点。</p><h3 id="一、构建框架"><a href="#一、构建框架" class="headerlink" title="一、构建框架"></a>一、构建框架</h3><p>以上几个例子，都可以抽象成一个二维矩阵（图片其实就是像素点矩阵），然后从某个点开始向四周扩展，直到无法再扩展为止。<br>矩阵，可以抽象为一幅「图」，这就是一个图的遍历问题，也就类似一个 N 叉树遍历的问题。几行代码就能解决，直接上框架吧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// (x, y) 为坐标位置</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fill</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>    fill(x - <span class="hljs-number">1</span>, y); <span class="hljs-comment">// 上</span><br>    fill(x + <span class="hljs-number">1</span>, y); <span class="hljs-comment">// 下</span><br>    fill(x, y - <span class="hljs-number">1</span>); <span class="hljs-comment">// 左</span><br>    fill(x, y + <span class="hljs-number">1</span>); <span class="hljs-comment">// 右</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这个框架可以解决所有在二维矩阵中遍历的问题，说得高端一点，这就叫深度优先搜索（Depth First Search，简称 DFS），说得简单一点，这就叫四叉树遍历框架。坐标 (x, y) 就是 root，四个方向就是 root 的四个子节点。<br>下面看一道 LeetCode 题目，其实就是让我们来实现一个「颜色填充」功能。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/floodfill/leetcode.png" alt="title"><br>根据上篇文章，我们讲了「树」算法设计的一个总路线，今天就可以用到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[][] floodFill(<span class="hljs-keyword">int</span>[][] image,<br>        <span class="hljs-keyword">int</span> sr, <span class="hljs-keyword">int</span> sc, <span class="hljs-keyword">int</span> newColor) &#123;<br>    <span class="hljs-keyword">int</span> origColor = image[sr][sc];<br>    fill(image, sr, sc, origColor, newColor);<br>    <span class="hljs-keyword">return</span> image;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fill</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] image, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y,</span></span><br><span class="hljs-function"><span class="hljs-params">        <span class="hljs-keyword">int</span> origColor, <span class="hljs-keyword">int</span> newColor)</span> </span>&#123;<br>    <span class="hljs-comment">// 出界：超出边界索引</span><br>    <span class="hljs-keyword">if</span> (!inArea(image, x, y)) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 碰壁：遇到其他颜色，超出 origColor 区域</span><br>    <span class="hljs-keyword">if</span> (image[x][y] != origColor) <span class="hljs-keyword">return</span>;<br>    image[x][y] = newColor;<br>    <br>    fill(image, x, y + <span class="hljs-number">1</span>, origColor, newColor);<br>    fill(image, x, y - <span class="hljs-number">1</span>, origColor, newColor);<br>    fill(image, x - <span class="hljs-number">1</span>, y, origColor, newColor);<br>    fill(image, x + <span class="hljs-number">1</span>, y, origColor, newColor);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">inArea</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] image, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; image.length<br>        &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; y &lt; image[<span class="hljs-number">0</span>].length;<br>&#125;<br></code></pre></td></tr></table></figure><p>只要你能够理解这段代码，一定要给你鼓掌，给你 99 分，因为你对「框架思维」的掌控已经炉火纯青，此算法已经 cover 了 99% 的情况，仅有一个细节问题没有解决，就是当 origColor 和 newColor 相同时，会陷入无限递归。</p><h3 id="二、研究细节"><a href="#二、研究细节" class="headerlink" title="二、研究细节"></a>二、研究细节</h3><p>为什么会陷入无限递归呢，很好理解，因为每个坐标都要搜索上下左右，那么对于一个坐标，一定会被上下左右的坐标搜索。<strong>被重复搜索时，必须保证递归函数能够能正确地退出，否则就会陷入死循环。</strong><br>为什么 newColor 和 origColor 不同时可以正常退出呢？把算法流程画个图理解一下：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/floodfill/ppt1.PNG" alt="ppt1"><br>可以看到，fill(1, 1) 被重复搜索了，我们用 fill(1, 1)* 表示这次重复搜索。fill(1, 1)* 执行时，(1, 1) 已经被换成了 newColor，所以 fill(1, 1)* 会在这个 if 语句被怼回去，正确退出了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 碰壁：遇到其他颜色，超出 origColor 区域</span><br><span class="hljs-keyword">if</span> (image[x][y] != origColor) <span class="hljs-keyword">return</span>;<br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/floodfill/ppt2.PNG" alt="ppt2"><br>但是，如果说 origColor 和 newColor 一样，这个 if 语句就无法让 fill(1, 1)* 正确退出，而是开启了下面的重复递归，形成了死循环。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/floodfill/ppt3.PNG" alt="ppt3"></p><h3 id="三、处理细节"><a href="#三、处理细节" class="headerlink" title="三、处理细节"></a>三、处理细节</h3><p>如何避免上述问题的发生，最容易想到的就是用一个和 image 一样大小的二维 bool 数组记录走过的地方，一旦发现重复立即 return。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">// 出界：超出边界索引</span><br><span class="hljs-keyword">if</span> (!inArea(image, x, y)) <span class="hljs-keyword">return</span>;<br><span class="hljs-comment">// 碰壁：遇到其他颜色，超出 origColor 区域</span><br><span class="hljs-keyword">if</span> (image[x][y] != origColor) <span class="hljs-keyword">return</span>;<br><span class="hljs-comment">// 不走回头路</span><br><span class="hljs-keyword">if</span> (visited[x][y]) <span class="hljs-keyword">return</span>;<br>visited[x][y] = <span class="hljs-keyword">true</span>;<br>image[x][y] = newColor;<br></code></pre></td></tr></table></figure><p>完全 OK，这也是处理「图」的一种常用手段。不过对于此题，不用开数组，我们有一种更好的方法，那就是回溯算法。<br>前文「回溯算法详解」讲过，这里不再赘述，直接套回溯算法框架：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fill</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] image, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y,</span></span><br><span class="hljs-function"><span class="hljs-params">        <span class="hljs-keyword">int</span> origColor, <span class="hljs-keyword">int</span> newColor)</span> </span>&#123;<br>    <span class="hljs-comment">// 出界：超出数组边界</span><br>    <span class="hljs-keyword">if</span> (!inArea(image, x, y)) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 碰壁：遇到其他颜色，超出 origColor 区域</span><br>    <span class="hljs-keyword">if</span> (image[x][y] != origColor) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 已探索过的 origColor 区域</span><br>    <span class="hljs-keyword">if</span> (image[x][y] == -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>;<br>    <br>    <span class="hljs-comment">// choose：打标记，以免重复</span><br>    image[x][y] = -<span class="hljs-number">1</span>;<br>    fill(image, x, y + <span class="hljs-number">1</span>, origColor, newColor);<br>    fill(image, x, y - <span class="hljs-number">1</span>, origColor, newColor);<br>    fill(image, x - <span class="hljs-number">1</span>, y, origColor, newColor);<br>    fill(image, x + <span class="hljs-number">1</span>, y, origColor, newColor);<br>    <span class="hljs-comment">// unchoose：将标记替换为 newColor</span><br>    image[x][y] = newColor;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种解决方法是最常用的，相当于使用一个特殊值 -1 代替 visited 数组的作用，达到不走回头路的效果。为什么是 -1，因为题目中说了颜色取值在 0 - 65535 之间，所以 -1 足够特殊，能和颜色区分开。</p><h3 id="四、拓展延伸：自动魔棒工具和扫雷"><a href="#四、拓展延伸：自动魔棒工具和扫雷" class="headerlink" title="四、拓展延伸：自动魔棒工具和扫雷"></a>四、拓展延伸：自动魔棒工具和扫雷</h3><p>大部分图片编辑软件一定有「自动魔棒工具」这个功能：点击一个地方，帮你自动选中相近颜色的部分。如下图，我想选中老鹰，可以先用自动魔棒选中蓝天背景，然后反向选择，就选中了老鹰。我们来分析一下自动魔棒工具的原理。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/floodfill/%E6%8A%A0%E5%9B%BE.jpg" alt="抠图"><br>显然，这个算法肯定是基于 FloodFill 算法的，但有两点不同：首先，背景色是蓝色，但不能保证都是相同的蓝色，毕竟是像素点，可能存在肉眼无法分辨的深浅差异，而我们希望能够忽略这种细微差异。第二，FloodFill 算法是「区域填充」，这里更像「边界填充」。<br>对于第一个问题，很好解决，可以设置一个阈值 threshold，在阈值范围内波动的颜色都视为 origColor：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (Math.abs(image[x][y] - origColor) &gt; threshold)<br>    <span class="hljs-keyword">return</span>;<br></code></pre></td></tr></table></figure><p>对于第二个问题，我们首先明确问题：不要把区域内所有 origColor 的都染色，而是只给区域最外圈染色。然后，我们分析，如何才能仅给外围染色，即如何才能找到最外围坐标，最外围坐标有什么特点？<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/floodfill/ppt4.PNG" alt="ppt4"><br>可以发现，区域边界上的坐标，至少有一个方向不是 origColor，而区域内部的坐标，四面都是 origColor，这就是解决问题的关键。保持框架不变，使用 visited 数组记录已搜索坐标，主要代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fill</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] image, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y,</span></span><br><span class="hljs-function"><span class="hljs-params">    <span class="hljs-keyword">int</span> origColor, <span class="hljs-keyword">int</span> newColor)</span> </span>&#123;<br>    <span class="hljs-comment">// 出界：超出数组边界</span><br>    <span class="hljs-keyword">if</span> (!inArea(image, x, y)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 已探索过的 origColor 区域</span><br>    <span class="hljs-keyword">if</span> (visited[x][y]) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 碰壁：遇到其他颜色，超出 origColor 区域</span><br>    <span class="hljs-keyword">if</span> (image[x][y] != origColor) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    visited[x][y] = <span class="hljs-keyword">true</span>;<br>    <br>    <span class="hljs-keyword">int</span> surround = <br>          fill(image, x - <span class="hljs-number">1</span>, y, origColor, newColor)<br>        + fill(image, x + <span class="hljs-number">1</span>, y, origColor, newColor)<br>        + fill(image, x, y - <span class="hljs-number">1</span>, origColor, newColor)<br>        + fill(image, x, y + <span class="hljs-number">1</span>, origColor, newColor);<br>    <br>    <span class="hljs-keyword">if</span> (surround &lt; <span class="hljs-number">4</span>)<br>        image[x][y] = newColor;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，区域内部的坐标探索四周后得到的 surround 是 4，而边界的坐标会遇到其他颜色，或超出边界索引，surround 会小于 4。如果你对这句话不理解，我们把逻辑框架抽象出来看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fill</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] image, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y,</span></span><br><span class="hljs-function"><span class="hljs-params">    <span class="hljs-keyword">int</span> origColor, <span class="hljs-keyword">int</span> newColor)</span> </span>&#123;<br>    <span class="hljs-comment">// 出界：超出数组边界</span><br>    <span class="hljs-keyword">if</span> (!inArea(image, x, y)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 已探索过的 origColor 区域</span><br>    <span class="hljs-keyword">if</span> (visited[x][y]) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 碰壁：遇到其他颜色，超出 origColor 区域</span><br>    <span class="hljs-keyword">if</span> (image[x][y] != origColor) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 未探索且属于 origColor 区域</span><br>    <span class="hljs-keyword">if</span> (image[x][y] == origColor) &#123;<br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这 4 个 if 判断涵盖了 (x, y) 的所有可能情况，surround 的值由四个递归函数相加得到，而每个递归函数的返回值就这四种情况的一种。借助这个逻辑框架，你一定能理解上面那句话了。<br>这样就实现了仅对 origColor 区域边界坐标染色的目的，等同于完成了魔棒工具选定区域边界的功能。<br>这个算法有两个细节问题，一是必须借助 visited 来记录已探索的坐标，而无法使用回溯算法；二是开头几个 if 顺序不可打乱。读者可以思考一下原因。<br>同理，思考扫雷游戏，应用 FloodFill 算法展开空白区域的同时，也需要计算并显示边界上雷的个数，如何实现的？其实也是相同的思路，遇到雷就返回 true，这样 surround 变量存储的就是雷的个数。当然，扫雷的 FloodFill 算法不能只检查上下左右，还得加上四个斜向。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/floodfill/ppt5.PNG"><br>以上详细讲解了 FloodFill 算法的框架设计，<strong>二维矩阵中的搜索问题，都逃不出这个算法框架</strong>。</p><p><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%98%E6%B3%95">上一篇：字符串乘法</a><br><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%8C%BA%E9%97%B4%E8%B0%83%E5%BA%A6%E9%97%AE%E9%A2%98%E4%B9%8B%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6">下一篇：区间调度之区间合并问题</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnionFind算法应用</title>
      <link href="2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/UnionFind%E7%AE%97%E6%B3%95%E5%BA%94%E7%94%A8/"/>
      <url>2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/UnionFind%E7%AE%97%E6%B3%95%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Union-Find算法应用"><a href="#Union-Find算法应用" class="headerlink" title="Union-Find算法应用"></a>Union-Find算法应用</h1><p>上篇文章很多读者对于 Union-Find 算法的应用表示很感兴趣，这篇文章就拿几道 LeetCode 题目来讲讲这个算法的巧妙用法。<br>首先，复习一下，Union-Find 算法解决的是图的动态连通性问题，这个算法本身不难，能不能应用出来主要是看你抽象问题的能力，是否能够把原始问题抽象成一个有关图论的问题。<br>先复习一下上篇文章写的算法代码，回答读者提出的几个问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UF</span> </span>&#123;<br>    <span class="hljs-comment">// 记录连通分量个数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> count;<br>    <span class="hljs-comment">// 存储若干棵树</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] parent;<br>    <span class="hljs-comment">// 记录树的“重量”</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] size;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UF</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.count = n;<br>        parent = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        size = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            parent[i] = i;<br>            size[i] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">/* 将 p 和 q 连通 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">union</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> q)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> rootP = find(p);<br>        <span class="hljs-keyword">int</span> rootQ = find(q);<br>        <span class="hljs-keyword">if</span> (rootP == rootQ)<br>            <span class="hljs-keyword">return</span>;<br>        <br>        <span class="hljs-comment">// 小树接到大树下面，较平衡</span><br>        <span class="hljs-keyword">if</span> (size[rootP] &gt; size[rootQ]) &#123;<br>            parent[rootQ] = rootP;<br>            size[rootP] += size[rootQ];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            parent[rootP] = rootQ;<br>            size[rootQ] += size[rootP];<br>        &#125;<br>        count--;<br>    &#125;<br>    <span class="hljs-comment">/* 判断 p 和 q 是否互相连通 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">connected</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> q)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> rootP = find(p);<br>        <span class="hljs-keyword">int</span> rootQ = find(q);<br>        <span class="hljs-comment">// 处于同一棵树上的节点，相互连通</span><br>        <span class="hljs-keyword">return</span> rootP == rootQ;<br>    &#125;<br>    <span class="hljs-comment">/* 返回节点 x 的根节点 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (parent[x] != x) &#123;<br>            <span class="hljs-comment">// 进行路径压缩</span><br>            parent[x] = parent[parent[x]];<br>            x = parent[x];<br>        &#125;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">count</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>算法的关键点有 3 个：<br>1、用 <code>parent</code> 数组记录每个节点的父节点，相当于指向父节点的指针，所以 <code>parent</code> 数组内实际存储着一个森林（若干棵多叉树）。<br>2、用 <code>size</code> 数组记录着每棵树的重量，目的是让 <code>union</code> 后树依然拥有平衡性，而不会退化成链表，影响操作效率。<br>3、在 <code>find</code> 函数中进行路径压缩，保证任意树的高度保持在常数，使得 <code>union</code> 和 <code>connected</code> API 时间复杂度为 O(1)。<br>有的读者问，<strong>既然有了路径压缩，<code>size</code> 数组的重量平衡还需要吗</strong>？这个问题很有意思，因为路径压缩保证了树高为常数（不超过 3），那么树就算不平衡，高度也是常数，基本没什么影响。<br>我认为，论时间复杂度的话，确实，不需要重量平衡也是 O(1)。但是如果加上 <code>size</code> 数组辅助，效率还是略微高一些，比如下面这种情况：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/unionfind%E5%BA%94%E7%94%A8/1.jpg"><br>如果带有重量平衡优化，一定会得到情况一，而不带重量优化，可能出现情况二。高度为 3 时才会触发路径压缩那个 <code>while</code> 循环，所以情况一根本不会触发路径压缩，而情况二会多执行很多次路径压缩，将第三层节点压缩到第二层。<br>也就是说，去掉重量平衡，虽然对于单个的 <code>find</code> 函数调用，时间复杂度依然是 O(1)，但是对于 API 调用的整个过程，效率会有一定的下降。当然，好处就是减少了一些空间，不过对于 Big O 表示法来说，时空复杂度都没变。<br>下面言归正传，来看看这个算法有什么实际应用。</p><h3 id="一、DFS-的替代方案"><a href="#一、DFS-的替代方案" class="headerlink" title="一、DFS 的替代方案"></a>一、DFS 的替代方案</h3><p>很多使用 DFS 深度优先算法解决的问题，也可以用 Union-Find 算法解决。<br>比如第 130 题，被围绕的区域：给你一个 M×N 的二维矩阵，其中包含字符 <code>X</code> 和 <code>O</code>，让你找到矩阵中<strong>四面</strong>被 <code>X</code> 围住的 <code>O</code>，并且把它们替换成 <code>X</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board)</span></span>;<br></code></pre></td></tr></table></figure><p>注意哦，必须是四面被围的 <code>O</code> 才能被换成 <code>X</code>，也就是说边角上的 <code>O</code> 一定不会被围，进一步，与边角上的 <code>O</code> 相连的 <code>O</code> 也不会被 <code>X</code> 围四面，也不会被替换。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/unionfind%E5%BA%94%E7%94%A8/2.jpg"><br>PS：这让我想起小时候玩的棋类游戏「黑白棋」，只要你用两个棋子把对方的棋子夹在中间，对方的子就被替换成你的子。可见，占据四角的棋子是无敌的，与其相连的边棋子也是无敌的（无法被夹掉）。<br>解决这个问题的传统方法也不困难，先用 for 循环遍历棋盘的<strong>四边</strong>，用 DFS 算法把那些与边界相连的 <code>O</code> 换成一个特殊字符，比如 <code>#</code>；然后再遍历整个棋盘，把剩下的 <code>O</code> 换成 <code>X</code>，把 <code>#</code> 恢复成 <code>O</code>。这样就能完成题目的要求，时间复杂度 O(MN)。<br>这个问题也可以用 Union-Find 算法解决，虽然实现复杂一些，甚至效率也略低，但这是使用 Union-Find 算法的通用思想，值得一学。<br><strong>你可以把那些不需要被替换的 <code>O</code> 看成一个拥有独门绝技的门派，它们有一个共同祖师爷叫 <code>dummy</code>，这些 <code>O</code> 和 <code>dummy</code> 互相连通，而那些需要被替换的 <code>O</code> 与 <code>dummy</code> 不连通</strong>。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/unionfind%E5%BA%94%E7%94%A8/3.jpg"><br>这就是 Union-Find 的核心思路，明白这个图，就很容易看懂代码了。<br>首先要解决的是，根据我们的实现，Union-Find 底层用的是一维数组，构造函数需要传入这个数组的大小，而题目给的是一个二维棋盘。<br>这个很简单，二维坐标 <code>(x,y)</code> 可以转换成 <code>x * n + y</code> 这个数（<code>m</code> 是棋盘的行数，<code>n</code> 是棋盘的列数）。敲黑板，<strong>这是将二维坐标映射到一维的常用技巧</strong>。<br>其次，我们之前描述的「祖师爷」是虚构的，需要给他老人家留个位置。索引 <code>[0.. m*n-1]</code> 都是棋盘内坐标的一维映射，那就让这个虚拟的 <code>dummy</code> 节点占据索引 <code>m * n</code> 好了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (board.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> m = board.length;<br>    <span class="hljs-keyword">int</span> n = board[<span class="hljs-number">0</span>].length;<br>    <span class="hljs-comment">// 给 dummy 留一个额外位置</span><br>    UF uf = <span class="hljs-keyword">new</span> UF(m * n + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> dummy = m * n;<br>    <span class="hljs-comment">// 将首列和末列的 O 与 dummy 连通</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-keyword">if</span> (board[i][<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;O&#x27;</span>)<br>            uf.union(i * n, dummy);<br>        <span class="hljs-keyword">if</span> (board[i][n - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;O&#x27;</span>)<br>            uf.union(i * n + n - <span class="hljs-number">1</span>, dummy);<br>    &#125;<br>    <span class="hljs-comment">// 将首行和末行的 O 与 dummy 连通</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>        <span class="hljs-keyword">if</span> (board[<span class="hljs-number">0</span>][j] == <span class="hljs-string">&#x27;O&#x27;</span>)<br>            uf.union(j, dummy);<br>        <span class="hljs-keyword">if</span> (board[m - <span class="hljs-number">1</span>][j] == <span class="hljs-string">&#x27;O&#x27;</span>)<br>            uf.union(n * (m - <span class="hljs-number">1</span>) + j, dummy);<br>    &#125;<br>    <span class="hljs-comment">// 方向数组 d 是上下左右搜索的常用手法</span><br>    <span class="hljs-keyword">int</span>[][] d = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>&#125;, &#123;-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; m - <span class="hljs-number">1</span>; i++) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; n - <span class="hljs-number">1</span>; j++) <br>            <span class="hljs-keyword">if</span> (board[i][j] == <span class="hljs-string">&#x27;O&#x27;</span>)<br>                <span class="hljs-comment">// 将此 O 与上下左右的 O 连通</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++) &#123;<br>                    <span class="hljs-keyword">int</span> x = i + d[k][<span class="hljs-number">0</span>];<br>                    <span class="hljs-keyword">int</span> y = j + d[k][<span class="hljs-number">1</span>];<br>                    <span class="hljs-keyword">if</span> (board[x][y] == <span class="hljs-string">&#x27;O&#x27;</span>)<br>                        uf.union(x * n + y, i * n + j);<br>                &#125;<br>    <span class="hljs-comment">// 所有不和 dummy 连通的 O，都要被替换</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; m - <span class="hljs-number">1</span>; i++) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; n - <span class="hljs-number">1</span>; j++) <br>            <span class="hljs-keyword">if</span> (!uf.connected(dummy, i * n + j))<br>                board[i][j] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码很长，其实就是刚才的思路实现，只有和边界 <code>O</code> 相连的 <code>O</code> 才具有和 <code>dummy</code> 的连通性，他们不会被替换。<br>说实话，Union-Find 算法解决这个简单的问题有点杀鸡用牛刀，它可以解决更复杂，更具有技巧性的问题，<strong>主要思路是适时增加虚拟节点，想办法让元素「分门别类」，建立动态连通关系</strong>。</p><h3 id="二、判定合法等式"><a href="#二、判定合法等式" class="headerlink" title="二、判定合法等式"></a>二、判定合法等式</h3><p>这个问题用 Union-Find 算法就显得十分优美了。题目是这样：<br>给你一个数组 <code>equations</code>，装着若干字符串表示的算式。每个算式 <code>equations[i]</code> 长度都是 4，而且只有这两种情况：<code>a==b</code> 或者 <code>a!=b</code>，其中 <code>a,b</code> 可以是任意小写字母。你写一个算法，如果 <code>equations</code> 中所有算式都不会互相冲突，返回 true，否则返回 false。<br>比如说，输入 <code>[&quot;a==b&quot;,&quot;b!=c&quot;,&quot;c==a&quot;]</code>，算法返回 false，因为这三个算式不可能同时正确。<br>再比如，输入 <code>[&quot;c==c&quot;,&quot;b==d&quot;,&quot;x!=z&quot;]</code>，算法返回 true，因为这三个算式并不会造成逻辑冲突。<br>我们前文说过，动态连通性其实就是一种等价关系，具有「自反性」「传递性」和「对称性」，其实 <code>==</code> 关系也是一种等价关系，具有这些性质。所以这个问题用 Union-Find 算法就很自然。<br>核心思想是，<strong>将 <code>equations</code> 中的算式根据 <code>==</code> 和 <code>!=</code> 分成两部分，先处理 <code>==</code> 算式，使得他们通过相等关系各自勾结成门派；然后处理 <code>!=</code> 算式，检查不等关系是否破坏了相等关系的连通性</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">equationsPossible</span><span class="hljs-params">(String[] equations)</span> </span>&#123;<br>    <span class="hljs-comment">// 26 个英文字母</span><br>    UF uf = <span class="hljs-keyword">new</span> UF(<span class="hljs-number">26</span>);<br>    <span class="hljs-comment">// 先让相等的字母形成连通分量</span><br>    <span class="hljs-keyword">for</span> (String eq : equations) &#123;<br>        <span class="hljs-keyword">if</span> (eq.charAt(<span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;=&#x27;</span>) &#123;<br>            <span class="hljs-keyword">char</span> x = eq.charAt(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">char</span> y = eq.charAt(<span class="hljs-number">3</span>);<br>            uf.union(x - <span class="hljs-string">&#x27;a&#x27;</span>, y - <span class="hljs-string">&#x27;a&#x27;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 检查不等关系是否打破相等关系的连通性</span><br>    <span class="hljs-keyword">for</span> (String eq : equations) &#123;<br>        <span class="hljs-keyword">if</span> (eq.charAt(<span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;!&#x27;</span>) &#123;<br>            <span class="hljs-keyword">char</span> x = eq.charAt(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">char</span> y = eq.charAt(<span class="hljs-number">3</span>);<br>            <span class="hljs-comment">// 如果相等关系成立，就是逻辑冲突</span><br>            <span class="hljs-keyword">if</span> (uf.connected(x - <span class="hljs-string">&#x27;a&#x27;</span>, y - <span class="hljs-string">&#x27;a&#x27;</span>))<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，这道判断算式合法性的问题就解决了，借助 Union-Find 算法，是不是很简单呢？</p><h3 id="三、简单总结"><a href="#三、简单总结" class="headerlink" title="三、简单总结"></a>三、简单总结</h3><p>使用 Union-Find 算法，主要是如何把原问题转化成图的动态连通性问题。对于算式合法性问题，可以直接利用等价关系，对于棋盘包围问题，则是利用一个虚拟节点，营造出动态连通特性。<br>另外，将二维数组映射到一维数组，利用方向数组 <code>d</code> 来简化代码量，都是在写算法时常用的一些小技巧，如果没见过可以注意一下。<br>很多更复杂的 DFS 算法问题，都可以利用 Union-Find 算法更漂亮的解决。LeetCode 上 Union-Find 相关的问题也就二十多道，有兴趣的读者可以去做一做。</p><p><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/UnionFind%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3">上一篇：Union-Find算法详解</a><br><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E8%A7%A3%E5%86%B3%E7%9A%84%E6%99%BA%E5%8A%9B%E9%A2%98">下一篇：一行代码就能解决的算法题</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnionFind算法详解</title>
      <link href="2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/UnionFind%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
      <url>2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/UnionFind%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Union-Find算法详解"><a href="#Union-Find算法详解" class="headerlink" title="Union-Find算法详解"></a>Union-Find算法详解</h1><p>今天讲讲 Union-Find 算法，也就是常说的并查集算法，主要是解决图论中「动态连通性」问题的。名词很高端，其实特别好理解，等会解释，另外这个算法的应用都非常有趣。<br>说起这个 Union-Find，应该算是我的「启蒙算法」了，因为《算法4》的开头就介绍了这款算法，可是把我秀翻了，感觉好精妙啊！后来刷了 LeetCode，并查集相关的算法题目都非常有意思，而且《算法4》给的解法竟然还可以进一步优化，只要加一个微小的修改就可以把时间复杂度降到 O(1)。<br>废话不多说，直接上干货，先解释一下什么叫动态连通性吧。</p><h3 id="一、问题介绍"><a href="#一、问题介绍" class="headerlink" title="一、问题介绍"></a>一、问题介绍</h3><p>简单说，动态连通性其实可以抽象成给一幅图连线。比如下面这幅图，总共有 10 个节点，他们互不相连，分别用 0~9 标记：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/unionfind/1.jpg"><br>现在我们的 Union-Find 算法主要需要实现这两个 API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UF</span> </span>&#123;<br>    <span class="hljs-comment">/* 将 p 和 q 连接 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">union</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> q)</span></span>;<br>    <span class="hljs-comment">/* 判断 p 和 q 是否连通 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">connected</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> q)</span></span>;<br>    <span class="hljs-comment">/* 返回图中有多少个连通分量 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">count</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里所说的「连通」是一种等价关系，也就是说具有如下三个性质：<br>1、自反性：节点<code>p</code>和<code>p</code>是连通的。<br>2、对称性：如果节点<code>p</code>和<code>q</code>连通，那么<code>q</code>和<code>p</code>也连通。<br>3、传递性：如果节点<code>p</code>和<code>q</code>连通，<code>q</code>和<code>r</code>连通，那么<code>p</code>和<code>r</code>也连通。<br>比如说之前那幅图，0～9 任意两个<strong>不同</strong>的点都不连通，调用<code>connected</code>都会返回 false，连通分量为 10 个。<br>如果现在调用<code>union(0, 1)</code>，那么 0 和 1 被连通，连通分量降为 9 个。<br>再调用<code>union(1, 2)</code>，这时 0,1,2 都被连通，调用<code>connected(0, 2)</code>也会返回 true，连通分量变为 8 个。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/unionfind/2.jpg"><br>判断这种「等价关系」非常实用，比如说编译器判断同一个变量的不同引用，比如社交网络中的朋友圈计算等等。<br>这样，你应该大概明白什么是动态连通性了，Union-Find 算法的关键就在于<code>union</code>和<code>connected</code>函数的效率。那么用什么模型来表示这幅图的连通状态呢？用什么数据结构来实现代码呢？</p><h3 id="二、基本思路"><a href="#二、基本思路" class="headerlink" title="二、基本思路"></a>二、基本思路</h3><p>注意我刚才把「模型」和具体的「数据结构」分开说，这么做是有原因的。因为我们使用森林（若干棵树）来表示图的动态连通性，用数组来具体实现这个森林。<br>怎么用森林来表示连通性呢？我们设定树的每个节点有一个指针指向其父节点，如果是根节点的话，这个指针指向自己。比如说刚才那幅 10 个节点的图，一开始的时候没有相互连通，就是这样：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/unionfind/3.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UF</span> </span>&#123;<br>    <span class="hljs-comment">// 记录连通分量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> count;<br>    <span class="hljs-comment">// 节点 x 的节点是 parent[x]</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] parent;<br>    <span class="hljs-comment">/* 构造函数，n 为图的节点总数 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UF</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-comment">// 一开始互不连通</span><br>        <span class="hljs-keyword">this</span>.count = n;<br>        <span class="hljs-comment">// 父节点指针初始指向自己</span><br>        parent = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>            parent[i] = i;<br>    &#125;<br>    <span class="hljs-comment">/* 其他函数 */</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>如果某两个节点被连通，则让其中的（任意）一个节点的根节点接到另一个节点的根节点上</strong>：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/unionfind/4.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">union</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> q)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> rootP = find(p);<br>    <span class="hljs-keyword">int</span> rootQ = find(q);<br>    <span class="hljs-keyword">if</span> (rootP == rootQ)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 将两棵树合并为一棵</span><br>    parent[rootP] = rootQ;<br>    <span class="hljs-comment">// parent[rootQ] = rootP 也一样</span><br>    count--; <span class="hljs-comment">// 两个分量合二为一</span><br>&#125;<br><span class="hljs-comment">/* 返回某个节点 x 的根节点 */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-comment">// 根节点的 parent[x] == x</span><br>    <span class="hljs-keyword">while</span> (parent[x] != x)<br>        x = parent[x];<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-comment">/* 返回当前的连通分量个数 */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">count</span><span class="hljs-params">()</span> </span>&#123; <br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>这样，如果节点<code>p</code>和<code>q</code>连通的话，它们一定拥有相同的根节点</strong>：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/unionfind/5.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">connected</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> q)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> rootP = find(p);<br>    <span class="hljs-keyword">int</span> rootQ = find(q);<br>    <span class="hljs-keyword">return</span> rootP == rootQ;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，Union-Find 算法就基本完成了。是不是很神奇？竟然可以这样使用数组来模拟出一个森林，如此巧妙的解决这个比较复杂的问题！<br>那么这个算法的复杂度是多少呢？我们发现，主要 API<code>connected</code>和<code>union</code>中的复杂度都是<code>find</code>函数造成的，所以说它们的复杂度和<code>find</code>一样。<br><code>find</code>主要功能就是从某个节点向上遍历到树根，其时间复杂度就是树的高度。我们可能习惯性地认为树的高度就是<code>logN</code>，但这并不一定。<code>logN</code>的高度只存在于平衡二叉树，对于一般的树可能出现极端不平衡的情况，使得「树」几乎退化成「链表」，树的高度最坏情况下可能变成<code>N</code>。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/unionfind/6.jpg"><br>所以说上面这种解法，<code>find</code>,<code>union</code>,<code>connected</code>的时间复杂度都是 O(N)。这个复杂度很不理想的，你想图论解决的都是诸如社交网络这样数据规模巨大的问题，对于<code>union</code>和<code>connected</code>的调用非常频繁，每次调用需要线性时间完全不可忍受。<br><strong>问题的关键在于，如何想办法避免树的不平衡呢</strong>？只需要略施小计即可。</p><h3 id="三、平衡性优化"><a href="#三、平衡性优化" class="headerlink" title="三、平衡性优化"></a>三、平衡性优化</h3><p>我们要知道哪种情况下可能出现不平衡现象，关键在于<code>union</code>过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">union</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> q)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> rootP = find(p);<br>    <span class="hljs-keyword">int</span> rootQ = find(q);<br>    <span class="hljs-keyword">if</span> (rootP == rootQ)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 将两棵树合并为一棵</span><br>    parent[rootP] = rootQ;<br>    <span class="hljs-comment">// parent[rootQ] = rootP 也可以</span><br>    count--; <br></code></pre></td></tr></table></figure><p>我们一开始就是简单粗暴的把<code>p</code>所在的树接到<code>q</code>所在的树的根节点下面，那么这里就可能出现「头重脚轻」的不平衡状况，比如下面这种局面：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/unionfind/7.jpg"><br>长此以往，树可能生长得很不平衡。<strong>我们其实是希望，小一些的树接到大一些的树下面，这样就能避免头重脚轻，更平衡一些</strong>。解决方法是额外使用一个<code>size</code>数组，记录每棵树包含的节点数，我们不妨称为「重量」：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UF</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> count;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] parent;<br>    <span class="hljs-comment">// 新增一个数组记录树的“重量”</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] size;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UF</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.count = n;<br>        parent = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        <span class="hljs-comment">// 最初每棵树只有一个节点</span><br>        <span class="hljs-comment">// 重量应该初始化 1</span><br>        size = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            parent[i] = i;<br>            size[i] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/* 其他函数 */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>比如说<code>size[3] = 5</code>表示，以节点<code>3</code>为根的那棵树，总共有<code>5</code>个节点。这样我们可以修改一下<code>union</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">union</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> q)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> rootP = find(p);<br>    <span class="hljs-keyword">int</span> rootQ = find(q);<br>    <span class="hljs-keyword">if</span> (rootP == rootQ)<br>        <span class="hljs-keyword">return</span>;<br>    <br>    <span class="hljs-comment">// 小树接到大树下面，较平衡</span><br>    <span class="hljs-keyword">if</span> (size[rootP] &gt; size[rootQ]) &#123;<br>        parent[rootQ] = rootP;<br>        size[rootP] += size[rootQ];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        parent[rootP] = rootQ;<br>        size[rootQ] += size[rootP];<br>    &#125;<br>    count--;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，通过比较树的重量，就可以保证树的生长相对平衡，树的高度大致在<code>logN</code>这个数量级，极大提升执行效率。<br>此时，<code>find</code>,<code>union</code>,<code>connected</code>的时间复杂度都下降为 O(logN)，即便数据规模上亿，所需时间也非常少。</p><h3 id="四、路径压缩"><a href="#四、路径压缩" class="headerlink" title="四、路径压缩"></a>四、路径压缩</h3><p>这步优化特别简单，所以非常巧妙。我们能不能进一步压缩每棵树的高度，使树高始终保持为常数？<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/unionfind/8.jpg"><br>这样<code>find</code>就能以 O(1) 的时间找到某一节点的根节点，相应的，<code>connected</code>和<code>union</code>复杂度都下降为 O(1)。<br>要做到这一点，非常简单，只需要在<code>find</code>中加一行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (parent[x] != x) &#123;<br>        <span class="hljs-comment">// 进行路径压缩</span><br>        parent[x] = parent[parent[x]];<br>        x = parent[x];<br>    &#125;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个操作有点匪夷所思，看个 GIF 就明白它的作用了（为清晰起见，这棵树比较极端）：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/unionfind/9.gif"><br>可见，调用<code>find</code>函数每次向树根遍历的同时，顺手将树高缩短了，最终所有树高都不会超过 3（<code>union</code>的时候树高可能达到 3）。<br>PS：读者可能会问，这个 GIF 图的find过程完成之后，树高恰好等于 3 了，但是如果更高的树，压缩后高度依然会大于 3 呀？不能这么想。这个 GIF 的情景是我编出来方便大家理解路径压缩的，但是实际中，每次find都会进行路径压缩，所以树本来就不可能增长到这么高，你的这种担心应该是多余的。</p><h3 id="五、最后总结"><a href="#五、最后总结" class="headerlink" title="五、最后总结"></a>五、最后总结</h3><p>我们先来看一下完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UF</span> </span>&#123;<br>    <span class="hljs-comment">// 连通分量个数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> count;<br>    <span class="hljs-comment">// 存储一棵树</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] parent;<br>    <span class="hljs-comment">// 记录树的“重量”</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] size;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UF</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.count = n;<br>        parent = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        size = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            parent[i] = i;<br>            size[i] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">union</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> q)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> rootP = find(p);<br>        <span class="hljs-keyword">int</span> rootQ = find(q);<br>        <span class="hljs-keyword">if</span> (rootP == rootQ)<br>            <span class="hljs-keyword">return</span>;<br>        <br>        <span class="hljs-comment">// 小树接到大树下面，较平衡</span><br>        <span class="hljs-keyword">if</span> (size[rootP] &gt; size[rootQ]) &#123;<br>            parent[rootQ] = rootP;<br>            size[rootP] += size[rootQ];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            parent[rootP] = rootQ;<br>            size[rootQ] += size[rootP];<br>        &#125;<br>        count--;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">connected</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> q)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> rootP = find(p);<br>        <span class="hljs-keyword">int</span> rootQ = find(q);<br>        <span class="hljs-keyword">return</span> rootP == rootQ;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (parent[x] != x) &#123;<br>            <span class="hljs-comment">// 进行路径压缩</span><br>            parent[x] = parent[parent[x]];<br>            x = parent[x];<br>        &#125;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">count</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Union-Find 算法的复杂度可以这样分析：构造函数初始化数据结构需要 O(N) 的时间和空间复杂度；连通两个节点<code>union</code>、判断两个节点的连通性<code>connected</code>、计算连通分量<code>count</code>所需的时间复杂度均为 O(1)。</p><p><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%BA%A7%E4%BD%8D%E8%B0%83%E5%BA%A6">上一篇：如何调度考生的座位</a><br><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/UnionFind%E7%AE%97%E6%B3%95%E5%BA%94%E7%94%A8">下一篇：Union-Find算法应用</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>twoSum问题的核心思想</title>
      <link href="2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/twoSum%E9%97%AE%E9%A2%98%E7%9A%84%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3/"/>
      <url>2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/twoSum%E9%97%AE%E9%A2%98%E7%9A%84%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="twoSum问题的核心思想"><a href="#twoSum问题的核心思想" class="headerlink" title="twoSum问题的核心思想"></a>twoSum问题的核心思想</h1><p>Two Sum 系列问题在 LeetCode 上有好几道，这篇文章就挑出有代表性的几道，介绍一下这种问题怎么解决。</p><h3 id="TwoSum-I"><a href="#TwoSum-I" class="headerlink" title="TwoSum I"></a>TwoSum I</h3><p>这个问题的<strong>最基本形式</strong>是这样：给你一个数组和一个整数 <code>target</code>，可以保证数组中<strong>存在</strong>两个数的和为 <code>target</code>，请你返回这两个数的索引。<br>比如输入 <code>nums = [3,1,3,6], target = 6</code>，算法应该返回数组 <code>[0,2]</code>，因为 3 + 3 = 6。<br>这个问题如何解决呢？首先最简单粗暴的办法当然是穷举了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; nums.length; j++) <br>            <span class="hljs-keyword">if</span> (nums[j] == target - nums[i]) <br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123; i, j &#125;;<br>    <span class="hljs-comment">// 不存在这么两个数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个解法非常直接，时间复杂度 O(N^2)，空间复杂度 O(1)。<br>可以通过一个哈希表减少时间复杂度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>    <span class="hljs-keyword">int</span> n = nums.length;<br>    index&lt;Integer, Integer&gt; index = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-comment">// 构造一个哈希表：元素映射到相应的索引</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        index.put(nums[i], i);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">int</span> other = target - nums[i];<br>        <span class="hljs-comment">// 如果 other 存在且不是 nums[i] 本身</span><br>        <span class="hljs-keyword">if</span> (index.containsKey(other) &amp;&amp; index.get(other) != i)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;i, index.get(other)&#125;;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，由于哈希表的查询时间为 O(1)，算法的时间复杂度降低到 O(N)，但是需要 O(N) 的空间复杂度来存储哈希表。不过综合来看，是要比暴力解法高效的。<br><strong>我觉得 Two Sum 系列问题就是想教我们如何使用哈希表处理问题</strong>。我们接着往后看。</p><h3 id="TwoSum-II"><a href="#TwoSum-II" class="headerlink" title="TwoSum II"></a>TwoSum II</h3><p>这里我们稍微修改一下上面的问题。我们设计一个类，拥有两个 API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TwoSum</span> </span>&#123;<br>    <span class="hljs-comment">// 向数据结构中添加一个数 number</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span>;<br>    <span class="hljs-comment">// 寻找当前数据结构中是否存在两个数的和为 value</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如何实现这两个 API 呢，我们可以仿照上一道题目，使用一个哈希表辅助 <code>find</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TwoSum</span> </span>&#123;<br>    Map&lt;Integer, Integer&gt; freq = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span> </span>&#123;<br>        <span class="hljs-comment">// 记录 number 出现的次数</span><br>        freq.put(number, freq.getOrDefault(number, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (Integer key : freq.keySet()) &#123;<br>            <span class="hljs-keyword">int</span> other = value - key;<br>            <span class="hljs-comment">// 情况一</span><br>            <span class="hljs-keyword">if</span> (other == key &amp;&amp; freq.get(key) &gt; <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            <span class="hljs-comment">// 情况二</span><br>            <span class="hljs-keyword">if</span> (other != key &amp;&amp; freq.containsKey(other))<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>进行 <code>find</code> 的时候有两种情况，举个例子：<br>情况一：<code>add</code> 了 <code>[3,3,2,5]</code> 之后，执行 <code>find(6)</code>，由于 3 出现了两次，3 + 3 = 6，所以返回 true。<br>情况二：<code>add</code> 了 <code>[3,3,2,5]</code> 之后，执行 <code>find(7)</code>，那么 <code>key</code> 为 2，<code>other</code> 为 5 时算法可以返回 true。<br>除了上述两种情况外，<code>find</code> 只能返回 false 了。<br>对于这个解法的时间复杂度呢，<code>add</code> 方法是 O(1)，<code>find</code> 方法是 O(N)，空间复杂度为 O(N)，和上一道题目比较类似。<br><strong>但是对于 API 的设计，是需要考虑现实情况的</strong>。比如说，我们设计的这个类，使用 <code>find</code> 方法非常频繁，那么每次都要 O(N) 的时间，岂不是很浪费费时间吗？对于这种情况，我们是否可以做些优化呢？<br>是的，对于频繁使用 <code>find</code> 方法的场景，我们可以进行优化。我们可以参考上一道题目的暴力解法，借助<strong>哈希集合</strong>来针对性优化 <code>find</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TwoSum</span> </span>&#123;<br>    Set&lt;Integer&gt; sum = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>    List&lt;Integer&gt; nums = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span> </span>&#123;<br>        <span class="hljs-comment">// 记录所有可能组成的和</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> n : nums)<br>            sum.add(n + number);<br>        nums.add(number);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sum.contains(value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样 <code>sum</code> 中就储存了所有加入数字可能组成的和，每次 <code>find</code> 只要花费 O(1) 的时间在集合中判断一下是否存在就行了，显然非常适合频繁使用 <code>find</code> 的场景。</p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>对于 TwoSum 问题，一个难点就是给的数组<strong>无序</strong>。对于一个无序的数组，我们似乎什么技巧也没有，只能暴力穷举所有可能。<br><strong>一般情况下，我们会首先把数组排序再考虑双指针技巧</strong>。TwoSum 启发我们，HashMap 或者 HashSet 也可以帮助我们处理无序数组相关的简单问题。<br>另外，设计的核心在于权衡，利用不同的数据结构，可以得到一些针对性的加强。<br>最后，如果 TwoSum I 中给的数组是有序的，应该如何编写算法呢？答案很简单，前文「双指针技巧汇总」写过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>        <span class="hljs-keyword">int</span> sum = nums[left] + nums[right];<br>        <span class="hljs-keyword">if</span> (sum == target) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;left, right&#125;;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &lt; target) &#123;<br>            left++; <span class="hljs-comment">// 让 sum 大一点</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &gt; target) &#123;<br>            right--; <span class="hljs-comment">// 让 sum 小一点</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 不存在这样两个数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%8A%80%E5%B7%A7">上一篇：滑动窗口技巧</a><br><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BD%8D%E6%93%8D%E4%BD%9C">下一篇：常用的位操作</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么推荐算法4</title>
      <link href="2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%954/"/>
      <url>2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%954/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么我推荐《算法4》"><a href="#为什么我推荐《算法4》" class="headerlink" title="为什么我推荐《算法4》"></a>为什么我推荐《算法4》</h1><p>咱们的公众号有很多硬核的算法文章，今天就聊点轻松的，就具体聊聊我非常“鼓吹”的《算法4》。这本书我在之前的文章多次推荐过，但是没有具体的介绍，今天就来正式介绍一下。。<br>我的推荐不会直接甩一大堆书目，而是会联系实际生活，讲一些书中有趣有用的知识，无论你最后会不会去看这本书，本文都会给你带来一些收获。<br><strong>首先这本书是适合初学者的</strong>。总是有很多读者问，我只会 C 语言，能不能看《算法4》？学算法最好用什么语言？诸如此类的问题。<br>经常看咱们公众号的读者应该体会到了，算法其实是一种思维模式，和你用什么语言没啥关系。我们的文章也不会固定用某一种语言，而是什么语言写出来容易理解就用什么语言。再退一步说，到底适不适合你，网上找个 PDF 亲自看一下不就知道了？<br>《算法4》看起来挺厚的，但是前面几十页是教你 Java 的；每章后面还有习题，占了不少页数；每章还有一些数学证明，这些都可以忽略。这样算下来，剩下的就是基础知识和疑难解答之类的内容，含金量很高，把这些基础知识动手实践一遍，真的就可以达到不错的水平了。<br>我觉得这本书之所以能有这么高的评分，一个是因为讲解详细，还有大量配图，另一个原因就是书中把一些算法和现实生活中的使用场景联系起来，你不仅知道某个算法怎么实现，也知道它大概能运用到什么场景，下面我就来介绍两个图算法的简单应用。</p><h3 id="一、二分图的应用"><a href="#一、二分图的应用" class="headerlink" title="一、二分图的应用"></a>一、二分图的应用</h3><p>我想举的第一个例子是<strong>二分图</strong>。简单来说，二分图就是一幅拥有特殊性质的图：能够用两种颜色为所有顶点着色，使得任何一条边的两个顶点颜色不同。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/algo4/1.jpg"><br>明白了二分图是什么，能解决什么实际问题呢？<strong>算法方面，常见的操作是如何判定一幅图是不是二分图</strong>。比如说下面这道 LeetCode 题目：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/algo4/title.png"><br>你想想，如果我们把每个人视为一个顶点，边代表讨厌；相互讨厌的两个人之间连接一条边，就可以形成一幅图。那么根据刚才二分图的定义，如果这幅图是一幅二分图，就说明这些人可以被分为两组，否则的话就不行。<br>这是判定二分图算法的一个应用，<strong>其实二分图在数据结构方面也有一些不错的特性</strong>。<br>比如说我们需要一种数据结构来储存电影和演员之间的关系：某一部电影肯定是由多位演员出演的，且某一位演员可能会出演多部电影。你使用什么数据结构来存储这种关系呢？<br>既然是存储映射关系，最简单的不就是使用哈希表嘛，我们可以使用一个 <code>HashMap&lt;String, List&lt;String&gt;&gt;</code> 来存储电影到演员列表的映射，如果给一部电影的名字，就能快速得到出演该电影的演员。<br>但是如果给出一个演员的名字，我们想快速得到该演员演出的所有电影，怎么办呢？这就需要「反向索引」，对之前的哈希表进行一些操作，新建另一个哈希表，把演员作为键，把电影列表作为值。<br>对于上面这个例子，可以使用二分图来取代哈希表。电影和演员是具有二分图性质的：如果把电影和演员视为图中的顶点，出演关系作为边，那么与电影顶点相连的一定是演员，与演员相邻的一定是电影，不存在演员和演员相连，电影和电影相连的情况。<br>回顾二分图的定义，如果对演员和电影顶点着色，肯定就是一幅二分图：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/algo4/2.jpg"><br>如果这幅图构建完成，就不需要反向索引，对于演员顶点，其直接连接的顶点就是他出演的电影，对于电影顶点，其直接连接的顶点就是出演演员。<br>当然，对于这个问题，书中还提到了一些其他有趣的玩法，比如说社交网络中「间隔度数」的计算（六度空间理论应该听说过）等等，其实就是一个 BFS 广度优先搜索寻找最短路径的问题，具体代码实现这里就不展开了。</p><h3 id="二、套汇的算法"><a href="#二、套汇的算法" class="headerlink" title="二、套汇的算法"></a>二、套汇的算法</h3><p>如果我们说货币 A 到货币 B 的汇率是 10，意思就是 1 单位的货币 A 可以换 10 单位货币 B。如果我们把每种货币视为一幅图的顶点，货币之间的汇率视为加权有向边，那么整个汇率市场就是一幅「完全加权有向图」。<br>一旦把现实生活中的情景抽象成图，就有可能运用算法解决一些问题。比如说图中可能存在下面的情况：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/algo4/3.jpg"><br>图中的加权有向边代表汇率，我们可以发现如果把 100 单位的货币 A 换成 B，再换成 C，最后换回 A，就可以得到 100×0.9×0.8×1.4 = 100.8 单位的 A！如果交易的金额大一些的话，赚的钱是很可观的，这种空手套白狼的操作就是套汇。<br>现实中交易会有种种限制，而且市场瞬息万变，但是套汇的利润还是很高的，关键就在于如何<strong>快速</strong>找到这种套汇机会呢？<br>借助图的抽象，我们发现套汇机会其实就是一个环，且这个环上的权重之积大于 1，只要在顺着这个环交易一圈就能空手套白狼。<br>图论中有一个经典算法叫做 <strong>Bellman-Ford 算法，可以用于寻找负权重环</strong>。对于我们说的套汇问题，可以先把所有边的权重 w 替换成 -ln(w)，这样「寻找权重乘积大于 1 的环」就转化成了「寻找权重和小于 0 的环」，就可以使用 Bellman-Ford 算法在 O(EV) 的时间内寻找负权重环，也就是寻找套汇机会。<br>《算法4》就介绍到这里，关于上面两个例子的具体内容，可以自己去看书，公众号后台回复关键词「算法4」就有 PDF。</p><h3 id="三、最后说几句"><a href="#三、最后说几句" class="headerlink" title="三、最后说几句"></a>三、最后说几句</h3><p>首先，前文说对于数学证明、章后习题可以忽略，可能有人要抬杠了：难道习题和数学证明不重要吗？<br>那我想说，就是不重要，起码对大多数人来说不重要。我觉得吧，学习就要带着目的性去学，大部分人学算法不就是巩固计算机知识，对付面试题目吗？<strong>如果是这个目的</strong>，那就学些基本的数据结构和经典算法，明白它们的时间复杂度，然后去刷题就好了，何必和习题、证明过不去？<br>这也是我从来不推荐《算法导论》这本书的原因。如果有人给你推荐这本书，只可能有两个原因，要么他是真大佬，要么他在装大佬。《算法导论》中充斥大量数学证明，而且很多数据结构是很少用到的，顶多当个字典用。你说你学了那些有啥用呢，饶过自己呗。<br>另外，读书在精不在多。你花时间《算法4》过个大半（最后小半部分有点困难），同时刷点题，看看咱们的公众号文章，算法这块真就够了，别对细节问题太较真。<br><strong>致力于把算法讲清楚！欢迎关注我的微信公众号 labuladong，查看更多通俗易懂的文章</strong>，公众号后台回复关键词「算法4」可以获得 PDF 下载：</p><p><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%AD%A6%E4%B9%A0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E7%9A%84%E9%AB%98%E6%95%88%E6%96%B9%E6%B3%95">上一篇：学习算法和刷题的框架思维</a><br><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3%E8%BF%9B%E9%98%B6">下一篇：动态规划解题框架</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信封嵌套问题</title>
      <link href="2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%BF%A1%E5%B0%81%E5%B5%8C%E5%A5%97%E9%97%AE%E9%A2%98/"/>
      <url>2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%BF%A1%E5%B0%81%E5%B5%8C%E5%A5%97%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="信封嵌套问题"><a href="#信封嵌套问题" class="headerlink" title="信封嵌套问题"></a>信封嵌套问题</h1><p>很多算法问题都需要排序技巧，其难点不在于排序本身，而是需要巧妙地排序进行预处理，将算法问题进行转换，为之后的操作打下基础。<br>信封嵌套问题就需要先按特定的规则排序，之后就转换为一个 <a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AE%BE%E8%AE%A1%EF%BC%9A%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97">最长递增子序列问题</a>，可以用前文 <a href="%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E8%AF%A6%E8%A7%A3">二分查找详解</a> 的技巧来解决了。</p><h3 id="一、题目概述"><a href="#一、题目概述" class="headerlink" title="一、题目概述"></a>一、题目概述</h3><p>信封嵌套问题是个很有意思且经常出现在生活中的问题，先看下题目：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E4%BF%A1%E5%B0%81%E5%B5%8C%E5%A5%97/title.png" alt="title"><br>这道题目其实是最长递增子序列（Longes Increasing Subsequence，简写为 LIS）的一个变种，因为很显然，每次合法的嵌套是大的套小的，相当于找一个最长递增的子序列，其长度就是最多能嵌套的信封个数。<br>但是难点在于，标准的 LIS 算法只能在数组中寻找最长子序列，而我们的信封是由 <code>(w, h)</code> 这样的二维数对形式表示的，如何把 LIS 算法运用过来呢？<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E4%BF%A1%E5%B0%81%E5%B5%8C%E5%A5%97/0.jpg" alt="0"><br>读者也许会想，通过 <code>w × h</code> 计算面积，然后对面积进行标准的 LIS 算法。但是稍加思考就会发现这样不行，比如 <code>1 × 10</code> 大于 <code>3 × 3</code>，但是显然这样的两个信封是无法互相嵌套的。</p><h3 id="二、解法"><a href="#二、解法" class="headerlink" title="二、解法"></a>二、解法</h3><p>这道题的解法是比较巧妙的：<br><strong>先对宽度 <code>w</code> 进行升序排序，如果遇到 <code>w</code> 相同的情况，则按照高度 <code>h</code> 降序排序。之后把所有的 <code>h</code> 作为一个数组，在这个数组上计算 LIS 的长度就是答案。</strong><br>画个图理解一下，先对这些数对进行排序：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E4%BF%A1%E5%B0%81%E5%B5%8C%E5%A5%97/1.jpg" alt="1"><br>然后在 <code>h</code> 上寻找最长递增子序列：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E4%BF%A1%E5%B0%81%E5%B5%8C%E5%A5%97/2.jpg" alt="2"><br>这个子序列就是最优的嵌套方案。<br>这个解法的关键在于，对于宽度 <code>w</code> 相同的数对，要对其高度 <code>h</code> 进行降序排序。因为两个宽度相同的信封不能相互包含的，逆序排序保证在 <code>w</code> 相同的数对中最多只选取一个。<br>下面看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// envelopes = [[w, h], [w, h]...]</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxEnvelopes</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] envelopes)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = envelopes.length;<br>    <span class="hljs-comment">// 按宽度升序排列，如果宽度一样，则按高度降序排列</span><br>    Arrays.sort(envelopes, <span class="hljs-keyword">new</span> Comparator&lt;<span class="hljs-keyword">int</span>[]&gt;() <br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a, <span class="hljs-keyword">int</span>[] b)</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>] == b[<span class="hljs-number">0</span>] ? <br>                b[<span class="hljs-number">1</span>] - a[<span class="hljs-number">1</span>] : a[<span class="hljs-number">0</span>] - b[<span class="hljs-number">0</span>];<br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">// 对高度数组寻找 LIS</span><br>    <span class="hljs-keyword">int</span>[] height = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        height[i] = envelopes[i][<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> lengthOfLIS(height);<br>&#125;<br></code></pre></td></tr></table></figure><p>关于最长递增子序列的寻找方法，在前文中详细介绍了动态规划解法,并用扑克牌游戏解释了二分查找解法，本文就不展开了，直接套用算法模板：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 返回 nums 中 LIS 的长度 */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLIS</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> piles = <span class="hljs-number">0</span>, n = nums.length;<br>    <span class="hljs-keyword">int</span>[] top = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-comment">// 要处理的扑克牌</span><br>        <span class="hljs-keyword">int</span> poker = nums[i];<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = piles;<br>        <span class="hljs-comment">// 二分查找插入位置</span><br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            <span class="hljs-keyword">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (top[mid] &gt;= poker)<br>                right = mid;<br>            <span class="hljs-keyword">else</span><br>                left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (left == piles) piles++;<br>        <span class="hljs-comment">// 把这张牌放到牌堆顶</span><br>        top[left] = poker;<br>    &#125;<br>    <span class="hljs-comment">// 牌堆数就是 LIS 长度</span><br>    <span class="hljs-keyword">return</span> piles;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了清晰，我将代码分为了两个函数， 你也可以合并，这样可以节省下 <code>height</code> 数组的空间。<br>此算法的时间复杂度为 $O(NlogN)$，因为排序和计算 LIS 各需要 $O(NlogN)$ 的时间。<br>空间复杂度为 $O(N)$，因为计算 LIS 的函数中需要一个 <code>top</code> 数组。</p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>这个问题是个 Hard 级别的题目，难就难在排序，正确地排序后此问题就被转化成了一个标准的 LIS 问题，容易解决一些。<br>其实这种问题还可以拓展到三维，比如说现在不是让你嵌套信封，而是嵌套箱子，每个箱子有长宽高三个维度，请你算算最多能嵌套几个箱子？<br>我们可能会这样想，先把前两个维度（长和宽）按信封嵌套的思路求一个嵌套序列，最后在这个序列的第三个维度（高度）找一下 LIS，应该能算出答案。<br>实际上，这个思路是错误的。这类问题叫做「偏序问题」，上升到三维会使难度巨幅提升，需要借助一种高级数据结构「树状数组」，有兴趣的读者可以自行搜索。<br>有很多算法问题都需要排序后进行处理，阿东正在进行整理总结。希望本文对你有帮助。</p><p><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%8C%BA%E9%97%B4%E4%BA%A4%E9%9B%86%E9%97%AE%E9%A2%98">上一篇：区间调度之区间交集问题</a><br><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%87%A0%E4%B8%AA%E5%8F%8D%E7%9B%B4%E8%A7%89%E7%9A%84%E6%A6%82%E7%8E%87%E9%97%AE%E9%A2%98">下一篇：几个反直觉的概率问题</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几个反直觉的概率问题</title>
      <link href="2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%87%A0%E4%B8%AA%E5%8F%8D%E7%9B%B4%E8%A7%89%E7%9A%84%E6%A6%82%E7%8E%87%E9%97%AE%E9%A2%98/"/>
      <url>2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%87%A0%E4%B8%AA%E5%8F%8D%E7%9B%B4%E8%A7%89%E7%9A%84%E6%A6%82%E7%8E%87%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="几个反直觉的概率问题"><a href="#几个反直觉的概率问题" class="headerlink" title="几个反直觉的概率问题"></a>几个反直觉的概率问题</h1><p>上篇文章 <a href="./%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95">洗牌算法详解</a> 讲到了验证概率算法的蒙特卡罗方法，今天聊点轻松的内容：几个和概率相关的有趣问题。<br>计算概率有下面两个最简单的原则：<br>原则一、计算概率一定要有一个参照系，称作「样本空间」，即随机事件可能出现的所有结果。事件 A 发生的概率 = A 包含的样本点 / 样本空间的样本总数。<br>原则二、计算概率一定要明白，概率是一个连续的整体，不可以把连续的概率分割开，也就是所谓的条件概率。<br>上述两个原则高中就学过，但是我们还是很容易犯错，而且犯错的流程也有异曲同工之妙：<br>先是忽略了原则二，错误地计算了样本空间，然后通过原则一算出了错误的答案。<br>下面介绍几个简单却具有迷惑性的问题，分别是男孩女孩问题、生日悖论、三门问题。当然，三门问题可能是大家最耳熟的，所以就多说一些有趣的思考。</p><h3 id="一、男孩女孩问题"><a href="#一、男孩女孩问题" class="headerlink" title="一、男孩女孩问题"></a>一、男孩女孩问题</h3><p>假设有一个家庭，有两个孩子，现在告诉你其中有一个男孩，请问另一个也是男孩的概率是多少？<br>很多人，包括我在内，不假思索地回答：1/2 啊，因为另一个孩子要么是男孩，要么是女孩，而且概率相等呀。但是实际上，答案是 1/3。<br>上述思想为什么错误呢？因为没有正确计算样本空间，导致原则一计算错误。有两个孩子，那么样本空间为 4，即哥哥妹妹，哥哥弟弟，姐姐妹妹，姐姐弟弟这四种情况。已知有一个男孩，那么排除姐姐妹妹这种情况，所以样本空间变成 3。另一个孩子也是男孩只有哥哥弟弟这 1 种情况，所以概率为 1/3。<br>为什么计算样本空间会出错呢？因为我们忽略了条件概率，即混淆了下面两个问题：<br>这个家庭只有一个孩子，这个孩子是男孩的概率是多少？<br>这个家庭有两个孩子，其中一个是男孩，另一个孩子是男孩的概率是多少？<br>根据原则二，概率问题是连续的，不可以把上述两个问题混淆。第二个问题需要用条件概率，即求一个孩子是男孩的条件下，另一个也是男孩的概率。运用条件概率的公式也很好算，就不多说了。<br>通过这个问题，读者应该理解两个概率计算原则的关系了，最具有迷惑性的就是条件概率的忽视。为了不要被迷惑，最简单的办法就是把所有可能结果穷举出来。<br>最后，对于此问题我见过一个很奇葩的质疑：如果这两个孩子是双胞胎，不存在年龄上的差异怎么办？<br>我竟然觉得有那么一丝道理！但其实，我们只是通过年龄差异来表示两个孩子的独立性，也就是说即便两个孩子同性，也有两种可能。所以不要用双胞胎抬杠了。</p><h3 id="二、生日悖论"><a href="#二、生日悖论" class="headerlink" title="二、生日悖论"></a>二、生日悖论</h3><p>生日悖论是由这样一个问题引出的：一个屋子里需要有多少人，才能使得存在至少两个人生日是同一天的概率达到 50%？<br>答案是 23 个人，也就是说房子里如果有 23 个人，那么就有 50% 的概率会存在两个人生日相同。这个结论看起来不可思议，所以被称为悖论。按照直觉，要得到 50% 的概率，起码得有 183 个人吧，因为一年有 365 天呀？其实不是的，觉得这个结论不可思议主要有两个思维误区：<br><strong>第一个误区是误解「存在」这个词的含义。</strong><br>读者可能认为，如果 23 个人中出现相同生日的概率就能达到 50%，是不是意味着：<br>假设现在屋子里坐着 22 个人，然后我走进去，那么有 50% 的概率我可以找到一个人和我生日相同。但这怎么可能呢？<br>并不是的，你这种想法是以自我为中心，而题目的概率是在描述整体。也就是说「存在」的含义是指 23 人中的任意两个人，涉及排列组合，大概率和你没啥关系。<br>如果你非要计算存在和自己生日相同的人的概率是多少，可以这样计算：<br>1 - P(22 个人都和我的生日不同) = 1 -(364/365)^22 = 0.06<br>这样计算得到的结果是不是看起来合理多了？生日悖论计算对象的不是某一个人，而是一个整体，其中包含了所有人的排列组合，它们的概率之和当然会大得多。<br><strong>第二个误区是认为概率是线性变化的。</strong><br>读者可能认为，如果 23 个人中出现相同生日的概率就能达到 50%，是不是意味着 46 个人的概率就能达到 100%？<br>不是的，就像中奖率 50% 的游戏，你玩两次的中奖率就是 100% 吗？显然不是，你玩两次的中奖率是 75%：<br>$P(两次能中奖) = P(第一次就中了) + P(第一次没中但第二次中了) = 1/2 + 1/2*1/2 = 75%$<br>那么换到生日悖论也是一个道理，概率不是简单叠加，而要考虑一个连续的过程，所以这个结论并没有什么不合常理之处。<br>那为什么只要 23 个人出现相同生日的概率就能大于 50% 了呢？我们先计算 23 个人生日都唯一（不重复）的概率。只有 1 个人的时候，生日唯一的概率是 $365/365$，2 个人时，生日唯一的概率是 $365/365 × 364/365$，以此类推可知 23 人的生日都唯一的概率：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%A6%82%E7%8E%87%E9%97%AE%E9%A2%98/p.png"><br>算出来大约是 0.493，所以存在相同生日的概率就是 0.507，差不多就是 50% 了。实际上，按照这个算法，当人数达到 70 时，存在两个人生日相同的概率就上升到了 99.9%，基本可以认为是 100% 了。所以从概率上说，一个几十人的小团体中存在生日相同的人真没啥稀奇的。</p><h3 id="三、三门问题"><a href="#三、三门问题" class="headerlink" title="三、三门问题"></a>三、三门问题</h3><p>这个游戏很经典了：游戏参与者面对三扇门，其中两扇门后面是山羊，一扇门后面是跑车。参与者只要随便选一扇门，门后面的东西就归他（跑车的价值当然更大）。但是主持人决定帮一下参与者：在他选择之后，先不急着打开这扇门，而是由主持人打开剩下两扇门中的一扇，展示其中的山羊（主持人知道每扇门后面是什么），然后给参与者一次换门的机会，此时参与者应该换门还是不换门呢？<br>为了防止第一次看到这个问题的读者迷惑，再具体描述一下这个问题：<br>你是游戏参与者，现在有门 1,2,3，假设你随机选择了门 1，然后主持人打开了门 3 告诉你那后面是山羊。现在，你是坚持你最初的选择门 1，还是选择换成门 2 呢？<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%A6%82%E7%8E%87%E9%97%AE%E9%A2%98/sanmen.png"><br>答案是应该换门，换门之后抽到跑车的概率是 2/3，不换的话是 1/3。又一次反直觉，感觉换不换的中奖概率应该都一样啊，因为最后肯定就剩两个门，一个是羊，一个是跑车，这是事实，所以不管选哪个的概率不都是 1/2 吗？<br>类似前面说的男孩女孩问题，最简单稳妥的方法就是把所有可能结果穷举出来：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%A6%82%E7%8E%87%E9%97%AE%E9%A2%98/tree.png" alt="穷举树"><br>很容易看到选择换门中奖的概率是 2/3，不换的话是 1/3。<br>关于这个问题还有更简单的方法：主持人开门实际上在「浓缩」概率。一开始你选择到跑车的概率当然是 1/3，剩下两个门中包含跑车的概率当然是 2/3，这没啥可说的。但是主持人帮你排除了一个含有山羊的门，相当于把那 2/3 的概率浓缩到了剩下的这一扇门上。那么，你说你是抱着原来那扇 1/3 的门，还是换成那扇经过「浓缩」的 2/3 概率的门呢？<br>再直观一点，假设你三选一，剩下 2 扇门，再给你加入 98 扇装山羊的门，把这 100 扇门随机打乱，问你换不换？肯定不换对吧，这明摆着把概率稀释了，肯定抱着原来的那扇门是最可能中跑车的。再假设，初始有 100 扇门，你选了一扇，然后主持人在剩下 99 扇门中帮你排除 98 个山羊，问你换不换一扇门？肯定换对吧，你手上那扇门是 1%，另一扇门是 99%，或者也可以这样理解，不换只是选择了 1 扇门，换门相当于选择了 99 扇门，这样结果很明显了吧？<br>以上思想，也许有的读者都思考过，下面我们思考这样一个问题：假设你在决定是否换门的时候，小明破门而入，要求帮你做出选择。他完全不知道之前发生的事，他只知道面前有两扇门，一扇是跑车一扇是山羊，那么他抽中跑车的概率是多大？<br>当然是 1/2，这也是很多人做错三门问题的根本原因。类似生日悖论，人们总是容易以自我为中心，通过这个小明的视角来计算是否换门，这显然会进入误区。<br>就好比有两个箱子，一号箱子有 4 个黑球 2 个红球，二号箱子有 2 个黑球 4 个红球，随便选一个箱子，随便摸一个球，问你摸出红球的概率。<br>对于不知情的小明，他会随机选择一个箱子，随机摸球，摸到红球的概率是：1/2 × 2/6 + 1/2 × 4/6 = 1/2<br>对于知情的你，你知道在二号箱子摸球概率大，所以只在二号箱摸，摸到红球的概率是：0 × 2/6 + 1 × 4/6 = 2/3<br>三门问题是有指导意义的。比如你蒙选择题，先蒙了 A，后来灵机一动排除了 B 和 C，请问你是否要把 A 换成 D？答案是，换！<br>也许读者会问，如果只排除了一个答案，比如说 B，那么我是否应该把 A 换成 C 或者 D 呢？答案是，换！<br>因为按照刚才「浓缩」概率这个思想，只要进行了排除，都是在进行「浓缩」，均摊下来肯定比你一开始蒙的那个答案概率 1/4 高。比如刚才的例子，C 和 D 的正确概率都是 3/8，而你开始蒙的 A 只有 1/4。<br>当然，运用此策略蒙题的前提是你真的抓瞎，真的随机乱选答案，这样概率才能作为最后的杀手锏。</p><p><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%BF%A1%E5%B0%81%E5%B5%8C%E5%A5%97%E9%97%AE%E9%A2%98">上一篇：信封嵌套问题</a><br><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95">下一篇：洗牌算法</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前缀和技巧</title>
      <link href="2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%89%8D%E7%BC%80%E5%92%8C%E6%8A%80%E5%B7%A7/"/>
      <url>2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%89%8D%E7%BC%80%E5%92%8C%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="前缀和技巧"><a href="#前缀和技巧" class="headerlink" title="前缀和技巧"></a>前缀和技巧</h1><p>今天来聊一道简单却十分巧妙的算法问题：算出一共有几个和为 k 的子数组。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%89%8D%E7%BC%80%E5%92%8C/title.png"><br>那我把所有子数组都穷举出来，算它们的和，看看谁的和等于 k 不就行了。<br>关键是，<strong>如何快速得到某个子数组的和呢</strong>，比如说给你一个数组 <code>nums</code>，让你实现一个接口 <code>sum(i, j)</code>，这个接口要返回 <code>nums[i..j]</code> 的和，而且会被多次调用，你怎么实现这个接口呢？<br>因为接口要被多次调用，显然不能每次都去遍历 <code>nums[i..j]</code>，有没有一种快速的方法在 O(1) 时间内算出 <code>nums[i..j]</code> 呢？这就需要<strong>前缀和</strong>技巧了。</p><h3 id="一、什么是前缀和"><a href="#一、什么是前缀和" class="headerlink" title="一、什么是前缀和"></a>一、什么是前缀和</h3><p>前缀和的思路是这样的，对于一个给定的数组 <code>nums</code>，我们额外开辟一个前缀和数组进行预处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> n = nums.length;<br><span class="hljs-comment">// 前缀和数组</span><br><span class="hljs-keyword">int</span>[] preSum = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n + <span class="hljs-number">1</span>];<br>preSum[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    preSum[i + <span class="hljs-number">1</span>] = preSum[i] + nums[i];<br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%89%8D%E7%BC%80%E5%92%8C/1.jpg"><br>这个前缀和数组 <code>preSum</code> 的含义也很好理解，<code>preSum[i]</code> 就是 <code>nums[0..i-1]</code> 的和。那么如果我们想求 <code>nums[i..j]</code> 的和，只需要一步操作 <code>preSum[j+1]-preSum[i]</code> 即可，而不需要重新去遍历数组了。<br>回到这个子数组问题，我们想求有多少个子数组的和为 k，借助前缀和技巧很容易写出一个解法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">subarraySum</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = nums.length;<br>    <span class="hljs-comment">// 构造前缀和</span><br>    <span class="hljs-keyword">int</span>[] sum = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n + <span class="hljs-number">1</span>];<br>    sum[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        sum[i + <span class="hljs-number">1</span>] = sum[i] + nums[i];<br>    <br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 穷举所有子数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)<br>            <span class="hljs-comment">// sum of nums[j..i-1]</span><br>            <span class="hljs-keyword">if</span> (sum[i] - sum[j] == k)<br>                ans++;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个解法的时间复杂度 $O(N^2)$ 空间复杂度 $O(N)$，并不是最优的解法。不过通过这个解法理解了前缀和数组的工作原理之后，可以使用一些巧妙的办法把时间复杂度进一步降低。</p><h3 id="二、优化解法"><a href="#二、优化解法" class="headerlink" title="二、优化解法"></a>二、优化解法</h3><p>前面的解法有嵌套的 for 循环：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)<br>        <span class="hljs-keyword">if</span> (sum[i] - sum[j] == k)<br>            ans++;<br></code></pre></td></tr></table></figure><p>第二层 for 循环在干嘛呢？翻译一下就是，<strong>在计算，有几个 <code>j</code> 能够使得 <code>sum[i]</code> 和 <code>sum[j]</code> 的差为 k。</strong>毎找到一个这样的 <code>j</code>，就把结果加一。<br>我们可以把 if 语句里的条件判断移项，这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (sum[j] == sum[i] - k)<br>    ans++;<br></code></pre></td></tr></table></figure><p>优化的思路是：<strong>我直接记录下有几个 <code>sum[j]</code> 和 <code>sum[i] - k</code> 相等，直接更新结果，就避免了内层的 for 循环</strong>。我们可以用哈希表，在记录前缀和的同时记录该前缀和出现的次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">subarraySum</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = nums.length;<br>    <span class="hljs-comment">// map：前缀和 -&gt; 该前缀和出现的次数</span><br>    HashMap&lt;Integer, Integer&gt; <br>        preSum = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-comment">// base case</span><br>    preSum.put(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>, sum0_i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        sum0_i += nums[i];<br>        <span class="hljs-comment">// 这是我们想找的前缀和 nums[0..j]</span><br>        <span class="hljs-keyword">int</span> sum0_j = sum0_i - k;<br>        <span class="hljs-comment">// 如果前面有这个前缀和，则直接更新答案</span><br>        <span class="hljs-keyword">if</span> (preSum.containsKey(sum0_j))<br>            ans += preSum.get(sum0_j);<br>        <span class="hljs-comment">// 把前缀和 nums[0..i] 加入并记录出现次数</span><br>        preSum.put(sum0_i, <br>            preSum.getOrDefault(sum0_i, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><p>比如说下面这个情况，需要前缀和 8 就能找到和为 k 的子数组了，之前的暴力解法需要遍历数组去数有几个 8，而优化解法借助哈希表可以直接得知有几个前缀和为 8。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%89%8D%E7%BC%80%E5%92%8C/2.jpg"><br>这样，就把时间复杂度降到了 $O(N)$，是最优解法了。</p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>前缀和不难，却很有用，主要用于处理数组区间的问题。<br>比如说，让你统计班上同学考试成绩在不同分数段的百分比，也可以利用前缀和技巧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] scores; <span class="hljs-comment">// 存储着所有同学的分数</span><br><span class="hljs-comment">// 试卷满分 150 分</span><br><span class="hljs-keyword">int</span>[] count = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">150</span> + <span class="hljs-number">1</span>]<br><span class="hljs-comment">// 记录每个分数有几个同学</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> score : scores)<br>    count[score]++<br><span class="hljs-comment">// 构造前缀和</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; count.length; i++)<br>    count[i] = count[i] + count[i-<span class="hljs-number">1</span>];<br></code></pre></td></tr></table></figure><p>这样，给你任何一个分数段，你都能通过前缀和相减快速计算出这个分数段的人数，百分比也就很容易计算了。<br>但是，稍微复杂一些的算法问题，不止考察简单的前缀和技巧。比如本文探讨的这道题目，就需要借助前缀和的思路做进一步的优化，借助哈希表去除不必要的嵌套循环。可见对题目的理解和细节的分析能力对于算法的优化是至关重要的。<br>希望本文对你有帮助。</p><p><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E7%83%A7%E9%A5%BC%E6%8E%92%E5%BA%8F">上一篇：烧饼排序</a><br><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%98%E6%B3%95">下一篇：字符串乘法</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区间交集问题</title>
      <link href="2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%8C%BA%E9%97%B4%E4%BA%A4%E9%9B%86%E9%97%AE%E9%A2%98/"/>
      <url>2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%8C%BA%E9%97%B4%E4%BA%A4%E9%9B%86%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="区间交集问题"><a href="#区间交集问题" class="headerlink" title="区间交集问题"></a>区间交集问题</h1><p>本文是区间系列问题的第三篇，前两篇分别讲了区间的最大不相交子集和重叠区间的合并，今天再写一个算法，可以快速找出两组区间的交集。<br>先看下题目，LeetCode 第 986 题就是这个问题：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/intersection/title.png" alt="title"><br>题目很好理解，就是让你找交集，注意区间都是闭区间。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>解决区间问题的思路一般是先排序，以便操作，不过题目说已经排好序了，那么可以用两个索引指针在 <code>A</code> 和 <code>B</code> 中游走，把交集找出来，代码大概是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># A, B 形如 [[0,2],[5,10]...]</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">intervalIntersection</span>(<span class="hljs-params">A, B</span>):</span><br>    i, j = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    res = []<br>    <span class="hljs-keyword">while</span> i &lt; len(A) <span class="hljs-keyword">and</span> j &lt; len(B):<br>        <span class="hljs-comment"># ...</span><br>        j += <span class="hljs-number">1</span><br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p>不难，我们先老老实实分析一下各种情况。<br>首先，<strong>对于两个区间</strong>，我们用 <code>[a1,a2]</code> 和 <code>[b1,b2]</code> 表示在 <code>A</code> 和 <code>B</code> 中的两个区间，那么什么情况下这两个区间<strong>没有交集</strong>呢：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/intersection/1.jpg"><br>只有这两种情况，写成代码的条件判断就是这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> b2 &lt; a1 <span class="hljs-keyword">or</span> a2 &lt; b1:<br>    [a1,a2] 和 [b1,b2] 无交集<br></code></pre></td></tr></table></figure><p>那么，什么情况下，两个区间存在交集呢？根据命题的否定，上面逻辑的否命题就是存在交集的条件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 不等号取反，or 也要变成 and</span><br><span class="hljs-keyword">if</span> b2 &gt;= a1 <span class="hljs-keyword">and</span> a2 &gt;= b1:<br>    [a1,a2] 和 [b1,b2] 存在交集<br></code></pre></td></tr></table></figure><p>接下来，两个区间存在交集的情况有哪些呢？穷举出来：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/intersection/2.jpg"><br>这很简单吧，就这四种情况而已。那么接下来思考，这几种情况下，交集是否有什么共同点呢？<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/intersection/3.jpg"><br>我们惊奇地发现，交集区间是有规律的！如果交集区间是 <code>[c1,c2]</code>，那么 <code>c1=max(a1,b1)</code>，<code>c2=min(a2,b2)</code>！这一点就是寻找交集的核心，我们把代码更进一步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> i &lt; len(A) <span class="hljs-keyword">and</span> j &lt; len(B):<br>    a1, a2 = A[i][<span class="hljs-number">0</span>], A[i][<span class="hljs-number">1</span>]<br>    b1, b2 = B[j][<span class="hljs-number">0</span>], B[j][<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">if</span> b2 &gt;= a1 <span class="hljs-keyword">and</span> a2 &gt;= b1:<br>        res.append([max(a1, b1), min(a2, b2)])<br>    <span class="hljs-comment"># ...</span><br></code></pre></td></tr></table></figure><p>最后一步，我们的指针 <code>i</code> 和 <code>j</code> 肯定要前进（递增）的，什么时候应该前进呢？<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/intersection/4.gif"><br>结合动画示例就很好理解了，是否前进，只取决于 <code>a2</code> 和 <code>b2</code> 的大小关系：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> i &lt; len(A) <span class="hljs-keyword">and</span> j &lt; len(B):<br>    <span class="hljs-comment"># ...</span><br>    <span class="hljs-keyword">if</span> b2 &lt; a2:<br>        j += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        i += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># A, B 形如 [[0,2],[5,10]...]</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">intervalIntersection</span>(<span class="hljs-params">A, B</span>):</span><br>    i, j = <span class="hljs-number">0</span>, <span class="hljs-number">0</span> <span class="hljs-comment"># 双指针</span><br>    res = []<br>    <span class="hljs-keyword">while</span> i &lt; len(A) <span class="hljs-keyword">and</span> j &lt; len(B):<br>        a1, a2 = A[i][<span class="hljs-number">0</span>], A[i][<span class="hljs-number">1</span>]<br>        b1, b2 = B[j][<span class="hljs-number">0</span>], B[j][<span class="hljs-number">1</span>]<br>        <span class="hljs-comment"># 两个区间存在交集</span><br>        <span class="hljs-keyword">if</span> b2 &gt;= a1 <span class="hljs-keyword">and</span> a2 &gt;= b1:<br>            <span class="hljs-comment"># 计算出交集，加入 res</span><br>            res.append([max(a1, b1), min(a2, b2)])<br>        <span class="hljs-comment"># 指针前进</span><br>        <span class="hljs-keyword">if</span> b2 &lt; a2: j += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:       i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p>总结一下，区间类问题看起来都比较复杂，情况很多难以处理，但实际上通过观察各种不同情况之间的共性可以发现规律，用简洁的代码就能处理。<br>另外，区间问题没啥特别厉害的奇技淫巧，其操作也朴实无华，但其应用却十分广泛，接之前的几篇文章：</p><p><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%8C%BA%E9%97%B4%E8%B0%83%E5%BA%A6%E9%97%AE%E9%A2%98%E4%B9%8B%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6">上一篇：区间调度之区间合并问题</a><br><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%BF%A1%E5%B0%81%E5%B5%8C%E5%A5%97%E9%97%AE%E9%A2%98">下一篇：信封嵌套问题</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区间调度问题之区间合并</title>
      <link href="2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%8C%BA%E9%97%B4%E8%B0%83%E5%BA%A6%E9%97%AE%E9%A2%98%E4%B9%8B%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/"/>
      <url>2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%8C%BA%E9%97%B4%E8%B0%83%E5%BA%A6%E9%97%AE%E9%A2%98%E4%B9%8B%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="区间调度问题之区间合并"><a href="#区间调度问题之区间合并" class="headerlink" title="区间调度问题之区间合并"></a>区间调度问题之区间合并</h1><p>上篇文章用贪心算法解决了区间调度问题：给你很多区间，让你求其中的最大不重叠子集。<br>其实对于区间相关的问题，还有很多其他类型，本文就来讲讲区间合并问题（Merge Interval）。<br>LeetCode 第 56 题就是一道相关问题，题目很好理解：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/mergeInterval/title.png" alt="title"><br>我们解决区间问题的一般思路是先排序，然后观察规律。</p><h3 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h3><p>一个区间可以表示为 <code>[start, end]</code>，前文聊的区间调度问题，需要按 <code>end</code> 排序，以便满足贪心选择性质。而对于区间合并问题，其实按 <code>end</code> 和 <code>start</code> 排序都可以，不过为了清晰起见，我们选择按 <code>start</code> 排序。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/mergeInterval/1.jpg" alt="1"><br><strong>显然，对于几个相交区间合并后的结果区间 <code>x</code>，<code>x.start</code> 一定是这些相交区间中 <code>start</code> 最小的，<code>x.end</code> 一定是这些相交区间中 <code>end</code> 最大的。</strong><br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/mergeInterval/2.jpg" alt="2"><br>由于已经排了序，<code>x.start</code> 很好确定，求 <code>x.end</code> 也很容易，可以类比在数组中找最大值的过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> max_ele = arr[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; arr.length; i++) <br>    max_ele = max(max_ele, arr[i]);<br><span class="hljs-keyword">return</span> max_ele;<br></code></pre></td></tr></table></figure><h3 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># intervals 形如 [[1,3],[2,6]...]</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge</span>(<span class="hljs-params">intervals</span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> intervals: <span class="hljs-keyword">return</span> []<br>    <span class="hljs-comment"># 按区间的 start 升序排列</span><br>    intervals.sort(key=<span class="hljs-keyword">lambda</span> intv: intv[<span class="hljs-number">0</span>])<br>    res = []<br>    res.append(intervals[<span class="hljs-number">0</span>])<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, len(intervals)):<br>        curr = intervals[i]<br>        <span class="hljs-comment"># res 中最后一个元素的引用</span><br>        last = res[<span class="hljs-number">-1</span>]<br>        <span class="hljs-keyword">if</span> curr[<span class="hljs-number">0</span>] &lt;= last[<span class="hljs-number">1</span>]:<br>            <span class="hljs-comment"># 找到最大的 end</span><br>            last[<span class="hljs-number">1</span>] = max(last[<span class="hljs-number">1</span>], curr[<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 处理下一个待合并区间</span><br>            res.append(curr)<br>    <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p>看下动画就一目了然了：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/mergeInterval/3.gif" alt="3"><br>至此，区间合并问题就解决了。本文篇幅短小，因为区间合并只是区间问题的一个类型，后续还有一些区间问题。本想把所有问题类型都总结在一篇文章，但有读者反应，长文只会收藏不会看… 所以还是分成小短文吧，读者有什么看法可以在留言板留言交流。<br>本文终，希望对你有帮助。</p><p><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/FloodFill%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8">上一篇：FloodFill算法详解及应用</a><br><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%8C%BA%E9%97%B4%E4%BA%A4%E9%9B%86%E9%97%AE%E9%A2%98">下一篇：区间调度之区间交集问题</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针技巧</title>
      <link href="2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"/>
      <url>2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="双指针技巧总结"><a href="#双指针技巧总结" class="headerlink" title="双指针技巧总结"></a>双指针技巧总结</h1><p>我把双指针技巧再分为两类，一类是「快慢指针」，一类是「左右指针」。前者解决主要解决链表中的问题，比如典型的判定链表中是否包含环；后者主要解决数组（或者字符串）中的问题，比如二分查找。</p><h3 id="一、快慢指针的常见算法"><a href="#一、快慢指针的常见算法" class="headerlink" title="一、快慢指针的常见算法"></a>一、快慢指针的常见算法</h3><p>快慢指针一般都初始化指向链表的头结点 head，前进时快指针 fast 在前，慢指针 slow 在后，巧妙解决一些链表中的问题。<br><strong>1、判定链表中是否含有环</strong><br>这应该属于链表最基本的操作了，如果读者已经知道这个技巧，可以跳过。<br>单链表的特点是每个节点只知道下一个节点，所以一个指针的话无法判断链表中是否含有环的。<br>如果链表中不含环，那么这个指针最终会遇到空指针 null 表示链表到头了，这还好说，可以判断该链表不含环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (head != <span class="hljs-keyword">null</span>)<br>        head = head.next;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是如果链表中含有环，那么这个指针就会陷入死循环，因为环形数组中没有 null 指针作为尾部节点。<br>经典解法就是用两个指针，一个跑得快，一个跑得慢。如果不含有环，跑得快的那个指针最终会遇到 null，说明链表不含环；如果含有环，快指针最终会超慢指针一圈，和慢指针相遇，说明链表含有环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    ListNode fast, slow;<br>    fast = slow = head;<br>    <span class="hljs-keyword">while</span> (fast != <span class="hljs-keyword">null</span> &amp;&amp; fast.next != <span class="hljs-keyword">null</span>) &#123;<br>        fast = fast.next.next;<br>        slow = slow.next;<br>        <br>        <span class="hljs-keyword">if</span> (fast == slow) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2、已知链表中含有环，返回这个环的起始位置</strong><br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8F%8C%E6%8C%87%E9%92%88/1.png" alt="1"><br>这个问题一点都不困难，有点类似脑筋急转弯，先直接看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">ListNode <span class="hljs-title">detectCycle</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    ListNode fast, slow;<br>    fast = slow = head;<br>    <span class="hljs-keyword">while</span> (fast != <span class="hljs-keyword">null</span> &amp;&amp; fast.next != <span class="hljs-keyword">null</span>) &#123;<br>        fast = fast.next.next;<br>        slow = slow.next;<br>        <span class="hljs-keyword">if</span> (fast == slow) <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-comment">// 上面的代码类似 hasCycle 函数</span><br>    slow = head;<br>    <span class="hljs-keyword">while</span> (slow != fast) &#123;<br>        fast = fast.next;<br>        slow = slow.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> slow;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，当快慢指针相遇时，让其中任一个指针指向头节点，然后让它俩以相同速度前进，再次相遇时所在的节点位置就是环开始的位置。这是为什么呢？<br>第一次相遇时，假设慢指针 slow 走了 k 步，那么快指针 fast 一定走了 2k 步，也就是说比 slow 多走了 k 步（也就是环的长度）。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8F%8C%E6%8C%87%E9%92%88/2.png" alt="2"><br>设相遇点距环的起点的距离为 m，那么环的起点距头结点 head 的距离为 k - m，也就是说如果从 head 前进 k - m 步就能到达环起点。<br>巧的是，如果从相遇点继续前进 k - m 步，也恰好到达环起点。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8F%8C%E6%8C%87%E9%92%88/3.png" alt="3"><br>所以，只要我们把快慢指针中的任一个重新指向 head，然后两个指针同速前进，k - m 步后就会相遇，相遇之处就是环的起点了。<br><strong>3、寻找链表的中点</strong><br>类似上面的思路，我们还可以让快指针一次前进两步，慢指针一次前进一步，当快指针到达链表尽头时，慢指针就处于链表的中间位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (fast != <span class="hljs-keyword">null</span> &amp;&amp; fast.next != <span class="hljs-keyword">null</span>) &#123;<br>    fast = fast.next.next;<br>    slow = slow.next;<br>&#125;<br><span class="hljs-comment">// slow 就在中间位置</span><br><span class="hljs-keyword">return</span> slow;<br></code></pre></td></tr></table></figure><p>当链表的长度是奇数时，slow 恰巧停在中点位置；如果长度是偶数，slow 最终的位置是中间偏右：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8F%8C%E6%8C%87%E9%92%88/center.png" alt="center"><br>寻找链表中点的一个重要作用是对链表进行归并排序。<br>回想数组的归并排序：求中点索引递归地把数组二分，最后合并两个有序数组。对于链表，合并两个有序链表是很简单的，难点就在于二分。<br>但是现在你学会了找到链表的中点，就能实现链表的二分了。关于归并排序的具体内容本文就不具体展开了。</p><p><strong>4、寻找链表的倒数第 k 个元素</strong><br>我们的思路还是使用快慢指针，让快指针先走 k 步，然后快慢指针开始同速前进。这样当快指针走到链表末尾 null 时，慢指针所在的位置就是倒数第 k 个链表节点（为了简化，假设 k 不会超过链表长度）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">ListNode slow, fast;<br>slow = fast = head;<br><span class="hljs-keyword">while</span> (k-- &gt; <span class="hljs-number">0</span>) <br>    fast = fast.next;<br><span class="hljs-keyword">while</span> (fast != <span class="hljs-keyword">null</span>) &#123;<br>    slow = slow.next;<br>    fast = fast.next;<br>&#125;<br><span class="hljs-keyword">return</span> slow;<br></code></pre></td></tr></table></figure><h3 id="二、左右指针的常用算法"><a href="#二、左右指针的常用算法" class="headerlink" title="二、左右指针的常用算法"></a>二、左右指针的常用算法</h3><p>左右指针在数组中实际是指两个索引值，一般初始化为 left = 0, right = nums.length - 1 。<br><strong>1、二分查找</strong><br>前文「二分查找」有详细讲解，这里只写最简单的二分算法，旨在突出它的双指针特性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">int</span> right = nums.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(left &lt;= right) &#123;<br>        <span class="hljs-keyword">int</span> mid = (right + left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(nums[mid] == target)<br>            <span class="hljs-keyword">return</span> mid; <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target)<br>            left = mid + <span class="hljs-number">1</span>; <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target)<br>            right = mid - <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2、两数之和</strong><br>直接看一道 LeetCode 题目吧：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8F%8C%E6%8C%87%E9%92%88/title.png" alt="title"><br>只要数组有序，就应该想到双指针技巧。这道题的解法有点类似二分查找，通过调节 left 和 right 可以调整 sum 的大小：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>        <span class="hljs-keyword">int</span> sum = nums[left] + nums[right];<br>        <span class="hljs-keyword">if</span> (sum == target) &#123;<br>            <span class="hljs-comment">// 题目要求的索引是从 1 开始的</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;left + <span class="hljs-number">1</span>, right + <span class="hljs-number">1</span>&#125;;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &lt; target) &#123;<br>            left++; <span class="hljs-comment">// 让 sum 大一点</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &gt; target) &#123;<br>            right--; <span class="hljs-comment">// 让 sum 小一点</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3、反转数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">reverse</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> right = nums.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>        <span class="hljs-comment">// swap(nums[left], nums[right])</span><br>        <span class="hljs-keyword">int</span> temp = nums[left];<br>        nums[left] = nums[right];<br>        nums[right] = temp;<br>        left++; right--;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4、滑动窗口算法</strong><br>这也许是双指针技巧的最高境界了，如果掌握了此算法，可以解决一大类子字符串匹配的问题，不过「滑动窗口」稍微比上述的这些算法复杂些。<br>幸运的是，这类算法是有框架模板的，而且<a href="%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%8A%80%E5%B7%A7">这篇文章</a>就讲解了「滑动窗口」算法模板，帮大家秒杀几道 LeetCode 子串匹配的问题。</p><p><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%8A%80%E5%B7%A7">上一篇：滑动窗口解题框架</a><br><a href="/2016/01/01/%E6%8A%80%E6%9C%AF/linux%E8%BF%9B%E7%A8%8B">下一篇：Linux的进程、线程、文件描述符是什么</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法详解修订版</title>
      <link href="2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E4%BF%AE%E8%AE%A2%E7%89%88/"/>
      <url>2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E4%BF%AE%E8%AE%A2%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h1 id="回溯算法详解"><a href="#回溯算法详解" class="headerlink" title="回溯算法详解"></a>回溯算法详解</h1><p>这篇文章是很久之前的一篇《回溯算法详解》的进阶版，之前那篇不够清楚，就不必看了，看这篇就行。把框架给你讲清楚，你会发现回溯算法问题都是一个套路。<br>废话不多说，直接上回溯算法框架。<strong>解决一个回溯问题，实际上就是一个决策树的遍历过程</strong>。你只需要思考 3 个问题：<br>1、路径：也就是已经做出的选择。<br>2、选择列表：也就是你当前可以做的选择。<br>3、结束条件：也就是到达决策树底层，无法再做选择的条件。<br>如果你不理解这三个词语的解释，没关系，我们后面会用「全排列」和「N 皇后问题」这两个经典的回溯算法问题来帮你理解这些词语是什么意思，现在你先留着印象。<br>代码方面，回溯算法的框架：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">result = []<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">backtrack</span>(<span class="hljs-params">路径, 选择列表</span>):</span><br>    <span class="hljs-keyword">if</span> 满足结束条件:<br>        result.add(路径)<br>        <span class="hljs-keyword">return</span><br>    <br>    <span class="hljs-keyword">for</span> 选择 <span class="hljs-keyword">in</span> 选择列表:<br>        做选择<br>        backtrack(路径, 选择列表)<br>        撤销选择<br></code></pre></td></tr></table></figure><p><strong>其核心就是 for 循环里面的递归，在递归调用之前「做选择」，在递归调用之后「撤销选择」</strong>，特别简单。<br>什么叫做选择和撤销选择呢，这个框架的底层原理是什么呢？下面我们就通过「全排列」这个问题来解开之前的疑惑，详细探究一下其中的奥妙！</p><h3 id="一、全排列问题"><a href="#一、全排列问题" class="headerlink" title="一、全排列问题"></a>一、全排列问题</h3><p>我们在高中的时候就做过排列组合的数学题，我们也知道 <code>n</code> 个不重复的数，全排列共有 n! 个。<br>PS：<strong>为了简单清晰起见，我们这次讨论的全排列问题不包含重复的数字</strong>。<br>那么我们当时是怎么穷举全排列的呢？比方说给三个数 <code>[1,2,3]</code>，你肯定不会无规律地乱穷举，一般是这样：<br>先固定第一位为 1，然后第二位可以是 2，那么第三位只能是 3；然后可以把第二位变成 3，第三位就只能是 2 了；然后就只能变化第一位，变成 2，然后再穷举后两位……<br>其实这就是回溯算法，我们高中无师自通就会用，或者有的同学直接画出如下这棵回溯树：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/backtracking/1.jpg"><br>只要从根遍历这棵树，记录路径上的数字，其实就是所有的全排列。<strong>我们不妨把这棵树称为回溯算法的「决策树」</strong>。<br><strong>为啥说这是决策树呢，因为你在每个节点上其实都在做决策</strong>。比如说你站在下图的红色节点上：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/backtracking/2.jpg"><br>你现在就在做决策，可以选择 1 那条树枝，也可以选择 3 那条树枝。为啥只能在 1 和 3 之中选择呢？因为 2 这个树枝在你身后，这个选择你之前做过了，而全排列是不允许重复使用数字的。<br><strong>现在可以解答开头的几个名词：<code>[2]</code> 就是「路径」，记录你已经做过的选择；<code>[1,3]</code> 就是「选择列表」，表示你当前可以做出的选择；「结束条件」就是遍历到树的底层，在这里就是选择列表为空的时候</strong>。<br>如果明白了这几个名词，<strong>可以把「路径」和「选择」列表作为决策树上每个节点的属性</strong>，比如下图列出了几个节点的属性：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/backtracking/3.jpg"><br><strong>我们定义的 <code>backtrack</code> 函数其实就像一个指针，在这棵树上游走，同时要正确维护每个节点的属性，每当走到树的底层，其「路径」就是一个全排列</strong>。<br>再进一步，如何遍历一棵树？这个应该不难吧。回忆一下之前「学习数据结构的框架思维」写过，各种搜索问题其实都是树的遍历问题，而多叉树的遍历框架就是这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (TreeNode child : root.childern)<br>        <span class="hljs-comment">// 前序遍历需要的操作</span><br>        traverse(child);<br>        <span class="hljs-comment">// 后序遍历需要的操作</span><br>&#125;<br></code></pre></td></tr></table></figure><p>而所谓的前序遍历和后序遍历，他们只是两个很有用的时间点，我给你画张图你就明白了：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/backtracking/4.jpg"><br><strong>前序遍历的代码在进入某一个节点之前的那个时间点执行，后序遍历代码在离开某个节点之后的那个时间点执行</strong>。<br>回想我们刚才说的，「路径」和「选择」是每个节点的属性，函数在树上游走要正确维护节点的属性，那么就要在这两个特殊时间点搞点动作：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/backtracking/5.jpg"><br>现在，你是否理解了回溯算法的这段核心框架？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> 选择 <span class="hljs-keyword">in</span> 选择列表:<br>    <span class="hljs-comment"># 做选择</span><br>    将该选择从选择列表移除<br>    路径.add(选择)<br>    backtrack(路径, 选择列表)<br>    <span class="hljs-comment"># 撤销选择</span><br>    路径.remove(选择)<br>    将该选择再加入选择列表<br></code></pre></td></tr></table></figure><p><strong>我们只要在递归之前做出选择，在递归之后撤销刚才的选择</strong>，就能正确得到每个节点的选择列表和路径。<br>下面，直接看全排列代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><span class="hljs-comment">/* 主函数，输入一组不重复的数字，返回它们的全排列 */</span><br>List&lt;List&lt;Integer&gt;&gt; permute(<span class="hljs-keyword">int</span>[] nums) &#123;<br>    <span class="hljs-comment">// 记录「路径」</span><br>    LinkedList&lt;Integer&gt; track = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    backtrack(nums, track);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-comment">// 路径：记录在 track 中</span><br><span class="hljs-comment">// 选择列表：nums 中不存在于 track 的那些元素</span><br><span class="hljs-comment">// 结束条件：nums 中的元素全都在 track 中出现</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, LinkedList&lt;Integer&gt; track)</span> </span>&#123;<br>    <span class="hljs-comment">// 触发结束条件</span><br>    <span class="hljs-keyword">if</span> (track.size() == nums.length) &#123;<br>        res.add(<span class="hljs-keyword">new</span> LinkedList(track));<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        <span class="hljs-comment">// 排除不合法的选择</span><br>        <span class="hljs-keyword">if</span> (track.contains(nums[i]))<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-comment">// 做选择</span><br>        track.add(nums[i]);<br>        <span class="hljs-comment">// 进入下一层决策树</span><br>        backtrack(nums, track);<br>        <span class="hljs-comment">// 取消选择</span><br>        track.removeLast();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们这里稍微做了些变通，没有显式记录「选择列表」，而是通过 <code>nums</code> 和 <code>track</code> 推导出当前的选择列表：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/backtracking/6.jpg"><br>至此，我们就通过全排列问题详解了回溯算法的底层原理。当然，这个算法解决全排列不是很高效，应为对链表使用 <code>contains</code> 方法需要 O(N) 的时间复杂度。有更好的方法通过交换元素达到目的，但是难理解一些，这里就不写了，有兴趣可以自行搜索一下。<br>但是必须说明的是，不管怎么优化，都符合回溯框架，而且时间复杂度都不可能低于 O(N!)，因为穷举整棵决策树是无法避免的。<strong>这也是回溯算法的一个特点，不像动态规划存在重叠子问题可以优化，回溯算法就是纯暴力穷举，复杂度一般都很高</strong>。<br>明白了全排列问题，就可以直接套回溯算法框架了，下面简单看看 N 皇后问题。</p><h3 id="二、N-皇后问题"><a href="#二、N-皇后问题" class="headerlink" title="二、N 皇后问题"></a>二、N 皇后问题</h3><p>这个问题很经典了，简单解释一下：给你一个 N×N 的棋盘，让你放置 N 个皇后，使得它们不能互相攻击。<br>PS：皇后可以攻击同一行、同一列、左上左下右上右下四个方向的任意单位。<br>这个问题本质上跟全排列问题差不多，决策树的每一层表示棋盘上的每一行；每个节点可以做出的选择是，在该行的任意一列放置一个皇后。<br>直接套用框架:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;&gt; res;<br><span class="hljs-comment">/* 输入棋盘边长 n，返回所有合法的放置 */</span><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;&gt; <span class="hljs-title">solveNQueens</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">// &#x27;.&#x27; 表示空，&#x27;Q&#x27; 表示皇后，初始化空棋盘。</span><br>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">board</span><span class="hljs-params">(n, <span class="hljs-built_in">string</span>(n, <span class="hljs-string">&#x27;.&#x27;</span>))</span></span>;<br>    backtrack(board, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-comment">// 路径：board 中小于 row 的那些行都已经成功放置了皇后</span><br><span class="hljs-comment">// 选择列表：第 row 行的所有列都是放置皇后的选择</span><br><span class="hljs-comment">// 结束条件：row 超过 board 的最后一行</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;&amp; board, <span class="hljs-keyword">int</span> row)</span> </span>&#123;<br>    <span class="hljs-comment">// 触发结束条件</span><br>    <span class="hljs-keyword">if</span> (row == board.size()) &#123;<br>        res.push_back(board);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span> n = board[row].size();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> col = <span class="hljs-number">0</span>; col &lt; n; col++) &#123;<br>        <span class="hljs-comment">// 排除不合法选择</span><br>        <span class="hljs-keyword">if</span> (!isValid(board, row, col)) <br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-comment">// 做选择</span><br>        board[row][col] = <span class="hljs-string">&#x27;Q&#x27;</span>;<br>        <span class="hljs-comment">// 进入下一行决策</span><br>        backtrack(board, row + <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 撤销选择</span><br>        board[row][col] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这部分主要代码，其实跟全排列问题差不多，<code>isValid</code> 函数的实现也很简单：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* 是否可以在 board[row][col] 放置皇后？ */</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isValid</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;&amp; board, <span class="hljs-keyword">int</span> row, <span class="hljs-keyword">int</span> col)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = board.size();<br>    <span class="hljs-comment">// 检查列是否有皇后互相冲突</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (board[i][col] == <span class="hljs-string">&#x27;Q&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">// 检查右上方是否有皇后互相冲突</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = row - <span class="hljs-number">1</span>, j = col + <span class="hljs-number">1</span>; <br>            i &gt;= <span class="hljs-number">0</span> &amp;&amp; j &lt; n; i--, j++) &#123;<br>        <span class="hljs-keyword">if</span> (board[i][j] == <span class="hljs-string">&#x27;Q&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">// 检查左上方是否有皇后互相冲突</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = row - <span class="hljs-number">1</span>, j = col - <span class="hljs-number">1</span>;<br>            i &gt;= <span class="hljs-number">0</span> &amp;&amp; j &gt;= <span class="hljs-number">0</span>; i--, j--) &#123;<br>        <span class="hljs-keyword">if</span> (board[i][j] == <span class="hljs-string">&#x27;Q&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>函数 <code>backtrack</code> 依然像个在决策树上游走的指针，通过 <code>row</code> 和 <code>col</code> 就可以表示函数遍历到的位置，通过 <code>isValid</code> 函数可以将不符合条件的情况剪枝：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/backtracking/7.jpg"><br>如果直接给你这么一大段解法代码，可能是懵逼的。但是现在明白了回溯算法的框架套路，还有啥难理解的呢？无非是改改做选择的方式，排除不合法选择的方式而已，只要框架存于心，你面对的只剩下小问题了。<br>当 <code>N = 8</code> 时，就是八皇后问题，数学大佬高斯穷尽一生都没有数清楚八皇后问题到底有几种可能的放置方法，但是我们的算法只需要一秒就可以算出来所有可能的结果。<br>不过真的不怪高斯。这个问题的复杂度确实非常高，看看我们的决策树，虽然有 <code>isValid</code> 函数剪枝，但是最坏时间复杂度仍然是 O(N^(N+1))，而且无法优化。如果 <code>N = 10</code> 的时候，计算就已经很耗时了。<br><strong>有的时候，我们并不想得到所有合法的答案，只想要一个答案，怎么办呢</strong>？比如解数独的算法，找所有解法复杂度太高，只要找到一种解法就可以。<br>其实特别简单，只要稍微修改一下回溯算法的代码即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 函数找到一个答案后就返回 true</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;&amp; board, <span class="hljs-keyword">int</span> row)</span> </span>&#123;<br>    <span class="hljs-comment">// 触发结束条件</span><br>    <span class="hljs-keyword">if</span> (row == board.size()) &#123;<br>        res.push_back(board);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    ...<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> col = <span class="hljs-number">0</span>; col &lt; n; col++) &#123;<br>        ...<br>        board[row][col] = <span class="hljs-string">&#x27;Q&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (backtrack(board, row + <span class="hljs-number">1</span>))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <br>        board[row][col] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样修改后，只要找到一个答案，for 循环的后续递归穷举都会被阻断。也许你可以在 N 皇后问题的代码框架上，稍加修改，写一个解数独的算法？</p><h3 id="三、最后总结"><a href="#三、最后总结" class="headerlink" title="三、最后总结"></a>三、最后总结</h3><p>回溯算法就是个多叉树的遍历问题，关键就是在前序遍历和后序遍历的位置做一些操作，算法框架如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">backtrack</span>(<span class="hljs-params">...</span>):</span><br>    <span class="hljs-keyword">for</span> 选择 <span class="hljs-keyword">in</span> 选择列表:<br>        做选择<br>        backtrack(...)<br>        撤销选择<br></code></pre></td></tr></table></figure><p><strong>写 <code>backtrack</code> 函数时，需要维护走过的「路径」和当前可以做的「选择列表」，当触发「结束条件」时，将「路径」记入结果集</strong>。<br>其实想想看，回溯算法和动态规划是不是有点像呢？我们在动态规划系列文章中多次强调，动态规划的三个需要明确的点就是「状态」「选择」和「base case」，是不是就对应着走过的「路径」，当前的「选择列表」和「结束条件」？<br>某种程度上说，动态规划的暴力求解阶段就是回溯算法。只是有的问题具有重叠子问题性质，可以用 dp table 或者备忘录优化，将递归树大幅剪枝，这就变成了动态规划。而今天的两个问题，都没有重叠子问题，也就是回溯算法问题了，复杂度非常高是不可避免的。</p><p><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E6%9C%80%E4%BC%98%E5%AD%90%E7%BB%93%E6%9E%84">上一篇：动态规划答疑篇</a><br><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E8%AF%A6%E8%A7%A3">下一篇：二分查找解题框架</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串乘法</title>
      <link href="2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%98%E6%B3%95/"/>
      <url>2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%98%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串乘法"><a href="#字符串乘法" class="headerlink" title="字符串乘法"></a>字符串乘法</h1><p>对于比较小的数字，做运算可以直接使用编程语言提供的运算符，但是如果相乘的两个因数非常大，语言提供的数据类型可能就会溢出。一种替代方案就是，运算数以字符串的形式输入，然后模仿我们小学学习的乘法算术过程计算出结果，并且也用字符串表示。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%98%E6%B3%95/title.png"><br>需要注意的是，<code>num1</code> 和 <code>num2</code> 可以非常长，所以不可以把他们直接转成整型然后运算，唯一的思路就是模仿我们手算乘法。<br>比如说我们手算 <code>123 × 45</code>，应该会这样计算：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%98%E6%B3%95/1.jpg"><br>计算 <code>123 × 5</code>，再计算 <code>123 × 4</code>，最后错一位相加。这个流程恐怕小学生都可以熟练完成，但是你是否能<strong>把这个运算过程进一步机械化</strong>，写成一套算法指令让没有任何智商的计算机来执行呢？<br>你看这个简单过程，其中涉及乘法进位，涉及错位相加，还涉及加法进位；而且还有一些不易察觉的问题，比如说两位数乘以两位数，结果可能是四位数，也可能是三位数，你怎么想出一个标准化的处理方式？这就是算法的魅力，如果没有计算机思维，简单的问题可能都没办法自动化处理。<br>首先，我们这种手算方式还是太「高级」了，我们要再「低级」一点，<code>123 × 5</code> 和 <code>123 × 4</code> 的过程还可以进一步分解，最后再相加：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%98%E6%B3%95/2.jpg"><br>现在 <code>123</code> 并不大，如果是个很大的数字的话，是无法直接计算乘积的。我们可以用一个数组在底下接收相加结果：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%98%E6%B3%95/3.jpg"><br>整个计算过程大概是这样，<strong>有两个指针 <code>i，j</code> 在 <code>num1</code> 和 <code>num2</code> 上游走，计算乘积，同时将乘积叠加到 <code>res</code> 的正确位置</strong>：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%98%E6%B3%95/4.gif"><br>现在还有一个关键问题，如何将乘积叠加到 <code>res</code> 的正确位置，或者说，如何通过 <code>i，j</code> 计算 <code>res</code> 的对应索引呢？<br>其实，细心观察之后就发现，**<code>num1[i]</code> 和 <code>num2[j]</code> 的乘积对应的就是 <code>res[i+j]</code> 和 <code>res[i+j+1]</code> 这两个位置**。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%98%E6%B3%95/6.jpg"><br>明白了这一点，就可以用代码模仿出这个计算过程了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">string <span class="hljs-title">multiply</span><span class="hljs-params">(string num1, string num2)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> m = num1.size(), n = num2.size();<br>    <span class="hljs-comment">// 结果最多为 m + n 位数</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">res</span><span class="hljs-params">(m + n, <span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-comment">// 从个位数开始逐位相乘</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = m - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = n - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>            <span class="hljs-keyword">int</span> mul = (num1[i]-<span class="hljs-string">&#x27;0&#x27;</span>) * (num2[j]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>            <span class="hljs-comment">// 乘积在 res 对应的索引位置</span><br>            <span class="hljs-keyword">int</span> p1 = i + j, p2 = i + j + <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 叠加到 res 上</span><br>            <span class="hljs-keyword">int</span> sum = mul + res[p2];<br>            res[p2] = sum % <span class="hljs-number">10</span>;<br>            res[p1] += sum / <span class="hljs-number">10</span>;<br>        &#125;<br>    <span class="hljs-comment">// 结果前缀可能存的 0（未使用的位）</span><br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; res.size() &amp;&amp; res[i] == <span class="hljs-number">0</span>)<br>        i++;<br>    <span class="hljs-comment">// 将计算结果转化成字符串</span><br>    string str;<br>    <span class="hljs-keyword">for</span> (; i &lt; res.size(); i++)<br>        str.push_back(<span class="hljs-string">&#x27;0&#x27;</span> + res[i]);<br>    <br>    <span class="hljs-keyword">return</span> str.size() == <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;0&quot;</span> : str;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，字符串乘法算法就完成了。<br><strong>总结一下</strong>，我们习以为常的一些思维方式，在计算机看来是非常难以做到的。比如说我们习惯的算术流程并不复杂，但是如果让你再进一步，翻译成代码逻辑，并不简单。算法需要将计算流程再简化，通过边算边叠加的方式来得到结果。<br>俗话教育我们，不要陷入思维定式，不要程序化，要发散思维，要创新。但我觉得程序化并不是坏事，可以大幅提高效率，减小失误率。算法不就是一套程序化的思维吗，只有程序化才能让计算机帮助我们解决复杂问题呀！<br>也许算法就是一种<strong>寻找思维定式的思维</strong>吧，希望本文对你有帮助。</p><p><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%89%8D%E7%BC%80%E5%92%8C%E6%8A%80%E5%B7%A7">上一篇：前缀和技巧</a><br><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/FloodFill%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8">下一篇：FloodFill算法详解及应用</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习数据结构和算法的高效方法</title>
      <link href="2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%AD%A6%E4%B9%A0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E7%9A%84%E9%AB%98%E6%95%88%E6%96%B9%E6%B3%95/"/>
      <url>2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%AD%A6%E4%B9%A0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E7%9A%84%E9%AB%98%E6%95%88%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="学习数据结构和算法的框架思维"><a href="#学习数据结构和算法的框架思维" class="headerlink" title="学习数据结构和算法的框架思维"></a>学习数据结构和算法的框架思维</h1><p>这是好久之前的一篇文章「学习数据结构和算法的框架思维」的修订版。之前那篇文章收到广泛好评，没看过也没关系，这篇文章会涵盖之前的所有内容，并且会举很多代码的实例，教你如何使用框架思维。<br>首先，这里讲的都是普通的数据结构，咱不是搞算法竞赛的，野路子出生，我只会解决常规的问题。另外，以下是我个人的经验的总结，没有哪本算法书会写这些东西，所以请读者试着理解我的角度，别纠结于细节问题，因为这篇文章就是希望对数据结构和算法建立一个框架性的认识。<br>从整体到细节，自顶向下，从抽象到具体的框架思维是通用的，不只是学习数据结构和算法，学习其他任何知识都是高效的。</p><h3 id="一、数据结构的存储方式"><a href="#一、数据结构的存储方式" class="headerlink" title="一、数据结构的存储方式"></a>一、数据结构的存储方式</h3><p><strong>数据结构的存储方式只有两种：数组（顺序存储）和链表（链式存储）</strong>。<br>这句话怎么理解，不是还有散列表、栈、队列、堆、树、图等等各种数据结构吗？<br>我们分析问题，一定要有递归的思想，自顶向下，从抽象到具体。你上来就列出这么多，那些都属于「上层建筑」，而数组和链表才是「结构基础」。因为那些多样化的数据结构，究其源头，都是在链表或者数组上的特殊操作，API 不同而已。<br>比如说「队列」、「栈」这两种数据结构既可以使用链表也可以使用数组实现。用数组实现，就要处理扩容缩容的问题；用链表实现，没有这个问题，但需要更多的内存空间存储节点指针。<br>「图」的两种表示方法，邻接表就是链表，邻接矩阵就是二维数组。邻接矩阵判断连通性迅速，并可以进行矩阵运算解决一些问题，但是如果图比较稀疏的话很耗费空间。邻接表比较节省空间，但是很多操作的效率上肯定比不过邻接矩阵。<br>「散列表」就是通过散列函数把键映射到一个大数组里。而且对于解决散列冲突的方法，拉链法需要链表特性，操作简单，但需要额外的空间存储指针；线性探查法就需要数组特性，以便连续寻址，不需要指针的存储空间，但操作稍微复杂些。<br>「树」，用数组实现就是「堆」，因为「堆」是一个完全二叉树，用数组存储不需要节点指针，操作也比较简单；用链表实现就是很常见的那种「树」，因为不一定是完全二叉树，所以不适合用数组存储。为此，在这种链表「树」结构之上，又衍生出各种巧妙的设计，比如二叉搜索树、AVL 树、红黑树、区间树、B 树等等，以应对不同的问题。<br>了解 Redis 数据库的朋友可能也知道，Redis 提供列表、字符串、集合等等几种常用数据结构，但是对于每种数据结构，底层的存储方式都至少有两种，以便于根据存储数据的实际情况使用合适的存储方式。<br>综上，数据结构种类很多，甚至你也可以发明自己的数据结构，但是底层存储无非数组或者链表，<strong>二者的优缺点如下</strong>：<br><strong>数组</strong>由于是紧凑连续存储,可以随机访问，通过索引快速找到对应元素，而且相对节约存储空间。但正因为连续存储，内存空间必须一次性分配够，所以说数组如果要扩容，需要重新分配一块更大的空间，再把数据全部复制过去，时间复杂度 O(N)；而且你如果想在数组中间进行插入和删除，每次必须搬移后面的所有数据以保持连续，时间复杂度 O(N)。<br><strong>链表</strong>因为元素不连续，而是靠指针指向下一个元素的位置，所以不存在数组的扩容问题；如果知道某一元素的前驱和后驱，操作指针即可删除该元素或者插入新元素，时间复杂度 O(1)。但是正因为存储空间不连续，你无法根据一个索引算出对应元素的地址，所以不能随机访问；而且由于每个元素必须存储指向前后元素位置的指针，会消耗相对更多的储存空间。</p><h3 id="二、数据结构的基本操作"><a href="#二、数据结构的基本操作" class="headerlink" title="二、数据结构的基本操作"></a>二、数据结构的基本操作</h3><p>对于任何数据结构，其基本操作无非遍历 + 访问，再具体一点就是：增删查改。<br><strong>数据结构种类很多，但它们存在的目的都是在不同的应用场景，尽可能高效地增删查改</strong>。话说这不就是数据结构的使命么？<br>如何遍历 + 访问？我们仍然从最高层来看，各种数据结构的遍历 + 访问无非两种形式：线性的和非线性的。<br>线性就是 for/while 迭代为代表，非线性就是递归为代表。再具体一步，无非以下几种框架：<br>数组遍历框架，典型的线性迭代结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-comment">// 迭代访问 arr[i]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>链表遍历框架，兼具迭代和递归结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 基本的单链表节点 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> val;<br>    ListNode next;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (ListNode p = head; p != <span class="hljs-keyword">null</span>; p = p.next) &#123;<br>        <span class="hljs-comment">// 迭代访问 p.val</span><br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    <span class="hljs-comment">// 递归访问 head.val</span><br>    traverse(head.next)<br>&#125;<br></code></pre></td></tr></table></figure><p>二叉树遍历框架，典型的非线性递归遍历结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 基本的二叉树节点 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> val;<br>    TreeNode left, right;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    traverse(root.left)<br>    traverse(root.right)<br>&#125;<br></code></pre></td></tr></table></figure><p>你看二叉树的递归遍历方式和链表的递归遍历方式，相似不？再看看二叉树结构和单链表结构，相似不？如果再多几条叉，N 叉树你会不会遍历？<br>二叉树框架可以扩展为 N 叉树的遍历框架：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 基本的 N 叉树节点 */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> val;<br>    TreeNode[] children;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (TreeNode child : root.children)<br>        traverse(child)<br>&#125;<br></code></pre></td></tr></table></figure><p>N 叉树的遍历又可以扩展为图的遍历，因为图就是好几 N 叉棵树的结合体。你说图是可能出现环的？这个很好办，用个布尔数组 visited 做标记就行了，这里就不写代码了。<br><strong>所谓框架，就是套路。不管增删查改，这些代码都是永远无法脱离的结构，你可以把这个结构作为大纲，根据具体问题在框架上添加代码就行了，下面会具体举例</strong>。</p><h3 id="三、算法刷题指南"><a href="#三、算法刷题指南" class="headerlink" title="三、算法刷题指南"></a>三、算法刷题指南</h3><p>首先要明确的是，<strong>数据结构是工具，算法是通过合适的工具解决特定问题的方法</strong>。也就是说，学习算法之前，最起码得了解那些常用的数据结构，了解它们的特性和缺陷。<br>那么该如何在 LeetCode 刷题呢？之前的文章<a href="%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF">算法学习之路</a>写过一些，什么按标签刷，坚持下去云云。现在距那篇文章已经过去将近一年了，我不说那些不痛不痒的话，直接说具体的建议：<br><strong>先刷二叉树，先刷二叉树，先刷二叉树</strong>！<br>这是我这刷题一年的亲身体会，下图是去年十月份的提交截图：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/others/leetcode.jpeg"><br>公众号文章的阅读数据显示，大部分人对数据结构相关的算法文章不感兴趣，而是更关心动规回溯分治等等技巧。为什么要先刷二叉树呢，<strong>因为二叉树是最容易培养框架思维的，而且大部分算法技巧，本质上都是树的遍历问题</strong>。<br>刷二叉树看到题目没思路？根据很多读者的问题，其实大家不是没思路，只是没有理解我们说的「框架」是什么。<strong>不要小看这几行破代码，几乎所有二叉树的题目都是一套这个框架就出来了</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    <span class="hljs-comment">// 前序遍历</span><br>    traverse(root.left)<br>    <span class="hljs-comment">// 中序遍历</span><br>    traverse(root.right)<br>    <span class="hljs-comment">// 后序遍历</span><br>&#125;<br></code></pre></td></tr></table></figure><p>比如说我随便拿几道题的解法出来，不用管具体的代码逻辑，只要看看框架在其中是如何发挥作用的就行。<br>LeetCode 124 题，难度 Hard，让你求二叉树中最大路径和，主要代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> ans = INT_MIN;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">oneSideMax</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> left = max(<span class="hljs-number">0</span>, oneSideMax(root-&gt;left));<br>    <span class="hljs-keyword">int</span> right = max(<span class="hljs-number">0</span>, oneSideMax(root-&gt;right));<br>    ans = max(ans, left + right + root-&gt;val);<br>    <span class="hljs-keyword">return</span> max(left, right) + root-&gt;val;<br>&#125;<br></code></pre></td></tr></table></figure><p>你看，这就是个后序遍历嘛。<br>LeetCode 105 题，难度 Medium，让你根据前序遍历和中序遍历的结果还原一棵二叉树，很经典的问题吧，主要代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">TreeNode <span class="hljs-title">buildTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] preorder, <span class="hljs-keyword">int</span> preStart, <span class="hljs-keyword">int</span> preEnd, </span></span><br><span class="hljs-function"><span class="hljs-params">    <span class="hljs-keyword">int</span>[] inorder, <span class="hljs-keyword">int</span> inStart, <span class="hljs-keyword">int</span> inEnd, Map&lt;Integer, Integer&gt; inMap)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(preStart &gt; preEnd || inStart &gt; inEnd) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    TreeNode root = <span class="hljs-keyword">new</span> TreeNode(preorder[preStart]);<br>    <span class="hljs-keyword">int</span> inRoot = inMap.get(root.val);<br>    <span class="hljs-keyword">int</span> numsLeft = inRoot - inStart;<br>    root.left = buildTree(preorder, preStart + <span class="hljs-number">1</span>, preStart + numsLeft, <br>                          inorder, inStart, inRoot - <span class="hljs-number">1</span>, inMap);<br>    root.right = buildTree(preorder, preStart + numsLeft + <span class="hljs-number">1</span>, preEnd, <br>                          inorder, inRoot + <span class="hljs-number">1</span>, inEnd, inMap);<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><p>不要看这个函数的参数很多，只是为了控制数组索引而已，本质上该算法也就是一个前序遍历。<br>LeetCode 99 题，难度 Hard，恢复一棵 BST，主要代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(TreeNode* node)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!node) <span class="hljs-keyword">return</span>;<br>    traverse(node-&gt;left);<br>    <span class="hljs-keyword">if</span> (node-&gt;val &lt; prev-&gt;val) &#123;<br>        s = (s == <span class="hljs-literal">NULL</span>) ? prev : s;<br>        t = node;<br>    &#125;<br>    prev = node;<br>    traverse(node-&gt;right);<br>&#125;<br></code></pre></td></tr></table></figure><p>这不就是个中序遍历嘛，对于一棵 BST 中序遍历意味着什么，应该不需要解释了吧。<br>你看，Hard 难度的题目不过如此，而且还这么有规律可循，只要把框架写出来，然后往相应的位置加东西就行了，这不就是思路吗。<br>对于一个理解二叉树的人来说，刷一道二叉树的题目花不了多长时间。那么如果你对刷题无从下手或者有畏惧心理，不妨从二叉树下手，前 10 道也许有点难受；结合框架再做 20 道，也许你就有点自己的理解了；刷完整个专题，再去做什么回溯动规分治专题，<strong>你就会发现只要涉及递归的问题，都是树的问题</strong>。<br>再举例吧，说几道我们之前文章写过的问题。<br><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3%E8%BF%9B%E9%98%B6">动态规划详解</a>说过凑零钱问题，暴力解法就是遍历一棵 N 叉树：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3%E8%BF%9B%E9%98%B6/5.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">coinChange</span>(<span class="hljs-params">coins: List[int], amount: int</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dp</span>(<span class="hljs-params">n</span>):</span><br>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>        res = float(<span class="hljs-string">&#x27;INF&#x27;</span>)<br>        <span class="hljs-keyword">for</span> coin <span class="hljs-keyword">in</span> coins:<br>            subproblem = dp(n - coin)<br>            <span class="hljs-comment"># 子问题无解，跳过</span><br>            <span class="hljs-keyword">if</span> subproblem == <span class="hljs-number">-1</span>: <span class="hljs-keyword">continue</span><br>            res = min(res, <span class="hljs-number">1</span> + subproblem)<br>        <span class="hljs-keyword">return</span> res <span class="hljs-keyword">if</span> res != float(<span class="hljs-string">&#x27;INF&#x27;</span>) <span class="hljs-keyword">else</span> <span class="hljs-number">-1</span><br>    <br>    <span class="hljs-keyword">return</span> dp(amount)<br></code></pre></td></tr></table></figure><p>这么多代码看不懂咋办？直接提取出框架，就能看出核心思路了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 不过是一个 N 叉树的遍历问题而已</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dp</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">for</span> coin <span class="hljs-keyword">in</span> coins:<br>        dp(n - coin)<br></code></pre></td></tr></table></figure><p>其实很多动态规划问题就是在遍历一棵树，你如果对树的遍历操作烂熟于心，起码知道怎么把思路转化成代码，也知道如何提取别人解法的核心思路。<br>再看看回溯算法，前文<a href="%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E4%BF%AE%E8%AE%A2%E7%89%88">回溯算法详解</a>干脆直接说了，回溯算法就是个 N 叉树的前后序遍历问题，没有例外。<br>比如 N 皇后问题吧，主要代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, LinkedList&lt;Integer&gt; track)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (track.size() == nums.length) &#123;<br>        res.add(<span class="hljs-keyword">new</span> LinkedList(track));<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (track.contains(nums[i]))<br>            <span class="hljs-keyword">continue</span>;<br>        track.add(nums[i]);<br>        <span class="hljs-comment">// 进入下一层决策树</span><br>        backtrack(nums, track);<br>        track.removeLast();<br>    &#125;<br><span class="hljs-comment">/* 提取出 N 叉树遍历框架 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, LinkedList&lt;Integer&gt; track)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        backtrack(nums, track);<br>&#125;<br></code></pre></td></tr></table></figure><p>N 叉树的遍历框架，找出来了把～你说，树这种结构重不重要？<br><strong>综上，对于畏惧算法的朋友来说，可以先刷树的相关题目，试着从框架上看问题，而不要纠结于细节问题</strong>。<br>纠结细节问题，就比如纠结 i 到底应该加到 n 还是加到 n - 1，这个数组的大小到底应该开 n 还是 n + 1 ？<br>从框架上看问题，就是像我们这样基于框架进行抽取和扩展，既可以在看别人解法时快速理解核心逻辑，也有助于找到我们自己写解法时的思路方向。<br>当然，如果细节出错，你得不到正确的答案，但是只要有框架，你再错也错不到哪去，因为你的方向是对的。<br>但是，你要是心中没有框架，那么你根本无法解题，给了你答案，你也不会发现这就是个树的遍历问题。<br>这种思维是很重要的，<a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3%E8%BF%9B%E9%98%B6">动态规划详解</a>中总结的找状态转移方程的几步流程，有时候按照流程写出解法，说实话我自己都不知道为啥是对的，反正它就是对了。。。<br><strong>这就是框架的力量，能够保证你在快睡着的时候，依然能写出正确的程序；就算你啥都不会，都能比别人高一个级别。</strong></p><h3 id="四、总结几句"><a href="#四、总结几句" class="headerlink" title="四、总结几句"></a>四、总结几句</h3><p>数据结构的基本存储方式就是链式和顺序两种，基本操作就是增删查改，遍历方式无非迭代和递归。<br>刷算法题建议从「树」分类开始刷，结合框架思维，把这几十道题刷完，对于树结构的理解应该就到位了。这时候去看回溯、动规、分治等算法专题，对思路的理解可能会更加深刻一些。</p><p><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97">上一篇：最长公共子序列</a><br><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%954">下一篇：学习数据结构和算法读什么书</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的位操作</title>
      <link href="2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BD%8D%E6%93%8D%E4%BD%9C/"/>
      <url>2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BD%8D%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="常用的位操作"><a href="#常用的位操作" class="headerlink" title="常用的位操作"></a>常用的位操作</h1><p>本文分两部分，第一部分列举几个有趣的位操作，第二部分讲解算法中常用的 n &amp; (n - 1) 操作，顺便把用到这个技巧的算法题列出来讲解一下。因为位操作很简单，所以假设读者已经了解与、或、异或这三种基本操作。<br>位操作（Bit Manipulation）可以玩出很多奇技淫巧，但是这些技巧大部分都过于晦涩，没必要深究，读者只要记住一些有用的操作即可。</p><h3 id="一、几个有趣的位操作"><a href="#一、几个有趣的位操作" class="headerlink" title="一、几个有趣的位操作"></a>一、几个有趣的位操作</h3><ol><li>利用或操作 <code>|</code> 和空格将英文字符转换为小写<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">(<span class="hljs-string">&#x27;a&#x27;</span> | <span class="hljs-string">&#x27; &#x27;</span>) = <span class="hljs-string">&#x27;a&#x27;</span><br>(<span class="hljs-string">&#x27;A&#x27;</span> | <span class="hljs-string">&#x27; &#x27;</span>) = <span class="hljs-string">&#x27;a&#x27;</span><br></code></pre></td></tr></table></figure></li><li>利用与操作 <code>&amp;</code> 和下划线将英文字符转换为大写<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">(<span class="hljs-string">&#x27;b&#x27;</span> &amp; <span class="hljs-string">&#x27;_&#x27;</span>) = <span class="hljs-string">&#x27;B&#x27;</span><br>(<span class="hljs-string">&#x27;B&#x27;</span> &amp; <span class="hljs-string">&#x27;_&#x27;</span>) = <span class="hljs-string">&#x27;B&#x27;</span><br></code></pre></td></tr></table></figure></li><li>利用异或操作 <code>^</code> 和空格进行英文字符大小写互换<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">(<span class="hljs-string">&#x27;d&#x27;</span> ^ <span class="hljs-string">&#x27; &#x27;</span>) = <span class="hljs-string">&#x27;D&#x27;</span><br>(<span class="hljs-string">&#x27;D&#x27;</span> ^ <span class="hljs-string">&#x27; &#x27;</span>) = <span class="hljs-string">&#x27;d&#x27;</span><br></code></pre></td></tr></table></figure>PS：以上操作能够产生奇特效果的原因在于 ASCII 编码。字符其实就是数字，恰巧这些字符对应的数字通过位运算就能得到正确的结果，有兴趣的读者可以查 ASCII 码表自己算算，本文就不展开讲了。</li><li>判断两个数是否异号<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> x = <span class="hljs-number">-1</span>, y = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">bool</span> f = ((x ^ y) &lt; <span class="hljs-number">0</span>); <span class="hljs-comment">// true</span><br><span class="hljs-keyword">int</span> x = <span class="hljs-number">3</span>, y = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">bool</span> f = ((x ^ y) &lt; <span class="hljs-number">0</span>); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure>PS：这个技巧还是很实用的，利用的是补码编码的符号位。如果不用位运算来判断是否异号，需要使用 if else 分支，还挺麻烦的。读者可能想利用乘积或者商来判断两个数是否异号，但是这种处理方式可能造成溢出，从而出现错误。（关于补码编码和溢出，参见前文）</li><li>交换两个数<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">2</span>;<br>a ^= b;<br>b ^= a;<br>a ^= b;<br><span class="hljs-comment">// 现在 a = 2, b = 1</span><br></code></pre></td></tr></table></figure></li><li>加一<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> n = <span class="hljs-number">1</span>;<br>n = -~n;<br><span class="hljs-comment">// 现在 n = 2</span><br></code></pre></td></tr></table></figure></li><li>减一<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> n = <span class="hljs-number">2</span>;<br>n = ~-n;<br><span class="hljs-comment">// 现在 n = 1</span><br></code></pre></td></tr></table></figure>PS：上面这三个操作就纯属装逼用的，没啥实际用处，大家了解了解乐呵一下就行。<h3 id="二、算法常用操作-n-amp-n-1"><a href="#二、算法常用操作-n-amp-n-1" class="headerlink" title="二、算法常用操作 n&amp;(n-1)"></a>二、算法常用操作 n&amp;(n-1)</h3>这个操作是算法中常见的，作用是消除数字 n 的二进制表示中的最后一个 1。<br>看个图就很容易理解了：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E4%BD%8D%E6%93%8D%E4%BD%9C/1.png" alt="n"></li><li>计算汉明权重（Hamming Weight）<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E4%BD%8D%E6%93%8D%E4%BD%9C/title.png" alt="title"><br>就是让你返回 n 的二进制表示中有几个 1。因为 n &amp; (n - 1) 可以消除最后一个 1，所以可以用一个循环不停地消除 1 同时计数，直到 n 变成 0 为止。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">hammingWeight</span><span class="hljs-params">(<span class="hljs-keyword">uint32_t</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n != <span class="hljs-number">0</span>) &#123;<br>        n = n &amp; (n - <span class="hljs-number">1</span>);<br>        res++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>判断一个数是不是 2 的指数<br>一个数如果是 2 的指数，那么它的二进制表示一定只含有一个 1：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">2</span>^<span class="hljs-number">0</span> = <span class="hljs-number">1</span> = <span class="hljs-number">0b0001</span><br><span class="hljs-number">2</span>^<span class="hljs-number">1</span> = <span class="hljs-number">2</span> = <span class="hljs-number">0b0010</span><br><span class="hljs-number">2</span>^<span class="hljs-number">2</span> = <span class="hljs-number">4</span> = <span class="hljs-number">0b0100</span><br></code></pre></td></tr></table></figure>如果使用位运算技巧就很简单了（注意运算符优先级，括号不可以省略）：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isPowerOfTwo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> (n &amp; (n - <span class="hljs-number">1</span>)) == <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>以上便是一些有趣/常用的位操作。其实位操作的技巧很多，有一个叫做 Bit Twiddling Hacks 的外国网站收集了几乎所有位操作的黑科技玩法，感兴趣的读者可以点击「阅读原文」按钮查看。</li></ol><p><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/twoSum%E9%97%AE%E9%A2%98%E7%9A%84%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3">上一篇：twoSum问题的核心思想</a><br><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E5%AE%9E%E7%8E%B0%E8%AE%A1%E7%AE%97%E5%99%A8">下一篇：拆解复杂问题：实现计算器</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洗牌算法</title>
      <link href="2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95/"/>
      <url>2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="洗牌算法"><a href="#洗牌算法" class="headerlink" title="洗牌算法"></a>洗牌算法</h1><p>我知道大家会各种花式排序算法，但是如果叫你打乱一个数组，你是否能做到胸有成竹？即便你拍脑袋想出一个算法，怎么证明你的算法就是正确的呢？乱序算法不像排序算法，结果唯一可以很容易检验，因为「乱」可以有很多种，你怎么能证明你的算法是「真的乱」呢？<br>所以我们面临两个问题：</p><ol><li>什么叫做「真的乱」？</li><li>设计怎样的算法来打乱数组才能做到「真的乱」？<br>这种算法称为「随机乱置算法」或者「洗牌算法」。<br>本文分两部分，第一部分详解最常用的洗牌算法。因为该算法的细节容易出错，且存在好几种变体，虽有细微差异但都是正确的，所以本文要介绍一种简单的通用思想保证你写出正确的洗牌算法。第二部分讲解使用「蒙特卡罗方法」来检验我们的打乱结果是不是真的乱。蒙特卡罗方法的思想不难，但是实现方式也各有特点的。<h3 id="一、洗牌算法"><a href="#一、洗牌算法" class="headerlink" title="一、洗牌算法"></a>一、洗牌算法</h3>此类算法都是靠随机选取元素交换来获取随机性，直接看代码（伪码），该算法有 4 种形式，都是正确的：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 得到一个在闭区间 [min, max] 内的随机整数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">randInt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> min, <span class="hljs-keyword">int</span> max)</span></span>;<br><span class="hljs-comment">// 第一种写法</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">shuffle</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = arr.length();<br>    <span class="hljs-comment">/******** 区别只有这两行 ********/</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; n; i++) &#123;<br>        <span class="hljs-comment">// 从 i 到最后随机选一个元素</span><br>        <span class="hljs-keyword">int</span> rand = randInt(i, n - <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">/*************************/</span><br>        swap(arr[i], arr[rand]);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 第二种写法</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; n - <span class="hljs-number">1</span>; i++)<br>        <span class="hljs-keyword">int</span> rand = randInt(i, n - <span class="hljs-number">1</span>);<br><span class="hljs-comment">// 第三种写法</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span> ; i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-keyword">int</span> rand = randInt(<span class="hljs-number">0</span>, i);<br><span class="hljs-comment">// 第四种写法</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span> ; i &gt; <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-keyword">int</span> rand = randInt(<span class="hljs-number">0</span>, i);<br></code></pre></td></tr></table></figure></li></ol><p><strong>分析洗牌算法正确性的准则：产生的结果必须有 n! 种可能，否则就是错误的。</strong>这个很好解释，因为一个长度为 n 的数组的全排列就有 n! 种，也就是说打乱结果总共有 n! 种。算法必须能够反映这个事实，才是正确的。<br>我们先用这个准则分析一下<strong>第一种写法</strong>的正确性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 假设传入这样一个 arr</span><br><span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">shuffle</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = arr.length(); <span class="hljs-comment">// 5</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">int</span> rand = randInt(i, n - <span class="hljs-number">1</span>);<br>        swap(arr[i], arr[rand]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>for 循环第一轮迭代时，<code>i = 0</code>，<code>rand</code> 的取值范围是 <code>[0, 4]</code>，有 5 个可能的取值。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95/1.png" alt="第一次"><br>for 循环第二轮迭代时，<code>i = 1</code>，<code>rand</code> 的取值范围是 <code>[1, 4]</code>，有 4 个可能的取值。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95/2.png" alt="第二次"><br>后面以此类推，直到最后一次迭代，<code>i = 4</code>，<code>rand</code> 的取值范围是 <code>[4, 4]</code>，只有 1 个可能的取值。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95/3.png" alt="最后一次"><br>可以看到，整个过程产生的所有可能结果有 <code>n! = 5! = 5*4*3*2*1</code> 种，所以这个算法是正确的。<br>分析<strong>第二种写法</strong>，前面的迭代都是一样的，少了一次迭代而已。所以最后一次迭代时 <code>i = 3</code>，<code>rand</code> 的取值范围是 <code>[3, 4]</code>，有 2 个可能的取值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 第二种写法</span><br><span class="hljs-comment">// arr = &#123;1,3,5,7,9&#125;, n = 5</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; n - <span class="hljs-number">1</span>; i++)<br>        <span class="hljs-keyword">int</span> rand = randInt(i, n - <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>所以整个过程产生的所有可能结果仍然有 <code>5*4*3*2 = 5! = n!</code> 种，因为乘以 1 可有可无嘛。所以这种写法也是正确的。<br>如果以上内容你都能理解，那么你就能发现<strong>第三种写法</strong>就是第一种写法，只是将数组从后往前迭代而已；<strong>第四种写法</strong>是第二种写法从后往前来。所以它们都是正确的。<br>如果读者思考过洗牌算法，可能会想出如下的算法，但是<strong>这种写法是错误的</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">shuffle</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = arr.length();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; n; i++) &#123;<br>        <span class="hljs-comment">// 每次都从闭区间 [0, n-1]</span><br>        <span class="hljs-comment">// 中随机选取元素进行交换</span><br>        <span class="hljs-keyword">int</span> rand = randInt(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>        swap(arr[i], arr[rand]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在你应该明白这种写法为什么会错误了。因为这种写法得到的所有可能结果有 $n^n$ 种，而不是 $n!$ 种，而且 $n^n$ 不可能是 $n!$ 的整数倍。<br>比如说 <code>arr = &#123;1,2,3&#125;</code>，正确的结果应该有 $3!= 6$ 种可能，而这种写法总共有 $3^3 = 27$ 种可能结果。因为 27 不能被 6 整除，所以一定有某些情况被「偏袒」了，也就是说某些情况出现的概率会大一些，所以这种打乱结果不算「真的乱」。<br>上面我们从直觉上简单解释了洗牌算法正确的准则，没有数学证明，我想大家也懒得证明。对于概率问题我们可以使用「蒙特卡罗方法」进行简单验证。</p><h3 id="二、蒙特卡罗方法验证正确性"><a href="#二、蒙特卡罗方法验证正确性" class="headerlink" title="二、蒙特卡罗方法验证正确性"></a>二、蒙特卡罗方法验证正确性</h3><p>洗牌算法，或者说随机乱置算法的<strong>正确性衡量标准是：对于每种可能的结果出现的概率必须相等，也就是说要足够随机。</strong><br>如果不用数学严格证明概率相等，可以用蒙特卡罗方法近似地估计出概率是否相等，结果是否足够随机。<br>记得高中有道数学题：往一个正方形里面随机打点，这个正方形里紧贴着一个圆，告诉你打点的总数和落在圆里的点的数量，让你计算圆周率。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95/4.png" alt="正方形"><br>这其实就是利用了蒙特卡罗方法：当打的点足够多的时候，点的数量就可以近似代表图形的面积。通过面积公式，由正方形和圆的面积比值是可以很容易推出圆周率的。当然打的点越多，算出的圆周率越准确，充分体现了大力出奇迹的真理。<br>类似的，我们可以对同一个数组进行一百万次洗牌，统计各种结果出现的次数，把频率作为概率，可以很容易看出洗牌算法是否正确。整体思想很简单，不过实现起来也有些技巧的，下面简单分析几种实现思路。<br><strong>第一种思路</strong>，我们把数组 arr 的所有排列组合都列举出来，做成一个直方图（假设 arr = {1,2,3}）：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95/5.jpg" alt="直方图"><br>每次进行洗牌算法后，就把得到的打乱结果对应的频数加一，重复进行 100 万次，如果每种结果出现的总次数差不多，那就说明每种结果出现的概率应该是相等的。写一下这个思路的伪代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">shuffle</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>;<br><span class="hljs-comment">// 蒙特卡罗</span><br><span class="hljs-keyword">int</span> N = <span class="hljs-number">1000000</span>;<br>HashMap count; <span class="hljs-comment">// 作为直方图</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>    <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>    shuffle(arr);<br>    <span class="hljs-comment">// 此时 arr 已被打乱</span><br>    count[arr] += <span class="hljs-number">1</span>；<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> feq : count.values()) <br>    print(feq / N + <span class="hljs-string">&quot; &quot;</span>); <span class="hljs-comment">// 频率</span><br></code></pre></td></tr></table></figure><p>这种检验方案是可行的，不过可能有读者会问，arr 的全部排列有 n! 种（n 为 arr 的长度），如果 n 比较大，那岂不是空间复杂度爆炸了？<br>是的，不过作为一种验证方法，我们不需要 n 太大，一般用长度为 5 或 6 的 arr 试下就差不多了吧，因为我们只想比较概率验证一下正确性而已。<br><strong>第二种思路</strong>，可以这样想，arr 数组中全都是 0，只有一个 1。我们对 arr 进行 100 万次打乱，记录每个索引位置出现 1 的次数，如果每个索引出现的次数差不多，也可以说明每种打乱结果的概率是相等的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">shuffle</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>;<br><span class="hljs-comment">// 蒙特卡罗方法</span><br><span class="hljs-keyword">int</span> N = <span class="hljs-number">1000000</span>;    <br><span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">int</span>[] count = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>    shuffle(arr); <span class="hljs-comment">// 打乱 arr</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length; j++) <br>        <span class="hljs-keyword">if</span> (arr[j] == <span class="hljs-number">1</span>) &#123;<br>            count[j]++;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> feq : count) <br>    print(feq / N + <span class="hljs-string">&quot; &quot;</span>); <span class="hljs-comment">// 频率</span><br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95/6.png" alt="直方图"><br>这种思路也是可行的，而且避免了阶乘级的空间复杂度，但是多了嵌套 for 循环，时间复杂度高一点。不过由于我们的测试数据量不会有多大，这些问题都可以忽略。<br>另外，细心的读者可能发现一个问题，上述两种思路声明 arr 的位置不同，一个在 for 循环里，一个在 for 循环之外。其实效果都是一样的，因为我们的算法总要打乱 arr，所以 arr 的顺序并不重要，只要元素不变就行。</p><h3 id="三、最后总结"><a href="#三、最后总结" class="headerlink" title="三、最后总结"></a>三、最后总结</h3><p>本文第一部分介绍了洗牌算法（随机乱置算法），通过一个简单的分析技巧证明了该算法的四种正确形式，并且分析了一种常见的错误写法，相信你一定能够写出正确的洗牌算法了。<br>第二部分写了洗牌算法正确性的衡量标准，即每种随机结果出现的概率必须相等。如果我们不用严格的数学证明，可以通过蒙特卡罗方法大力出奇迹，粗略验证算法的正确性。蒙特卡罗方法也有不同的思路，不过要求不必太严格，因为我们只是寻求一个简单的验证。</p><p><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%87%A0%E4%B8%AA%E5%8F%8D%E7%9B%B4%E8%A7%89%E7%9A%84%E6%A6%82%E7%8E%87%E9%97%AE%E9%A2%98">上一篇：几个反直觉的概率问题</a><br><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E9%80%92%E5%BD%92%E8%AF%A6%E8%A7%A3">下一篇：递归详解</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动窗口技巧</title>
      <link href="2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%8A%80%E5%B7%A7/"/>
      <url>2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="滑动窗口技巧"><a href="#滑动窗口技巧" class="headerlink" title="滑动窗口技巧"></a>滑动窗口技巧</h1><p>本文详解「滑动窗口」这种高级双指针技巧的算法框架，带你秒杀几道高难度的子字符串匹配问题。<br>LeetCode 上至少有 9 道题目可以用此方法高效解决。但是有几道是 VIP 题目，有几道题目虽不难但太复杂，所以本文只选择点赞最高，较为经典的，最能够讲明白的三道题来讲解。第一题为了让读者掌握算法模板，篇幅相对长，后两题就基本秒杀了。<br>本文代码为 C++ 实现，不会用到什么编程方面的奇技淫巧，但是还是简单介绍一下一些用到的数据结构，以免有的读者因为语言的细节问题阻碍对算法思想的理解：<br><code>unordered_map</code> 就是哈希表（字典），它的一个方法 count(key) 相当于 containsKey(key) 可以判断键 key 是否存在。<br>可以使用方括号访问键对应的值 map[key]。需要注意的是，如果该 key 不存在，C++ 会自动创建这个 key，并把 map[key] 赋值为 0。<br>所以代码中多次出现的 <code>map[key]++</code> 相当于 Java 的 <code>map.put(key, map.getOrDefault(key, 0) + 1)</code>。<br>本文大部分代码都是图片形式，可以点开放大，更重要的是可以左右滑动方便对比代码。下面进入正题。</p><h3 id="一、最小覆盖子串"><a href="#一、最小覆盖子串" class="headerlink" title="一、最小覆盖子串"></a>一、最小覆盖子串</h3><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/title1.png" alt="题目链接"><br>题目不难理解，就是说要在 S(source) 中找到包含 T(target) 中全部字母的一个子串，顺序无所谓，但这个子串一定是所有可能子串中最短的。<br>如果我们使用暴力解法，代码大概是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.size(); i++)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; s.size(); j++)<br>        <span class="hljs-keyword">if</span> s[i:j] 包含 t 的所有字母:<br>            更新答案<br></code></pre></td></tr></table></figure><p>思路很直接吧，但是显然，这个算法的复杂度肯定大于 O(N^2) 了，不好。<br>滑动窗口算法的思路是这样：<br>1、我们在字符串 S 中使用双指针中的左右指针技巧，初始化 left = right = 0，把索引闭区间 [left, right] 称为一个「窗口」。<br>2、我们先不断地增加 right 指针扩大窗口 [left, right]，直到窗口中的字符串符合要求（包含了 T 中的所有字符）。<br>3、此时，我们停止增加 right，转而不断增加 left 指针缩小窗口 [left, right]，直到窗口中的字符串不再符合要求（不包含 T 中的所有字符了）。同时，每次增加 left，我们都要更新一轮结果。<br>4、重复第 2 和第 3 步，直到 right 到达字符串 S 的尽头。<br>这个思路其实也不难，<strong>第 2 步相当于在寻找一个「可行解」，然后第 3 步在优化这个「可行解」，最终找到最优解。</strong>左右指针轮流前进，窗口大小增增减减，窗口不断向右滑动。<br>下面画图理解一下，needs 和 window 相当于计数器，分别记录 T 中字符出现次数和窗口中的相应字符的出现次数。<br>初始状态：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/0.png" alt="0"><br>增加 right，直到窗口 [left, right] 包含了 T 中所有字符：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/1.png" alt="0"></p><p>现在开始增加 left，缩小窗口 [left, right]。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/2.png" alt="0"><br>直到窗口中的字符串不再符合要求，left 不再继续移动。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/3.png" alt="0"></p><p>之后重复上述过程，先移动 right，再移动 left…… 直到 right 指针到达字符串 S 的末端，算法结束。<br>如果你能够理解上述过程，恭喜，你已经完全掌握了滑动窗口算法思想。至于如何具体到问题，如何得出此题的答案，都是编程问题，等会提供一套模板，理解一下就会了。<br>上述过程可以简单地写出如下伪码框架：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">string</span> s, t;<br><span class="hljs-comment">// 在 s 中寻找 t 的「最小覆盖子串」</span><br><span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">string</span> res = s;<br><span class="hljs-keyword">while</span>(right &lt; s.size()) &#123;<br>    window.add(s[right]);<br>    right++;<br>    <span class="hljs-comment">// 如果符合要求，移动 left 缩小窗口</span><br>    <span class="hljs-keyword">while</span> (window 符合要求) &#123;<br>        <span class="hljs-comment">// 如果这个窗口的子串更短，则更新 res</span><br>        res = minLen(res, window);<br>        window.remove(s[left]);<br>        left++;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br></code></pre></td></tr></table></figure><p>如果上述代码你也能够理解，那么你离解题更近了一步。现在就剩下一个比较棘手的问题：如何判断 window 即子串 s[left…right] 是否符合要求，是否包含 t 的所有字符呢？<br>可以用两个哈希表当作计数器解决。用一个哈希表 needs 记录字符串 t 中包含的字符及出现次数，用另一个哈希表 window 记录当前「窗口」中包含的字符及出现的次数，如果 window 包含所有 needs 中的键，且这些键对应的值都大于等于 needs 中的值，那么就可以知道当前「窗口」符合要求了，可以开始移动 left 指针了。<br>现在将上面的框架继续细化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">string</span> s, t;<br><span class="hljs-comment">// 在 s 中寻找 t 的「最小覆盖子串」</span><br><span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">string</span> res = s;<br><span class="hljs-comment">// 相当于两个计数器</span><br><span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">char</span>, <span class="hljs-keyword">int</span>&gt; window;<br><span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">char</span>, <span class="hljs-keyword">int</span>&gt; needs;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> c : t) needs[c]++;<br><span class="hljs-comment">// 记录 window 中已经有多少字符符合要求了</span><br><span class="hljs-keyword">int</span> match = <span class="hljs-number">0</span>; <br><span class="hljs-keyword">while</span> (right &lt; s.size()) &#123;<br>    <span class="hljs-keyword">char</span> c1 = s[right];<br>    <span class="hljs-keyword">if</span> (needs.count(c1)) &#123;<br>        window[c1]++; <span class="hljs-comment">// 加入 window</span><br>        <span class="hljs-keyword">if</span> (window[c1] == needs[c1])<br>            <span class="hljs-comment">// 字符 c1 的出现次数符合要求了</span><br>            match++;<br>    &#125;<br>    right++;<br>    <span class="hljs-comment">// window 中的字符串已符合 needs 的要求了</span><br>    <span class="hljs-keyword">while</span> (match == needs.size()) &#123;<br>        <span class="hljs-comment">// 更新结果 res</span><br>        res = minLen(res, window);<br>        <span class="hljs-keyword">char</span> c2 = s[left];<br>        <span class="hljs-keyword">if</span> (needs.count(c2)) &#123;<br>            window[c2]--; <span class="hljs-comment">// 移出 window</span><br>            <span class="hljs-keyword">if</span> (window[c2] &lt; needs[c2])<br>                <span class="hljs-comment">// 字符 c2 出现次数不再符合要求</span><br>                match--;<br>        &#125;<br>        left++;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br></code></pre></td></tr></table></figure><p>上述代码已经具备完整的逻辑了，只有一处伪码，即更新 res 的地方，不过这个问题太好解决了，直接看解法吧！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">minWindow</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s, <span class="hljs-built_in">string</span> t)</span> </span>&#123;<br>    <span class="hljs-comment">// 记录最短子串的开始位置和长度</span><br>    <span class="hljs-keyword">int</span> start = <span class="hljs-number">0</span>, minLen = INT_MAX;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">char</span>, <span class="hljs-keyword">int</span>&gt; window;<br>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">char</span>, <span class="hljs-keyword">int</span>&gt; needs;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> c : t) needs[c]++;<br>    <br>    <span class="hljs-keyword">int</span> match = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span> (right &lt; s.size()) &#123;<br>        <span class="hljs-keyword">char</span> c1 = s[right];<br>        <span class="hljs-keyword">if</span> (needs.count(c1)) &#123;<br>            window[c1]++;<br>            <span class="hljs-keyword">if</span> (window[c1] == needs[c1]) <br>                match++;<br>        &#125;<br>        right++;<br>        <br>        <span class="hljs-keyword">while</span> (match == needs.size()) &#123;<br>            <span class="hljs-keyword">if</span> (right - left &lt; minLen) &#123;<br>                <span class="hljs-comment">// 更新最小子串的位置和长度</span><br>                start = left;<br>                minLen = right - left;<br>            &#125;<br>            <span class="hljs-keyword">char</span> c2 = s[left];<br>            <span class="hljs-keyword">if</span> (needs.count(c2)) &#123;<br>                window[c2]--;<br>                <span class="hljs-keyword">if</span> (window[c2] &lt; needs[c2])<br>                    match--;<br>            &#125;<br>            left++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> minLen == INT_MAX ?<br>                <span class="hljs-string">&quot;&quot;</span> : s.substr(start, minLen);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果直接甩给你这么一大段代码，我想你的心态是爆炸的，但是通过之前的步步跟进，你是否能够理解这个算法的内在逻辑呢？你是否能清晰看出该算法的结构呢？<br>这个算法的时间复杂度是 O(M + N)，M 和 N 分别是字符串 S 和 T 的长度。因为我们先用 for 循环遍历了字符串 T 来初始化 needs，时间 O(N)，之后的两个 while 循环最多执行 2M 次，时间 O(M)。<br>读者也许认为嵌套的 while 循环复杂度应该是平方级，但是你这样想，while 执行的次数就是双指针 left 和 right 走的总路程，最多是 2M 嘛。</p><h3 id="二、找到字符串中所有字母异位词"><a href="#二、找到字符串中所有字母异位词" class="headerlink" title="二、找到字符串中所有字母异位词"></a>二、找到字符串中所有字母异位词</h3><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/title2.png" alt="题目链接"><br>这道题的难度是 Easy，但是评论区点赞最多的一条是这样：<br><code>How can this problem be marked as easy???</code><br>实际上，这个 Easy 是属于了解双指针技巧的人的，只要把上一道题的代码改中更新 res 部分的代码稍加修改就成了这道题的解：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">findAnagrams</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s, <span class="hljs-built_in">string</span> t)</span> </span>&#123;<br>    <span class="hljs-comment">// 用数组记录答案</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">char</span>, <span class="hljs-keyword">int</span>&gt; needs;<br>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">char</span>, <span class="hljs-keyword">int</span>&gt; window;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> c : t) needs[c]++;<br>    <span class="hljs-keyword">int</span> match = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span> (right &lt; s.size()) &#123;<br>        <span class="hljs-keyword">char</span> c1 = s[right];<br>        <span class="hljs-keyword">if</span> (needs.count(c1)) &#123;<br>            window[c1]++;<br>            <span class="hljs-keyword">if</span> (window[c1] == needs[c1])<br>                match++;<br>        &#125;<br>        right++;<br>        <span class="hljs-keyword">while</span> (match == needs.size()) &#123;<br>            <span class="hljs-comment">// 如果 window 的大小合适</span><br>            <span class="hljs-comment">// 就把起始索引 left 加入结果</span><br>            <span class="hljs-keyword">if</span> (right - left == t.size()) &#123;<br>                res.push_back(left);<br>            &#125;<br>            <span class="hljs-keyword">char</span> c2 = s[left];<br>            <span class="hljs-keyword">if</span> (needs.count(c2)) &#123;<br>                window[c2]--;<br>                <span class="hljs-keyword">if</span> (window[c2] &lt; needs[c2])<br>                    match--;<br>            &#125;<br>            left++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为这道题和上一道的场景类似，也需要 window 中包含串 t 的所有字符，但上一道题要找长度最短的子串，这道题要找长度相同的子串，也就是「字母异位词」嘛。</p><h3 id="三、无重复字符的最长子串"><a href="#三、无重复字符的最长子串" class="headerlink" title="三、无重复字符的最长子串"></a>三、无重复字符的最长子串</h3><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/title3.png" alt="题目链接"><br>遇到子串问题，首先想到的就是滑动窗口技巧。<br>类似之前的思路，使用 window 作为计数器记录窗口中的字符出现次数，然后先向右移动 right，当 window 中出现重复字符时，开始移动 left 缩小窗口，如此往复：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">char</span>, <span class="hljs-keyword">int</span>&gt; window;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>; <span class="hljs-comment">// 记录最长长度</span><br>    <span class="hljs-keyword">while</span> (right &lt; s.size()) &#123;<br>        <span class="hljs-keyword">char</span> c1 = s[right];<br>        window[c1]++;<br>        right++;<br>        <span class="hljs-comment">// 如果 window 中出现重复字符</span><br>        <span class="hljs-comment">// 开始移动 left 缩小窗口</span><br>        <span class="hljs-keyword">while</span> (window[c1] &gt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">char</span> c2 = s[left];<br>            window[c2]--;<br>            left++;<br>        &#125;<br>        res = max(res, right - left);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是，因为我们要求的是最长子串，所以需要在每次移动 right 增大窗口时更新 res，而不是像之前的题目在移动 left 缩小窗口时更新 res。</p><h3 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h3><p>通过上面三道题，我们可以总结出滑动窗口算法的抽象思想：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (right &lt; s.size()) &#123;<br>    window.add(s[right]);<br>    right++;<br>    <br>    <span class="hljs-keyword">while</span> (valid) &#123;<br>        window.remove(s[left]);<br>        left++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中 window 的数据类型可以视具体情况而定，比如上述题目都使用哈希表充当计数器，当然你也可以用一个数组实现同样效果，因为我们只处理英文字母。<br>稍微麻烦的地方就是这个 valid 条件，为了实现这个条件的实时更新，我们可能会写很多代码。比如前两道题，看起来解法篇幅那么长，实际上思想还是很简单，只是大多数代码都在处理这个问题而已。</p><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/labuladong.png" alt="公众号 labuladong"><br><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E8%AF%A6%E8%A7%A3">上一篇：二分查找解题框架</a><br><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7">下一篇：双指针技巧解题框架</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>烧饼排序</title>
      <link href="2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E7%83%A7%E9%A5%BC%E6%8E%92%E5%BA%8F/"/>
      <url>2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E7%83%A7%E9%A5%BC%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="烧饼排序"><a href="#烧饼排序" class="headerlink" title="烧饼排序"></a>烧饼排序</h1><p>烧饼排序是个很有意思的实际问题：假设盘子上有 <code>n</code> 块<strong>面积大小不一</strong>的烧饼，你如何用一把锅铲进行若干次翻转，让这些烧饼的大小有序（小的在上，大的在下）？<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/pancakeSort/1.jpg"><br>设想一下用锅铲翻转一堆烧饼的情景，其实是有一点限制的，我们每次只能将最上面的若干块饼子翻转：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/pancakeSort/2.png"><br>我们的问题是，<strong>如何使用算法得到一个翻转序列，使得烧饼堆变得有序</strong>？<br>首先，需要把这个问题抽象，用数组来表示烧饼堆：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/pancakeSort/title.png"><br>如何解决这个问题呢？其实类似上篇文章 <a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E9%80%92%E5%BD%92%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86">递归反转链表的一部分</a>，这也是需要<strong>递归思想</strong>的。</p><h3 id="一、思路分析"><a href="#一、思路分析" class="headerlink" title="一、思路分析"></a>一、思路分析</h3><p>为什么说这个问题有递归性质呢？比如说我们需要实现这样一个函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// cakes 是一堆烧饼，函数会将前 n 个烧饼排序</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] cakes, <span class="hljs-keyword">int</span> n)</span></span>;<br></code></pre></td></tr></table></figure><p>如果我们找到了前 <code>n</code> 个烧饼中最大的那个，然后设法将这个饼子翻转到最底下：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/pancakeSort/3.jpg"><br>那么，原问题的规模就可以减小，递归调用 <code>pancakeSort(A, n-1)</code> 即可：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/pancakeSort/4.jpg"><br>接下来，对于上面的这 <code>n - 1</code> 块饼，如何排序呢？还是先从中找到最大的一块饼，然后把这块饼放到底下，再递归调用 <code>pancakeSort(A, n-1-1)</code>……<br>你看，这就是递归性质，总结一下思路就是：<br>1、找到 <code>n</code> 个饼中最大的那个。<br>2、把这个最大的饼移到最底下。<br>3、递归调用 <code>pancakeSort(A, n - 1)</code>。<br>base case：<code>n == 1</code> 时，排序 1 个饼时不需要翻转。<br>那么，最后剩下个问题，<strong>如何设法将某块烧饼翻到最后呢</strong>？<br>其实很简单，比如第 3 块饼是最大的，我们想把它换到最后，也就是换到第 <code>n</code> 块。可以这样操作：<br>1、用锅铲将前 3 块饼翻转一下，这样最大的饼就翻到了最上面。<br>2、用锅铲将前 <code>n</code> 块饼全部翻转，这样最大的饼就翻到了第 <code>n</code> 块，也就是最后一块。<br>以上两个流程理解之后，基本就可以写出解法了，不过题目要求我们写出具体的反转操作序列，这也很简单，只要在每次翻转烧饼时记录下来就行了。    </p><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><p>只要把上述的思路用代码实现即可，唯一需要注意的是，数组索引从 0 开始，而我们要返回的结果是从 1 开始算的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 记录反转操作序列</span><br>LinkedList&lt;Integer&gt; res = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><span class="hljs-function">List&lt;Integer&gt; <span class="hljs-title">pancakeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] cakes)</span> </span>&#123;<br>    sort(cakes, cakes.length);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] cakes, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">// base case</span><br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>;<br>    <br>    <span class="hljs-comment">// 寻找最大饼的索引</span><br>    <span class="hljs-keyword">int</span> maxCake = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> maxCakeIndex = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-keyword">if</span> (cakes[i] &gt; maxCake) &#123;<br>            maxCakeIndex = i;<br>            maxCake = cakes[i];<br>        &#125;<br>    <br>    <span class="hljs-comment">// 第一次翻转，将最大饼翻到最上面</span><br>    reverse(cakes, <span class="hljs-number">0</span>, maxCakeIndex);<br>    res.add(maxCakeIndex + <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 第二次翻转，将最大饼翻到最下面</span><br>    reverse(cakes, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>    res.add(n);<br>    <span class="hljs-comment">// 递归调用</span><br>    sort(cakes, n - <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">reverse</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>        <span class="hljs-keyword">int</span> temp = arr[i];<br>        arr[i] = arr[j];<br>        arr[j] = temp;<br>        i++; j--;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过刚才的详细解释，这段代码应该是很清晰了。<br>算法的时间复杂度很容易计算，因为递归调用的次数是 <code>n</code>，每次递归调用都需要一次 for 循环，时间复杂度是 O(n)，所以总的复杂度是 O(n^2)。<br><strong>最后，我们可以思考一个问题​</strong>：按照我们这个思路，得出的操作序列长度应该为​ <code>2(n - 1)</code>，因为每次递归都要进行 2 次翻转并记录操作，总共有 <code>n</code> 层递归，但由于 base case 直接返回结果，不进行翻转，所以最终的操作序列长度应该是固定的 <code>2(n - 1)</code>。<br>显然，这个结果不是最优的（最短的），比如说一堆煎饼 <code>[3,2,4,1]</code>，我们的算法得到的翻转序列是 <code>[3,4,2,3,1,2]</code>，但是最快捷的翻转方法应该是 <code>[2,3,4]</code>：<br>初始状态 ：[3,2,4,1]<br>翻前 2 个：[2,3,4,1]<br>翻前 3 个：[4,3,2,1]<br>翻前 4 个：[1,2,3,4]<br>如果要求你的算法计算排序烧饼的<strong>最短</strong>操作序列，你该如何计算呢？或者说，解决这种求最优解法的问题，核心思路什么，一定需要使用什么算法技巧呢？<br>不妨分享一下你的思考。</p><p><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E5%AE%9E%E7%8E%B0%E8%AE%A1%E7%AE%97%E5%99%A8">上一篇：拆解复杂问题：实现计算器</a><br><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%89%8D%E7%BC%80%E5%92%8C%E6%8A%80%E5%B7%A7">下一篇：前缀和技巧</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法学习之路</title>
      <link href="2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
      <url>2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="算法学习之路"><a href="#算法学习之路" class="headerlink" title="算法学习之路"></a>算法学习之路</h1><p>之前发的那篇关于框架性思维的文章，我也发到了不少其他圈子，受到了大家的普遍好评，这一点我真的没想到，首先感谢大家的认可，我会更加努力，写出通俗易懂的算法文章。<br>有很多朋友问我数据结构和算法到底该怎么学，尤其是很多朋友说自己是「小白」，感觉这些东西好难啊，就算看了之前的「框架思维」，也感觉自己刷题乏力，希望我能聊聊我从一个非科班小白一路是怎么学过来的。<br>首先要给怀有这样疑问的朋友鼓掌，因为你现在已经「知道自己不知道」，而且开始尝试学习、刷题、寻求帮助，能做到这一点本身就是及其困难的。<br>关于「框架性思维」，对于一个小白来说，可能暂时无法完全理解（如果你能理解，说明你水平已经不错啦，不是小白啦）。就像软件工程，对于我这种没带过项目的人来说，感觉其内容枯燥乏味，全是废话，但是对于一个带过团队的人，他就会觉得软件工程里的每一句话都是精华。暂时不太理解没关系，留个印象，功夫到了很快就明白了。<br>下面写一写我一路过来的一些经验。如果你已经看过很多「如何高效刷题」「如何学习算法」的文章，却还是没有开始行动并坚持下去，本文的第五点就是写给你的。<br>我觉得之所以有时候认为自己是「小白」，是由于知识某些方面的空白造成的。具体到数据结构的学习，无非就是两个问题搞得不太清楚：<strong>这是啥？有啥用？</strong><br>举个例子，比如说你看到了「栈」这个名词，老师可能会讲这些关键词：先进后出、函数堆栈等等。但是，对于初学者，这些描述属于文学词汇，没有实际价值，没有解决最基本的两个问题。如何回答这两个基本问题呢？回答「这是啥」需要看教科书，回答「有啥用」需要刷算法题。<br><strong>一、这是啥？</strong><br>这个问题最容易解决，就像一层窗户纸，你只要随便找本书看两天，自己动手实现一个「队列」「栈」之类的数据结构，就能捅破这层窗户纸。<br>这时候你就能理解「框架思维」文章中的前半部分了：数据结构无非就是数组、链表为骨架的一些特定操作而已；每个数据结构实现的功能无非增删查改罢了。<br>比如说「列队」这个数据结构，无非就是基于数组或者链表，实现 enqueue 和 dequeue 两个方法。这两个方法就是增和删呀，连查和改的方法都不需要。<br><strong>二、有啥用？</strong><br>解决这个问题，就涉及算法的设计了，是个持久战，需要经常进行抽象思考，刷算法题，培养「计算机思维」。<br>之前的文章讲了，算法就是对数据结构准确而巧妙的运用。常用算法问题也就那几大类，算法题无非就是不断变换场景，给那几个算法框架套上不同的皮。刷题，就是在锻炼你的眼力，看你能不能看穿问题表象揪出相应的解法框架。<br>比如说，让你求解一个迷宫，你要把这个问题层层抽象：迷宫 -&gt; 图的遍历 -&gt; N 叉树的遍历 -&gt; 二叉树的遍历。然后让框架指导你写具体的解法。<br>抽象问题，直击本质，是刷题中你需要刻意培养的能力。<br><strong>三、如何看书</strong><br>直接推荐一本公认的好书，《算法第 4 版》，我一般简写成《算法4》。不要蜻蜓点水，这本书你能选择性的看上 50%，基本上就达到平均水平了。别怕这本书厚，因为起码有三分之一不用看，下面讲讲怎么看这本书。<br>看书仍然遵循递归的思想：自顶向下，逐步求精。<br>这本书知识结构合理，讲解也清楚，所以可以按顺序学习。<strong>书中正文的算法代码一定要亲自敲一遍</strong>，因为这些真的是扎实的基础，要认真理解。不要以为自己看一遍就看懂了，不动手的话理解不了的。但是，开头部分的基础可以酌情跳过；书中的数学证明，如不影响对算法本身的理解，完全可以跳过；章节最后的练习题，也可以全部跳过。这样一来，这本书就薄了很多。<br>相信读者现在已经认可了「框架性思维」的重要性，这种看书方式也是一种框架性策略，抓大放小，着重理解整体的知识架构，而忽略证明、练习题这种细节问题，即<strong>保持自己对新知识的好奇心，避免陷入无限的细节被劝退。</strong><br>当然，《算法4》到后面的内容也比较难了，比如那几个著名的串算法，以及正则表达式算法。这些属于「经典算法」，看个人接受能力吧，单说刷 LeetCode 的话，基本用不上，量力而行即可。<br><strong>四、如何刷题</strong><br>首先声明一下，<strong>算法和数学水平没关系，和编程语言也没关系</strong>，你爱用什么语言用什么。算法，主要是培养一种新的思维方式。所谓「计算机思维」，就跟你考驾照一样，你以前骑自行车，有一套自行车的规则和技巧，现在你开汽车，就需要适应并练习开汽车的规则和技巧。<br>LeetCode 上的算法题和前面说的「经典算法」不一样，我们权且称为「解闷算法」吧，因为很多题目都比较有趣，有种在做奥数题或者脑筋急转弯的感觉。比如说，让你用队列实现一个栈，或者用栈实现一个队列，以及不用加号做加法，开脑洞吧？<br>当然，这些问题虽然看起来无厘头，实际生活中也用不到，但是想解决这些问题依然要靠数据结构以及对基础知识的理解，也许这就是很多公司面试都喜欢出这种「智力题」的原因。下面说几点技巧吧。<br><strong>尽量刷英文版的 LeetCode</strong>，中文版的“力扣”是阉割版，不仅很多题目没有答案，而且连个讨论区都没有。英文版的是真的很良心了，很多问题都有官方解答，详细易懂。而且讨论区（Discuss）也沉淀了大量优质内容，甚至好过官方解答。真正能打开你思路的，很可能是讨论区各路大神的思路荟萃。<br>PS：<strong>如果有的英文题目实在看不懂，有个小技巧</strong>，你在题目页面的 url 里加一个 -cn，即 <a href="https://leetcode.com/xxx">https://leetcode.com/xxx</a> 改成 <a href="https://leetcode-cn.com/xxx%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%B0%B1%E8%83%BD%E5%88%87%E6%8D%A2%E5%88%B0%E7%9B%B8%E5%BA%94%E7%9A%84%E4%B8%AD%E6%96%87%E7%89%88%E9%A1%B5%E9%9D%A2%E6%9F%A5%E7%9C%8B%E3%80%82">https://leetcode-cn.com/xxx，这样就能切换到相应的中文版页面查看。</a><br>对于初学者，<strong>强烈建议从 Explore 菜单里最下面的 Learn 开始刷</strong>，这个专题就是专门教你学习数据结构和基本算法的，教学篇和相应的练习题结合，不要太良心。<br>最近 Learn 专题里新增了一些内容，我们挑数据结构相关的内容刷就行了，像 Ruby，Machine Learning 就没必要刷了。刷完 Learn 专题的基础内容，基本就有能力去 Explore 菜单的 Interview 专题刷面试题，或者去 Problem 菜单，在真正的题海里遨游了。<br>无论刷 Explore 还是 Problems 菜单，<strong>最好一个分类一个分类的刷，不要蜻蜓点水</strong>。比如说这几天就刷链表，刷完链表再去连刷几天二叉树。这样做是为了帮助你提取「框架」。一旦总结出针对一类问题的框架，解决同类问题可谓是手到擒来。<br><strong>五、道理我都懂，还是不能坚持下去</strong><br>这其实无关算法了，还是老生常谈的执行力的问题。不说什么破鸡汤了，我觉得<strong>解决办法就是「激起欲望」</strong>，注意我说的是欲望，而不是常说的兴趣，拿我自己说说吧。<br>半年前我开始刷题，目的和大部分人都一样的，就是为毕业找工作做准备。只不过，大部分人是等到临近毕业了才开始刷，而我离毕业还有一阵子。这不是炫耀我多有觉悟，而是我承认自己的极度平凡。<br>首先，我真的想找到一份不错的工作（谁都想吧？），我想要高薪呀！否则我在朋友面前，女神面前放下的骚话，最终都会反过来啪啪地打我的脸。我也是要恰饭，要面子，要虚荣心的嘛。赚钱，虚荣心，足以激起我的欲望了。<br>但是，我不擅长 deadline 突击，我理解东西真的慢，所以干脆笨鸟先飞了。智商不够，拿时间来补，我没能力两个月突击，干脆拉长战线，打他个两年游击战，我还不信耗不死算法这个强敌。事实证明，你如果认真学习一个月，就能够取得肉眼可见的进步了。<br>现在，我依然在坚持刷题，而且为了另外一个原因，这个公众号。我没想到自己的文字竟然能够帮助到他人，甚至能得到认可。这也是虚荣心啊，我不能让读者失望啊，我想让更多的人认可（夸）我呀！<br>以上，不光是坚持刷算法题吧，很多场景都适用。执行力是要靠「欲望」支撑的，我也是一凡人，只有那些看得见摸得着的东西才能使我快乐呀。读者不妨也尝试把刷题学习和自己的切身利益联系起来，这恐怕是坚持下去最简单直白的理由了。</p><p><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97">上一篇：队列实现栈|栈实现队列</a><br><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E4%BF%AE%E8%AE%A2%E7%89%88">下一篇：回溯算法详解</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法思维系列</title>
      <link href="2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/"/>
      <url>2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="算法思维系列"><a href="#算法思维系列" class="headerlink" title="算法思维系列"></a>算法思维系列</h1><ul><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF">算法学习之路</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E4%BF%AE%E8%AE%A2%E7%89%88">回溯算法详解</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%AD%90%E9%9B%86%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88">回溯算法团灭排列、组合、子集问题</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E8%AF%A6%E8%A7%A3">二分查找详解</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7">双指针技巧总结</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%8A%80%E5%B7%A7">滑动窗口技巧</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/twoSum%E9%97%AE%E9%A2%98%E7%9A%84%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3">twoSum问题的核心思想</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BD%8D%E6%93%8D%E4%BD%9C">常用的位操作</a></li><li><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E5%AE%9E%E7%8E%B0%E8%AE%A1%E7%AE%97%E5%99%A8">拆解复杂问题：实现计算器</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E7%83%A7%E9%A5%BC%E6%8E%92%E5%BA%8F">烧饼排序</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%89%8D%E7%BC%80%E5%92%8C%E6%8A%80%E5%B7%A7">前缀和技巧</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%98%E6%B3%95">字符串乘法</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/FloodFill%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8">FloodFill算法详解及应用</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%8C%BA%E9%97%B4%E8%B0%83%E5%BA%A6%E9%97%AE%E9%A2%98%E4%B9%8B%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6">区间调度之区间合并问题</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%8C%BA%E9%97%B4%E4%BA%A4%E9%9B%86%E9%97%AE%E9%A2%98">区间调度之区间交集问题</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%BF%A1%E5%B0%81%E5%B5%8C%E5%A5%97%E9%97%AE%E9%A2%98">信封嵌套问题</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%87%A0%E4%B8%AA%E5%8F%8D%E7%9B%B4%E8%A7%89%E7%9A%84%E6%A6%82%E7%8E%87%E9%97%AE%E9%A2%98">几个反直觉的概率问题</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95">洗牌算法</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E9%80%92%E5%BD%92%E8%AF%A6%E8%A7%A3">递归详解</a><br>本章包含一些常用的算法技巧，比如前缀和、回溯思想、位操作、双指针、如何正确书写二分查找等等。</li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LRU算法</title>
      <link href="2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/LRU%E7%AE%97%E6%B3%95/"/>
      <url>2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/LRU%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="LRU算法详解"><a href="#LRU算法详解" class="headerlink" title="LRU算法详解"></a>LRU算法详解</h1><h3 id="一、什么是-LRU-算法"><a href="#一、什么是-LRU-算法" class="headerlink" title="一、什么是 LRU 算法"></a>一、什么是 LRU 算法</h3><p>就是一种缓存淘汰策略。<br>计算机的缓存容量有限，如果缓存满了就要删除一些内容，给新内容腾位置。但问题是，删除哪些内容呢？我们肯定希望删掉哪些没什么用的缓存，而把有用的数据继续留在缓存里，方便之后继续使用。那么，什么样的数据，我们判定为「有用的」的数据呢？<br>LRU 缓存淘汰算法就是一种常用策略。LRU 的全称是 Least Recently Used，也就是说我们认为最近使用过的数据应该是是「有用的」，很久都没用过的数据应该是无用的，内存满了就优先删那些很久没用过的数据。<br>举个简单的例子，安卓手机都可以把软件放到后台运行，比如我先后打开了「设置」「手机管家」「日历」，那么现在他们在后台排列的顺序是这样的：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/LRU%E7%AE%97%E6%B3%95/1.jpg" alt="jietu"><br>但是这时候如果我访问了一下「设置」界面，那么「设置」就会被提前到第一个，变成这样：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/LRU%E7%AE%97%E6%B3%95/2.jpg" alt="jietu"><br>假设我的手机只允许我同时开 3 个应用程序，现在已经满了。那么如果我新开了一个应用「时钟」，就必须关闭一个应用为「时钟」腾出一个位置，关那个呢？<br>按照 LRU 的策略，就关最底下的「手机管家」，因为那是最久未使用的，然后把新开的应用放到最上面：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/LRU%E7%AE%97%E6%B3%95/3.jpg" alt="jietu"><br>现在你应该理解 LRU（Least Recently Used）策略了。当然还有其他缓存淘汰策略，比如不要按访问的时序来淘汰，而是按访问频率（LFU 策略）来淘汰等等，各有应用场景。本文讲解 LRU 算法策略。</p><h3 id="二、LRU-算法描述"><a href="#二、LRU-算法描述" class="headerlink" title="二、LRU 算法描述"></a>二、LRU 算法描述</h3><p>LRU 算法实际上是让你设计数据结构：首先要接收一个 capacity 参数作为缓存的最大容量，然后实现两个 API，一个是 put(key, val) 方法存入键值对，另一个是 get(key) 方法获取 key 对应的 val，如果 key 不存在则返回 -1。<br>注意哦，get 和 put 方法必须都是 $O(1)$ 的时间复杂度，我们举个具体例子来看看 LRU 算法怎么工作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* 缓存容量为 2 */</span><br>LRUCache cache = <span class="hljs-keyword">new</span> LRUCache(<span class="hljs-number">2</span>);<br><span class="hljs-comment">// 你可以把 cache 理解成一个队列</span><br><span class="hljs-comment">// 假设左边是队头，右边是队尾</span><br><span class="hljs-comment">// 最近使用的排在队头，久未使用的排在队尾</span><br><span class="hljs-comment">// 圆括号表示键值对 (key, val)</span><br>cache.put(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><span class="hljs-comment">// cache = [(1, 1)]</span><br>cache.put(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br><span class="hljs-comment">// cache = [(2, 2), (1, 1)]</span><br>cache.get(<span class="hljs-number">1</span>);       <span class="hljs-comment">// 返回 1</span><br><span class="hljs-comment">// cache = [(1, 1), (2, 2)]</span><br><span class="hljs-comment">// 解释：因为最近访问了键 1，所以提前至队头</span><br><span class="hljs-comment">// 返回键 1 对应的值 1</span><br>cache.put(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br><span class="hljs-comment">// cache = [(3, 3), (1, 1)]</span><br><span class="hljs-comment">// 解释：缓存容量已满，需要删除内容空出位置</span><br><span class="hljs-comment">// 优先删除久未使用的数据，也就是队尾的数据</span><br><span class="hljs-comment">// 然后把新的数据插入队头</span><br>cache.get(<span class="hljs-number">2</span>);       <span class="hljs-comment">// 返回 -1 (未找到)</span><br><span class="hljs-comment">// cache = [(3, 3), (1, 1)]</span><br><span class="hljs-comment">// 解释：cache 中不存在键为 2 的数据</span><br>cache.put(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>);    <br><span class="hljs-comment">// cache = [(1, 4), (3, 3)]</span><br><span class="hljs-comment">// 解释：键 1 已存在，把原始值 1 覆盖为 4</span><br><span class="hljs-comment">// 不要忘了也要将键值对提前到队头</span><br></code></pre></td></tr></table></figure><h3 id="三、LRU-算法设计"><a href="#三、LRU-算法设计" class="headerlink" title="三、LRU 算法设计"></a>三、LRU 算法设计</h3><p>分析上面的操作过程，要让 put 和 get 方法的时间复杂度为 O(1)，我们可以总结出 cache 这个数据结构必要的条件：查找快，插入快，删除快，有顺序之分。<br>因为显然 cache 必须有顺序之分，以区分最近使用的和久未使用的数据；而且我们要在 cache 中查找键是否已存在；如果容量满了要删除最后一个数据；每次访问还要把数据插入到队头。<br>那么，什么数据结构同时符合上述条件呢？哈希表查找快，但是数据无固定顺序；链表有顺序之分，插入删除快，但是查找慢。所以结合一下，形成一种新的数据结构：哈希链表。<br>LRU 缓存算法的核心数据结构就是哈希链表，双向链表和哈希表的结合体。这个数据结构长这样：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/LRU%E7%AE%97%E6%B3%95/4.jpg" alt="HashLinkedList"><br>思想很简单，就是借助哈希表赋予了链表快速查找的特性嘛：可以快速查找某个 key 是否存在缓存（链表）中，同时可以快速删除、添加节点。回想刚才的例子，这种数据结构是不是完美解决了 LRU 缓存的需求？<br>也许读者会问，为什么要是双向链表，单链表行不行？另外，既然哈希表中已经存了 key，为什么链表中还要存键值对呢，只存值不就行了？<br>想的时候都是问题，只有做的时候才有答案。这样设计的原因，必须等我们亲自实现 LRU 算法之后才能理解，所以我们开始看代码吧～</p><h3 id="四、代码实现"><a href="#四、代码实现" class="headerlink" title="四、代码实现"></a>四、代码实现</h3><p>很多编程语言都有内置的哈希链表或者类似 LRU 功能的库函数，但是为了帮大家理解算法的细节，我们用 Java 自己造轮子实现一遍 LRU 算法。<br>首先，我们把双链表的节点类写出来，为了简化，key 和 val 都认为是 int 类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> key, val;<br>    <span class="hljs-keyword">public</span> Node next, prev;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.key = k;<br>        <span class="hljs-keyword">this</span>.val = v;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后依靠我们的 Node 类型构建一个双链表，实现几个需要的 API（这些操作的时间复杂度均为 $O(1)$)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoubleList</span> </span>&#123;  <br>    <span class="hljs-comment">// 在链表头部添加节点 x，时间 O(1)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addFirst</span><span class="hljs-params">(Node x)</span></span>;<br>    <span class="hljs-comment">// 删除链表中的 x 节点（x 一定存在）</span><br>    <span class="hljs-comment">// 由于是双链表且给的是目标 Node 节点，时间 O(1)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(Node x)</span></span>;<br>    <br>    <span class="hljs-comment">// 删除链表中最后一个节点，并返回该节点，时间 O(1)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">removeLast</span><span class="hljs-params">()</span></span>;<br>    <br>    <span class="hljs-comment">// 返回链表长度，时间 O(1)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>PS：这就是普通双向链表的实现，为了让读者集中精力理解 LRU 算法的逻辑，就省略链表的具体代码。<br>到这里就能回答刚才“为什么必须要用双向链表”的问题了，因为我们需要删除操作。删除一个节点不光要得到该节点本身的指针，也需要操作其前驱节点的指针，而双向链表才能支持直接查找前驱，保证操作的时间复杂度 $O(1)$。<br>有了双向链表的实现，我们只需要在 LRU 算法中把它和哈希表结合起来即可。我们先把逻辑理清楚：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// key 映射到 Node(key, val)</span><br>HashMap&lt;Integer, Node&gt; map;<br><span class="hljs-comment">// Node(k1, v1) &lt;-&gt; Node(k2, v2)...</span><br>DoubleList cache;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (key 不存在) &#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;        <br>        将数据 (key, val) 提到开头；<br>        <span class="hljs-keyword">return</span> val;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key, <span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>    Node x = <span class="hljs-keyword">new</span> Node(key, val);<br>    <span class="hljs-keyword">if</span> (key 已存在) &#123;<br>        把旧的数据删除；<br>        将新节点 x 插入到开头；<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (cache 已满) &#123;<br>            删除链表的最后一个数据腾位置；<br>            删除 map 中映射到该数据的键；<br>        &#125; <br>        将新节点 x 插入到开头；<br>        map 中新建 key 对新节点 x 的映射；<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果能够看懂上述逻辑，翻译成代码就很容易理解了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LRUCache</span> </span>&#123;<br>    <span class="hljs-comment">// key -&gt; Node(key, val)</span><br>    <span class="hljs-keyword">private</span> HashMap&lt;Integer, Node&gt; map;<br>    <span class="hljs-comment">// Node(k1, v1) &lt;-&gt; Node(k2, v2)...</span><br>    <span class="hljs-keyword">private</span> DoubleList cache;<br>    <span class="hljs-comment">// 最大容量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> cap;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LRUCache</span><span class="hljs-params">(<span class="hljs-keyword">int</span> capacity)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.cap = capacity;<br>        map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        cache = <span class="hljs-keyword">new</span> DoubleList();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!map.containsKey(key))<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> val = map.get(key).val;<br>        <span class="hljs-comment">// 利用 put 方法把该数据提前</span><br>        put(key, val);<br>        <span class="hljs-keyword">return</span> val;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key, <span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        <span class="hljs-comment">// 先把新节点 x 做出来</span><br>        Node x = <span class="hljs-keyword">new</span> Node(key, val);<br>        <br>        <span class="hljs-keyword">if</span> (map.containsKey(key)) &#123;<br>            <span class="hljs-comment">// 删除旧的节点，新的插到头部</span><br>            cache.remove(map.get(key));<br>            cache.addFirst(x);<br>            <span class="hljs-comment">// 更新 map 中对应的数据</span><br>            map.put(key, x);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (cap == cache.size()) &#123;<br>                <span class="hljs-comment">// 删除链表最后一个数据</span><br>                Node last = cache.removeLast();<br>                map.remove(last.key);<br>            &#125;<br>            <span class="hljs-comment">// 直接添加到头部</span><br>            cache.addFirst(x);<br>            map.put(key, x);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里就能回答之前的问答题“为什么要在链表中同时存储 key 和 val，而不是只存储 val”，注意这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (cap == cache.size()) &#123;<br>    <span class="hljs-comment">// 删除链表最后一个数据</span><br>    Node last = cache.removeLast();<br>    map.remove(last.key);<br>&#125;<br></code></pre></td></tr></table></figure><p>当缓存容量已满，我们不仅仅要删除最后一个 Node 节点，还要把 map 中映射到该节点的 key 同时删除，而这个 key 只能由 Node 得到。如果 Node 结构中只存储 val，那么我们就无法得知 key 是什么，就无法删除 map 中的键，造成错误。<br>至此，你应该已经掌握 LRU 算法的思想和实现了，很容易犯错的一点是：处理链表节点的同时不要忘了更新哈希表中对节点的映射。</p><p><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%8F%89%E5%A0%86%E8%AF%A6%E8%A7%A3%E5%AE%9E%E7%8E%B0%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97">上一篇：二叉堆详解实现优先级队列</a><br><a href="/2016/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E6%93%8D%E4%BD%9C%E9%9B%86%E9%94%A6">下一篇：二叉搜索树操作集锦</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归详解</title>
      <link href="2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E9%80%92%E5%BD%92%E8%AF%A6%E8%A7%A3/"/>
      <url>2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E9%80%92%E5%BD%92%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="递归详解"><a href="#递归详解" class="headerlink" title="递归详解"></a>递归详解</h1><p>首先说明一个问题，简单阐述一下递归，分治算法，动态规划，贪心算法这几个东西的区别和联系，心里有个印象就好。<br>递归是一种编程技巧，一种解决问题的思维方式；分治算法和动态规划很大程度上是递归思想基础上的（虽然动态规划的最终版本大都不是递归了，但解题思想还是离不开递归），解决更具体问题的两类算法思想；贪心算法是动态规划算法的一个子集，可以更高效解决一部分更特殊的问题。<br>分治算法将在这节讲解，以最经典的归并排序为例，它把待排序数组不断二分为规模更小的子问题处理，这就是 “分而治之” 这个词的由来。显然，排序问题分解出的子问题是不重复的，如果有的问题分解后的子问题有重复的（重叠子问题性质），那么就交给动态规划算法去解决！</p><h2 id="递归详解-1"><a href="#递归详解-1" class="headerlink" title="递归详解"></a>递归详解</h2><p>介绍分治之前，首先要弄清楚递归这个概念。<br>递归的基本思想是某个函数直接或者间接地调用自身，这样就把原问题的求解转换为许多性质相同但是规模更小的子问题。我们只需要关注如何把原问题划分成符合条件的子问题，而不需要去研究这个子问题是如何被解决的。递归和枚举的区别在于：枚举是横向地把问题划分，然后依次求解子问题，而递归是把问题逐级分解，是纵向的拆分。<br>以下会举例说明我对递归的一点理解，<strong>如果你不想看下去了，请记住这几个问题怎么回答：</strong></p><ol><li>如何给一堆数字排序？ 答：分成两半，先排左半边再排右半边，最后合并就行了，至于怎么排左边和右边，请重新阅读这句话。</li><li>孙悟空身上有多少根毛？ 答：一根毛加剩下的毛。</li><li>你今年几岁？ 答：去年的岁数加一岁,1999 年我出生。<br>递归代码最重要的两个特征：结束条件和自我调用。自我调用是在解决子问题，而结束条件定义了最简子问题的答案。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">func</span><span class="hljs-params">(你今年几岁)</span> </span>&#123;<br>    <span class="hljs-comment">// 最简子问题，结束条件</span><br>    <span class="hljs-keyword">if</span> (你<span class="hljs-number">1999</span>年几岁) <span class="hljs-keyword">return</span> 我<span class="hljs-number">0</span>岁;<br>    <span class="hljs-comment">// 自我调用，缩小规模</span><br>    <span class="hljs-keyword">return</span> func(你去年几岁) + <span class="hljs-number">1</span>;   <br>&#125;<br></code></pre></td></tr></table></figure>其实仔细想想，<strong>递归运用最成功的是什么？我认为是数学归纳法。</strong>我们高中都学过数学归纳法，使用场景大概是：我们推不出来某个求和公式，但是我们试了几个比较小的数，似乎发现了一点规律，然后编了一个公式，看起来应该是正确答案。但是数学是很严谨的，你哪怕穷举了一万个数都是正确的，但是第一万零一个数正确吗？这就要数学归纳法发挥神威了，可以假设我们编的这个公式在第 k 个数时成立，如果证明在第 k + 1 时也成立，那么我们编的这个公式就是正确的。<br>那么数学归纳法和递归有什么联系？我们刚才说了，递归代码必须要有结束条件，如果没有的话就会进入无穷无尽的自我调用，直到内存耗尽。而数学证明的难度在于，你可以尝试有穷种情况，但是难以将你的结论延伸到无穷大。这里就可以看出联系了 —— 无穷。<br>递归代码的精髓在于调用自己去解决规模更小的子问题，直到到达结束条件；而数学归纳法之所以有用，就在于不断把我们的猜测向上加一，扩大结论的规模，没有结束条件，从而把结论延伸到无穷无尽，也就完成了猜测正确性的证明。<h3 id="为什么要写递归"><a href="#为什么要写递归" class="headerlink" title="为什么要写递归"></a>为什么要写递归</h3>首先为了训练逆向思考的能力。递推的思维是正常人的思维，总是看着眼前的问题思考对策，解决问题是将来时；递归的思维，逼迫我们倒着思考，看到问题的尽头，把解决问题的过程看做过去时。<br>第二，练习分析问题的结构，当问题可以被分解成相同结构的小问题时，你能敏锐发现这个特点，进而高效解决问题。<br>第三，跳出细节，从整体上看问题。再说说归并排序，其实可以不用递归来划分左右区域的，但是代价就是代码极其难以理解，大概看一下代码（归并排序在后面讲，这里大致看懂意思就行，体会递归的妙处）：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Comparable[] a)</span></span>&#123;    <br>    <span class="hljs-keyword">int</span> N = a.length;<br>    <span class="hljs-comment">// 这么复杂，是对排序的不尊重。我拒绝研究这样的代码。</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> sz = <span class="hljs-number">1</span>; sz &lt; N; sz = sz + sz)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> lo = <span class="hljs-number">0</span>; lo &lt; N - sz; lo += sz + sz)<br>            merge(a, lo, lo + sz - <span class="hljs-number">1</span>, Math.min(lo + sz + sz - <span class="hljs-number">1</span>, N - <span class="hljs-number">1</span>));<br>&#125;<br><span class="hljs-comment">/* 我还是选择递归，简单，漂亮 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Comparable[] a, <span class="hljs-keyword">int</span> lo, <span class="hljs-keyword">int</span> hi)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (lo &gt;= hi) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> mid = lo + (hi - lo) / <span class="hljs-number">2</span>;<br>    sort(a, lo, mid); <span class="hljs-comment">// 排序左半边</span><br>    sort(a, mid + <span class="hljs-number">1</span>, hi); <span class="hljs-comment">// 排序右半边</span><br>    merge(a, lo, mid, hi); <span class="hljs-comment">// 合并两边</span><br>&#125;<br></code></pre></td></tr></table></figure>看起来简洁漂亮是一方面，关键是<strong>可解释性很强</strong>：把左半边排序，把右半边排序，最后合并两边。而非递归版本看起来不知所云，充斥着各种难以理解的边界计算细节，特别容易出 bug 且难以调试，人生苦短，我更倾向于递归版本。<br>显然有时候递归处理是高效的，比如归并排序，<strong>有时候是低效的</strong>，比如数孙悟空身上的毛，因为堆栈会消耗额外空间，而简单的递推不会消耗空间。比如这个例子，给一个链表头，计算它的长度：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 典型的递推遍历框架，需要额外空间 O(1) */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> size = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (Node p = head; p != <span class="hljs-keyword">null</span>; p = p.next) size++;<br>    <span class="hljs-keyword">return</span> size;<br>&#125;<br><span class="hljs-comment">/* 我偏要递归，万物皆递归，需要额外空间 O(N) */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> size(head.next) + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="写递归的技巧"><a href="#写递归的技巧" class="headerlink" title="写递归的技巧"></a>写递归的技巧</h3>我的一点心得是：<strong>明白一个函数的作用并相信它能完成这个任务，千万不要试图跳进细节。</strong>千万不要跳进这个函数里面企图探究更多细节，否则就会陷入无穷的细节无法自拔，人脑能压几个栈啊。<br>先举个最简单的例子：遍历二叉树。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br>    traverse(root-&gt;left);<br>    traverse(root-&gt;right);<br>&#125;<br></code></pre></td></tr></table></figure>这几行代码就足以扫荡任何一棵二叉树了。我想说的是，对于递归函数<code>traverse(root)</code>，我们只要相信：给它一个根节点<code>root</code>，它就能遍历这棵树，因为写这个函数不就是为了这个目的吗？所以我们只需要把这个节点的左右节点再甩给这个函数就行了，因为我相信它能完成任务的。那么遍历一棵N叉数呢？太简单了好吧，和二叉树一模一样啊。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">for</span> (child : root-&gt;children)<br>        traverse(child);<br>&#125;<br></code></pre></td></tr></table></figure>至于遍历的什么前、中、后序，那都是显而易见的，对于N叉树，显然没有中序遍历。</li></ol><p>以下<strong>详解 LeetCode 的一道题来说明</strong>：给一课二叉树，和一个目标值，节点上的值有正有负，返回树中和等于目标值的路径条数，让你编写 pathSum 函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#x2F;* 来源于 LeetCode PathSum III： https:&#x2F;&#x2F;leetcode.com&#x2F;problems&#x2F;path-sum-iii&#x2F; *&#x2F;<br>root &#x3D; [10,5,-3,3,2,null,11,3,-2,null,1],<br>sum &#x3D; 8<br>      10<br>     &#x2F;  \<br>    5   -3<br>   &#x2F; \    \<br>  3   2   11<br> &#x2F; \   \<br>3  -2   1<br>Return 3. The paths that sum to 8 are:<br>1.  5 -&gt; 3<br>2.  5 -&gt; 2 -&gt; 1<br>3. -3 -&gt; 11<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* 看不懂没关系，底下有更详细的分析版本，这里突出体现递归的简洁优美 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pathSum</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> sum)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == null) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> count(root, sum) + <br>        pathSum(root.left, sum) + pathSum(root.right, sum);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">count</span><span class="hljs-params">(TreeNode node, <span class="hljs-keyword">int</span> sum)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (node == null) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> (node.val == sum) + <br>        count(node.left, sum - node.val) + count(node.right, sum - node.val);<br>&#125;<br></code></pre></td></tr></table></figure><p>题目看起来很复杂吧，不过代码却极其简洁，这就是递归的魅力。我来简单总结这个问题的<strong>解决过程</strong>：<br>首先明确，递归求解树的问题必然是要遍历整棵树的，所以<strong>二叉树的遍历框架</strong>（分别对左右孩子递归调用函数本身）必然要出现在主函数 pathSum 中。那么对于每个节点，他们应该干什么呢？他们应该看看，自己和脚底下的小弟们包含多少条符合条件的路径。好了，这道题就结束了。<br>按照前面说的技巧，根据刚才的分析来定义清楚每个递归函数应该做的事：<br>PathSum 函数：给他一个节点和一个目标值，他返回以这个节点为根的树中，和为目标值的路径总数。<br>count 函数：给他一个节点和一个目标值，他返回以这个节点为根的树中，能凑出几个以该节点为路径开头，和为目标值的路径总数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* 有了以上铺垫，详细注释一下代码 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pathSum</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> sum)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == null) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> pathImLeading = count(root, sum); <span class="hljs-comment">// 自己为开头的路径数</span><br>    <span class="hljs-keyword">int</span> leftPathSum = pathSum(root.left, sum); <span class="hljs-comment">// 左边路径总数（相信他能算出来）</span><br>    <span class="hljs-keyword">int</span> rightPathSum = pathSum(root.right, sum); <span class="hljs-comment">// 右边路径总数（相信他能算出来）</span><br>    <span class="hljs-keyword">return</span> leftPathSum + rightPathSum + pathImLeading;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">count</span><span class="hljs-params">(TreeNode node, <span class="hljs-keyword">int</span> sum)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (node == null) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 我自己能不能独当一面，作为一条单独的路径呢？</span><br>    <span class="hljs-keyword">int</span> isMe = (node.val == sum) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 左边的小老弟，你那边能凑几个 sum - node.val 呀？</span><br>    <span class="hljs-keyword">int</span> leftBrother = count(node.left, sum - node.val); <br>    <span class="hljs-comment">// 右边的小老弟，你那边能凑几个 sum - node.val 呀？</span><br>    <span class="hljs-keyword">int</span> rightBrother = count(node.right, sum - node.val);<br>    <span class="hljs-keyword">return</span>  isMe + leftBrother + rightBrother; <span class="hljs-comment">// 我这能凑这么多个</span><br>&#125;<br></code></pre></td></tr></table></figure><p>还是那句话，明白每个函数能做的事，并相信他们能够完成。<br>总结下，PathSum 函数提供的二叉树遍历框架，在遍历中对每个节点调用 count 函数，看出先序遍历了吗（这道题什么序都是一样的）；count 函数也是一个二叉树遍历，用于寻找以该节点开头的目标值路径。好好体会吧！</p><h2 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h2><p><strong>归并排序</strong>，典型的分治算法；分治，典型的递归结构。<br>分治算法可以分三步走：分解 -&gt; 解决 -&gt; 合并</p><ol><li>分解原问题为结构相同的子问题。</li><li>分解到某个容易求解的边界之后，进行第归求解。</li><li>将子问题的解合并成原问题的解。<br>归并排序，我们就叫这个函数<code>merge_sort</code>吧，按照我们上面说的，要明确该函数的职责，即<strong>对传入的一个数组排序</strong>。OK，那么这个问题能不能分解呢？当然可以！给一个数组排序，不就等于给该数组的两半分别排序，然后合并就完事了。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(一个数组)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (可以很容易处理) <span class="hljs-keyword">return</span>;<br>    merge_sort(左半个数组);<br>    merge_sort(右半个数组);<br>    merge(左半个数组, 右半个数组);<br>&#125;<br></code></pre></td></tr></table></figure>好了，这个算法也就这样了，完全没有任何难度。记住之前说的，相信函数的能力，传给他半个数组，那么这半个数组就已经被排好了。而且你会发现这不就是个二叉树遍历模板吗？为什么是后序遍历？因为我们分治算法的套路是 <strong>分解 -&gt; 解决（触底） -&gt; 合并（回溯）</strong> 啊，先左右分解，再处理合并，回溯就是在退栈，就相当于后序遍历了。至于<code>merge</code>函数，参考两个有序链表的合并，简直一模一样，下面直接贴代码吧。<br>下面参考《算法4》的 Java 代码，很漂亮。由此可见，不仅算法思想思想重要，编码技巧也是挺重要的吧！多思考，多模仿。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Merge</span> </span>&#123;<br>    <span class="hljs-comment">// 不要在 merge 函数里构造新数组了，因为 merge 函数会被多次调用，影响性能</span><br>    <span class="hljs-comment">// 直接一次性构造一个足够大的数组，简洁，高效</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Comparable[] aux;<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Comparable[] a)</span> </span>&#123;<br>        aux = <span class="hljs-keyword">new</span> Comparable[a.length];<br>        sort(a, <span class="hljs-number">0</span>, a.length - <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Comparable[] a, <span class="hljs-keyword">int</span> lo, <span class="hljs-keyword">int</span> hi)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (lo &gt;= hi) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">int</span> mid = lo + (hi - lo) / <span class="hljs-number">2</span>;<br>        sort(a, lo, mid);<br>        sort(a, mid + <span class="hljs-number">1</span>, hi);<br>        merge(a, lo, mid, hi);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(Comparable[] a, <span class="hljs-keyword">int</span> lo, <span class="hljs-keyword">int</span> mid, <span class="hljs-keyword">int</span> hi)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i = lo, j = mid + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = lo; k &lt;= hi; k++)<br>            aux[k] = a[k];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = lo; k &lt;= hi; k++) &#123;<br>            <span class="hljs-keyword">if</span>      (i &gt; mid)              &#123; a[k] = aux[j++]; &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j &gt; hi)               &#123; a[k] = aux[i++]; &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (less(aux[j], aux[i])) &#123; a[k] = aux[j++]; &#125;<br>            <span class="hljs-keyword">else</span>                           &#123; a[k] = aux[i++]; &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">less</span><span class="hljs-params">(Comparable v, Comparable w)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> v.compareTo(w) &lt; <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>LeetCode 上有分治算法的专项练习，可复制到浏览器去做题：<br><a href="https://leetcode.com/tag/divide-and-conquer/">https://leetcode.com/tag/divide-and-conquer/</a></li></ol><p><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95">上一篇：洗牌算法</a><br><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/LRU%E7%AE%97%E6%B3%95">下一篇：如何实现LRU算法</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>koko偷香蕉</title>
      <link href="2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/koko%E5%81%B7%E9%A6%99%E8%95%89/"/>
      <url>2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/koko%E5%81%B7%E9%A6%99%E8%95%89/</url>
      
        <content type="html"><![CDATA[<h1 id="如何运用二分查找算法"><a href="#如何运用二分查找算法" class="headerlink" title="如何运用二分查找算法"></a>如何运用二分查找算法</h1><p>二分查找到底有能运用在哪里？<br>最常见的就是教科书上的例子，在<strong>有序数组</strong>中搜索给定的某个目标值的索引。再推广一点，如果目标值存在重复，修改版的二分查找可以返回目标值的左侧边界索引或者右侧边界索引。<br>PS：以上提到的三种二分查找算法形式在前文「二分查找详解」有代码详解，如果没看过强烈建议看看。<br>抛开有序数组这个枯燥的数据结构，二分查找如何运用到实际的算法问题中呢？当搜索空间有序的时候，就可以通过二分搜索「剪枝」，大幅提升效率。<br>说起来玄乎得很，本文先用一个具体的「Koko 吃香蕉」的问题来举个例子。</p><h3 id="一、问题分析"><a href="#一、问题分析" class="headerlink" title="一、问题分析"></a>一、问题分析</h3><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E4%BA%8C%E5%88%86%E5%BA%94%E7%94%A8/title1.png"><br>也就是说，Koko 每小时最多吃一堆香蕉，如果吃不下的话留到下一小时再吃；如果吃完了这一堆还有胃口，也只会等到下一小时才会吃下一堆。在这个条件下，让我们确定 Koko 吃香蕉的<strong>最小速度</strong>（根/小时）。<br>如果直接给你这个情景，你能想到哪里能用到二分查找算法吗？如果没有见过类似的问题，恐怕是很难把这个问题和二分查找联系起来的。<br>那么我们先抛开二分查找技巧，想想如何暴力解决这个问题呢？<br>首先，算法要求的是「<code>H</code> 小时内吃完香蕉的最小速度」，我们不妨称为 <code>speed</code>，请问 <code>speed</code> 最大可能为多少，最少可能为多少呢？<br>显然最少为 1，最大为 <code>max(piles)</code>，因为一小时最多只能吃一堆香蕉。那么暴力解法就很简单了，只要从 1 开始穷举到 <code>max(piles)</code>，一旦发现发现某个值可以在 <code>H</code> 小时内吃完所有香蕉，这个值就是最小速度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">minEatingSpeed</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] piles, <span class="hljs-keyword">int</span> H)</span> </span>&#123;<br><span class="hljs-comment">// piles 数组的最大值</span><br>    <span class="hljs-keyword">int</span> max = getMax(piles);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> speed = <span class="hljs-number">1</span>; speed &lt; max; speed++) &#123;<br>    <span class="hljs-comment">// 以 speed 是否能在 H 小时内吃完香蕉</span><br>        <span class="hljs-keyword">if</span> (canFinish(piles, speed, H))<br>            <span class="hljs-keyword">return</span> speed;<br>    &#125;<br>    <span class="hljs-keyword">return</span> max;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意这个 for 循环，就是在<strong>连续的空间线性搜索，这就是二分查找可以发挥作用的标志</strong>。由于我们要求的是最小速度，所以可以用一个<strong>搜索左侧边界的二分查找</strong>来代替线性搜索，提升效率：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">minEatingSpeed</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] piles, <span class="hljs-keyword">int</span> H)</span> </span>&#123;<br>    <span class="hljs-comment">// 套用搜索左侧边界的算法框架</span><br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">1</span>, right = getMax(piles) + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>        <span class="hljs-comment">// 防止溢出</span><br>        <span class="hljs-keyword">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (canFinish(piles, mid, H)) &#123;<br>            right = mid;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> left;<br>&#125;<br></code></pre></td></tr></table></figure><p>PS：如果对于这个二分查找算法的细节问题有疑问，建议看下前文「二分查找详解」搜索左侧边界的算法模板，这里不展开了。<br>剩下的辅助函数也很简单，可以一步步拆解实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 时间复杂度 O(N)</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">canFinish</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] piles, <span class="hljs-keyword">int</span> speed, <span class="hljs-keyword">int</span> H)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> time = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> n : piles) &#123;<br>        time += timeOf(n, speed);<br>    &#125;<br>    <span class="hljs-keyword">return</span> time &lt;= H;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">timeOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> speed)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (n / speed) + ((n % speed &gt; <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getMax</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] piles)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> max = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> n : piles)<br>        max = Math.max(n, max);<br>    <span class="hljs-keyword">return</span> max;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，借助二分查找技巧，算法的时间复杂度为 O(NlogN)。</p><h3 id="二、扩展延伸"><a href="#二、扩展延伸" class="headerlink" title="二、扩展延伸"></a>二、扩展延伸</h3><p>类似的，再看一道运输问题：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E4%BA%8C%E5%88%86%E5%BA%94%E7%94%A8/title2.png"><br>要在 <code>D</code> 天内运输完所有货物，货物不可分割，如何确定运输的最小载重呢（下文称为 <code>cap</code>）？<br>其实本质上和 Koko 吃香蕉的问题一样的，首先确定 <code>cap</code> 的最小值和最大值分别为 <code>max(weights)</code> 和 <code>sum(weights)</code>。<br>我们要求<strong>最小载重</strong>，所以可以用搜索左侧边界的二分查找算法优化线性搜索：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 寻找左侧边界的二分查找</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">shipWithinDays</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] weights, <span class="hljs-keyword">int</span> D)</span> </span>&#123;<br><span class="hljs-comment">// 载重可能的最小值</span><br>    <span class="hljs-keyword">int</span> left = getMax(weights);<br><span class="hljs-comment">// 载重可能的最大值 + 1</span><br>    <span class="hljs-keyword">int</span> right = getSum(weights) + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>        <span class="hljs-keyword">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (canFinish(weights, D, mid)) &#123;<br>            right = mid;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> left;<br>&#125;<br><span class="hljs-comment">// 如果载重为 cap，是否能在 D 天内运完货物？</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">canFinish</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] w, <span class="hljs-keyword">int</span> D, <span class="hljs-keyword">int</span> cap)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> day = <span class="hljs-number">0</span>; day &lt; D; day++) &#123;<br>        <span class="hljs-keyword">int</span> maxCap = cap;<br>        <span class="hljs-keyword">while</span> ((maxCap -= w[i]) &gt;= <span class="hljs-number">0</span>) &#123;<br>            i++;<br>            <span class="hljs-keyword">if</span> (i == w.length)<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过这两个例子，你是否明白了二分查找在实际问题中的应用？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    <span class="hljs-keyword">if</span> (isOK(i))<br>        <span class="hljs-keyword">return</span> ans;<br></code></pre></td></tr></table></figure><p><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB">上一篇：如何计算编辑距离</a><br><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%8E%A5%E9%9B%A8%E6%B0%B4">下一篇：如何高效解决接雨水问题</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k个一组反转链表</title>
      <link href="2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/k%E4%B8%AA%E4%B8%80%E7%BB%84%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
      <url>2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/k%E4%B8%AA%E4%B8%80%E7%BB%84%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="如何k个一组反转链表"><a href="#如何k个一组反转链表" class="headerlink" title="如何k个一组反转链表"></a>如何k个一组反转链表</h1><p>之前的文章「递归反转链表的一部分」讲了如何递归地反转一部分链表，有读者就问如何迭代地反转链表，这篇文章解决的问题也需要反转链表的函数，我们不妨就用迭代方式来解决。<br>本文要解决「K 个一组反转链表」，不难理解：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kgroup/title.png"><br>这个问题经常在面经中看到，而且 LeetCode 上难度是 Hard，它真的有那么难吗？<br>对于基本数据结构的算法问题其实都不难，只要结合特点一点点拆解分析，一般都没啥难点。下面我们就来拆解一下这个问题。</p><h3 id="一、分析问题"><a href="#一、分析问题" class="headerlink" title="一、分析问题"></a>一、分析问题</h3><p>首先，前文<a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%AD%A6%E4%B9%A0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E7%9A%84%E6%A1%86%E6%9E%B6%E6%80%9D%E7%BB%B4">学习数据结构的框架思维</a>提到过，链表是一种兼具递归和迭代性质的数据结构，认真思考一下可以发现<strong>这个问题具有递归性质</strong>。<br>什么叫递归性质？直接上图理解，比如说我们对这个链表调用 <code>reverseKGroup(head, 2)</code>，即以 2 个节点为一组反转链表：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kgroup/1.jpg"><br>如果我设法把前 2 个节点反转，那么后面的那些节点怎么处理？后面的这些节点也是一条链表，而且规模（长度）比原来这条链表小，这就叫<strong>子问题</strong>。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kgroup/2.jpg"><br>我们可以直接递归调用 <code>reverseKGroup(cur, 2)</code>，因为子问题和原问题的结构完全相同，这就是所谓的递归性质。<br>发现了递归性质，就可以得到大致的算法流程：<br><strong>1、先反转以 <code>head</code> 开头的 <code>k</code> 个元素</strong>。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kgroup/3.jpg"><br><strong>2、将第 <code>k + 1</code> 个元素作为 <code>head</code> 递归调用 <code>reverseKGroup</code> 函数</strong>。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kgroup/4.jpg"><br><strong>3、将上述两个过程的结果连接起来</strong>。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kgroup/5.jpg"><br>整体思路就是这样了，最后一点值得注意的是，递归函数都有个 base case，对于这个问题是什么呢？<br>题目说了，如果最后的元素不足 <code>k</code> 个，就保持不变。这就是 base case，待会会在代码里体现。</p><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><p>首先，我们要实现一个 <code>reverse</code> 函数反转一个区间之内的元素。在此之前我们再简化一下，给定链表头结点，如何反转整个链表？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 反转以 a 为头结点的链表</span><br><span class="hljs-function">ListNode <span class="hljs-title">reverse</span><span class="hljs-params">(ListNode a)</span> </span>&#123;<br>    ListNode pre, cur, nxt;<br>    pre = <span class="hljs-keyword">null</span>; cur = a; nxt = a;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>        nxt = cur.next;<br>        <span class="hljs-comment">// 逐个结点反转</span><br>        cur.next = pre;<br>        <span class="hljs-comment">// 更新指针位置</span><br>        pre = cur;<br>        cur = nxt;<br>    &#125;<br>    <span class="hljs-comment">// 返回反转后的头结点</span><br>    <span class="hljs-keyword">return</span> pre;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kgroup/8.gif"><br>这次使用迭代思路来实现的，借助动画理解应该很容易。<br>「反转以 <code>a</code> 为头结点的链表」其实就是「反转 <code>a</code> 到 null 之间的结点」，那么如果让你「反转 <code>a</code> 到 <code>b</code> 之间的结点」，你会不会？<br>只要更改函数签名，并把上面的代码中 <code>null</code> 改成 <code>b</code> 即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 反转区间 [a, b) 的元素，注意是左闭右开 */</span><br><span class="hljs-function">ListNode <span class="hljs-title">reverse</span><span class="hljs-params">(ListNode a, ListNode b)</span> </span>&#123;<br>    ListNode pre, cur, nxt;<br>    pre = <span class="hljs-keyword">null</span>; cur = a; nxt = a;<br>    <span class="hljs-comment">// while 终止的条件改一下就行了</span><br>    <span class="hljs-keyword">while</span> (cur != b) &#123;<br>        nxt = cur.next;<br>        cur.next = pre;<br>        pre = cur;<br>        cur = nxt;<br>    &#125;<br>    <span class="hljs-comment">// 返回反转后的头结点</span><br>    <span class="hljs-keyword">return</span> pre;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们迭代实现了反转部分链表的功能，接下来就按照之前的逻辑编写 <code>reverseKGroup</code> 函数即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">ListNode <span class="hljs-title">reverseKGroup</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    <span class="hljs-comment">// 区间 [a, b) 包含 k 个待反转元素</span><br>    ListNode a, b;<br>    a = b = head;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>        <span class="hljs-comment">// 不足 k 个，不需要反转，base case</span><br>        <span class="hljs-keyword">if</span> (b == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> head;<br>        b = b.next;<br>    &#125;<br>    <span class="hljs-comment">// 反转前 k 个元素</span><br>    ListNode newHead = reverse(a, b);<br>    <span class="hljs-comment">// 递归反转后续链表并连接起来</span><br>    a.next = reverseKGroup(b, k);<br>    <span class="hljs-keyword">return</span> newHead;<br>&#125;<br></code></pre></td></tr></table></figure><p>解释一下 <code>for</code> 循环之后的几句代码，注意 <code>reverse</code> 函数是反转区间 <code>[a, b)</code>，所以情形是这样的：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kgroup/6.jpg"><br>递归部分就不展开了，整个函数递归完成之后就是这个结果，完全符合题意：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kgroup/7.jpg"></p><h3 id="三、最后说两句"><a href="#三、最后说两句" class="headerlink" title="三、最后说两句"></a>三、最后说两句</h3><p>从阅读量上看，基本数据结构相关的算法文章看的人都不多，我想说这是要吃亏的。<br>大家喜欢看动态规划相关的问题，可能因为面试很常见，但就我个人理解，很多算法思想都是源于数据结构的。我们公众号的成名之作之一，「学习数据结构的框架思维」就提过，什么动规、回溯、分治算法，其实都是树的遍历，树这种结构它不就是个多叉链表吗？你能处理基本数据结构的问题，解决一般的算法问题应该也不会太费事。<br>那么如何分解问题、发现递归性质呢？这个只能多练习，也许后续可以专门写一篇文章来探讨一下，本文就到此为止吧，希望对大家有帮助！</p><p><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2">上一篇：如何寻找最长回文子串</a><br><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%90%88%E6%B3%95%E6%8B%AC%E5%8F%B7%E5%88%A4%E5%AE%9A">下一篇：如何判定括号合法性</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找判定子序列</title>
      <link href="2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%88%A4%E5%AE%9A%E5%AD%90%E5%BA%8F%E5%88%97/"/>
      <url>2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%88%A4%E5%AE%9A%E5%AD%90%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="二分查找高效判定子序列"><a href="#二分查找高效判定子序列" class="headerlink" title="二分查找高效判定子序列"></a>二分查找高效判定子序列</h1><p>二分查找本身不难理解，难在巧妙地运用二分查找技巧。对于一个问题，你可能都很难想到它跟二分查找有关，比如前文 <a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AE%BE%E8%AE%A1%EF%BC%9A%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97">最长递增子序列</a> 就借助一个纸牌游戏衍生出二分查找解法。<br>今天再讲一道巧用二分查找的算法问题：如何判定字符串 <code>s</code> 是否是字符串 <code>t</code> 的子序列（可以假定 <code>s</code> 长度比较小，且 <code>t</code> 的长度非常大）。举两个例子：</p><p>s = “abc”, t = “<strong>a</strong>h<strong>b</strong>gd<strong>c</strong>“, return true.</p><p>s = “axc”, t = “ahbgdc”, return false.<br>题目很容易理解，而且看起来很简单，但很难想到这个问题跟二分查找有关吧？</p><h3 id="一、问题分析"><a href="#一、问题分析" class="headerlink" title="一、问题分析"></a>一、问题分析</h3><p>首先，一个很简单的解法是这样的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isSubsequence</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s, <span class="hljs-built_in">string</span> t)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; s.size() &amp;&amp; j &lt; t.size()) &#123;<br>        <span class="hljs-keyword">if</span> (s[i] == t[j]) i++;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i == s.size();<br>&#125;<br></code></pre></td></tr></table></figure><p>其思路也非常简单，利用双指针 <code>i, j</code> 分别指向 <code>s, t</code>，一边前进一边匹配子序列：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%AD%90%E5%BA%8F%E5%88%97/1.gif" alt="gif"><br>读者也许会问，这不就是最优解法了吗，时间复杂度只需 O(N)，N 为 <code>t</code> 的长度。<br>是的，如果仅仅是这个问题，这个解法就够好了，<strong>不过这个问题还有 follow up</strong>：<br>如果给你一系列字符串 <code>s1,s2,...</code> 和字符串 <code>t</code>，你需要判定每个串 <code>s</code> 是否是 <code>t</code> 的子序列（可以假定 <code>s</code> 较短，<code>t</code> 很长）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">boolean</span>[] isSubsequence(String[] sn, String t);<br></code></pre></td></tr></table></figure><p>你也许会问，这不是很简单吗，还是刚才的逻辑，加个 for 循环不就行了？<br>可以，但是此解法处理每个 <code>s</code> 时间复杂度仍然是 O(N)，而如果巧妙运用二分查找，可以将时间复杂度降低，大约是 O(MlogN)。由于 N 相对 M 大很多，所以后者效率会更高。</p><h3 id="二、二分思路"><a href="#二、二分思路" class="headerlink" title="二、二分思路"></a>二、二分思路</h3><p>二分思路主要是对 <code>t</code> 进行预处理，用一个字典 <code>index</code> 将每个字符出现的索引位置按顺序存储下来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> m = s.length(), n = t.length();<br>ArrayList&lt;Integer&gt;[] index = <span class="hljs-keyword">new</span> ArrayList[<span class="hljs-number">256</span>];<br><span class="hljs-comment">// 先记下 t 中每个字符出现的位置</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>    <span class="hljs-keyword">char</span> c = t.charAt(i);<br>    <span class="hljs-keyword">if</span> (index[c] == <span class="hljs-keyword">null</span>) <br>        index[c] = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    index[c].add(i);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%AD%90%E5%BA%8F%E5%88%97/2.jpg"><br>比如对于这个情况，匹配了 “ab”，应该匹配 “c” 了：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%AD%90%E5%BA%8F%E5%88%97/1.jpg"><br>按照之前的解法，我们需要 <code>j</code> 线性前进扫描字符 “c”，但借助 <code>index</code> 中记录的信息，<strong>可以二分搜索 <code>index[c]</code> 中比 j 大的那个索引</strong>，在上图的例子中，就是在 <code>[0,2,6]</code> 中搜索比 4 大的那个索引：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%AD%90%E5%BA%8F%E5%88%97/3.jpg"><br>这样就可以直接得到下一个 “c” 的索引。现在的问题就是，如何用二分查找计算那个恰好比 4 大的索引呢？答案是，寻找左侧边界的二分搜索就可以做到。</p><h3 id="三、再谈二分查找"><a href="#三、再谈二分查找" class="headerlink" title="三、再谈二分查找"></a>三、再谈二分查找</h3><p>在前文 <a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E8%AF%A6%E8%A7%A3">二分查找详解</a> 中，详解了如何正确写出三种二分查找算法的细节。二分查找返回目标值 <code>val</code> 的索引，对于搜索<strong>左侧边界</strong>的二分查找，有一个特殊性质：<br><strong>当 <code>val</code> 不存在时，得到的索引恰好是比 <code>val</code> 大的最小元素索引</strong>。<br>什么意思呢，就是说如果在数组 <code>[0,1,3,4]</code> 中搜索元素 2，算法会返回索引 2，也就是元素 3 的位置，元素 3 是数组中大于 2 的最小元素。所以我们可以利用二分搜索避免线性扫描。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 查找左侧边界的二分查找</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">left_bound</span><span class="hljs-params">(ArrayList&lt;Integer&gt; arr, <span class="hljs-keyword">int</span> tar)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> lo = <span class="hljs-number">0</span>, hi = arr.size();<br>    <span class="hljs-keyword">while</span> (lo &lt; hi) &#123;<br>        <span class="hljs-keyword">int</span> mid = lo + (hi - lo) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (tar &gt; arr.get(mid)) &#123;<br>            lo = mid + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            hi = mid;<br>        &#125; <br>    &#125;<br>    <span class="hljs-keyword">return</span> lo;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上就是搜索左侧边界的二分查找，等会儿会用到，其中的细节可以参见前文《二分查找详解》，这里不再赘述。</p><h3 id="四、代码实现"><a href="#四、代码实现" class="headerlink" title="四、代码实现"></a>四、代码实现</h3><p>这里以单个字符串 <code>s</code> 为例，对于多个字符串 <code>s</code>，可以把预处理部分抽出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isSubsequence</span><span class="hljs-params">(String s, String t)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> m = s.length(), n = t.length();<br>    <span class="hljs-comment">// 对 t 进行预处理</span><br>    ArrayList&lt;Integer&gt;[] index = <span class="hljs-keyword">new</span> ArrayList[<span class="hljs-number">256</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">char</span> c = t.charAt(i);<br>        <span class="hljs-keyword">if</span> (index[c] == <span class="hljs-keyword">null</span>) <br>            index[c] = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        index[c].add(i);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 串 t 上的指针</span><br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 借助 index 查找 s[i]</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-keyword">char</span> c = s.charAt(i);<br>        <span class="hljs-comment">// 整个 t 压根儿没有字符 c</span><br>        <span class="hljs-keyword">if</span> (index[c] == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">int</span> pos = left_bound(index[c], j);<br>        <span class="hljs-comment">// 二分搜索区间中没有找到字符 c</span><br>        <span class="hljs-keyword">if</span> (pos == index[c].size()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-comment">// 向前移动指针 j</span><br>        j = index[c].get(pos) + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>算法执行的过程是这样的：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%AD%90%E5%BA%8F%E5%88%97/2.gif"><br>可见借助二分查找，算法的效率是可以大幅提升的。 </p><p><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E8%A7%A3%E5%86%B3%E7%9A%84%E6%99%BA%E5%8A%9B%E9%A2%98">上一篇：一行代码就能解决的算法题</a><br><a href="/2016/01/01/%E6%8A%80%E6%9C%AF/linux%E8%BF%9B%E7%A8%8B">下一篇：Linux的进程、线程、文件描述符是什么</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一行代码解决的智力题</title>
      <link href="2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E8%A7%A3%E5%86%B3%E7%9A%84%E6%99%BA%E5%8A%9B%E9%A2%98/"/>
      <url>2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E8%A7%A3%E5%86%B3%E7%9A%84%E6%99%BA%E5%8A%9B%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="一行代码就能解决的算法题"><a href="#一行代码就能解决的算法题" class="headerlink" title="一行代码就能解决的算法题"></a>一行代码就能解决的算法题</h1><p>下文是我在 LeetCode 刷题过程中总结的三道有趣的「脑筋急转弯」题目，可以使用算法编程解决，但只要稍加思考，就能找到规律，直接想出答案。</p><h3 id="一、Nim-游戏"><a href="#一、Nim-游戏" class="headerlink" title="一、Nim 游戏"></a>一、Nim 游戏</h3><p>游戏规则是这样的：你和你的朋友面前有一堆石子，你们轮流拿，一次至少拿一颗，最多拿三颗，谁拿走最后一颗石子谁获胜。<br>假设你们都很聪明，由你第一个开始拿，请你写一个算法，输入一个正整数 n，返回你是否能赢（true 或 false）。<br>比如现在有 4 颗石子，算法应该返回 false。因为无论你拿 1 颗 2 颗还是 3 颗，对方都能一次性拿完，拿走最后一颗石子，所以你一定会输。<br>首先，这道题肯定可以使用动态规划，因为显然原问题存在子问题，且子问题存在重复。但是因为你们都很聪明，涉及到你和对手的博弈，动态规划会比较复杂。<br><strong>我们解决这种问题的思路一般都是反着思考</strong>：<br>如果我能赢，那么最后轮到我取石子的时候必须要剩下 1<del>3 颗石子，这样我才能一把拿完。<br>如何营造这样的一个局面呢？显然，如果对手拿的时候只剩 4 颗石子，那么无论他怎么拿，总会剩下 1</del>3 颗石子，我就能赢。<br>如何逼迫对手面对 4 颗石子呢？要想办法，让我选择的时候还有 5<del>7 颗石子，这样的话我就有把握让对方不得不面对 4 颗石子。<br>如何营造 5</del>7 颗石子的局面呢？让对手面对 8 颗石子，无论他怎么拿，都会给我剩下 5~7 颗，我就能赢。<br>这样一直循环下去，我们发现只要踩到 4 的倍数，就落入了圈套，永远逃不出 4 的倍数，而且一定会输。所以这道题的解法非常简单：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">canWinNim</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">// 如果上来就踩到 4 的倍数，那就认输吧</span><br>    <span class="hljs-comment">// 否则，可以把对方控制在 4 的倍数，必胜</span><br>    <span class="hljs-keyword">return</span> n % <span class="hljs-number">4</span> != <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二、石头游戏"><a href="#二、石头游戏" class="headerlink" title="二、石头游戏"></a>二、石头游戏</h3><p>游戏规则是这样的：你和你的朋友面前有一排石头堆，用一个数组 piles 表示，piles[i] 表示第 i 堆石子有多少个。你们轮流拿石头，一次拿一堆，但是只能拿走最左边或者最右边的石头堆。所有石头被拿完后，谁拥有的石头多，谁获胜。<br><strong>假设你们都很聪明</strong>，由你第一个开始拿，请你写一个算法，输入一个数组 piles，返回你是否能赢（true 或 false）。<br>注意，石头的堆的数量为偶数，所以你们两人拿走的堆数一定是相同的。石头的总数为奇数，也就是你们最后不可能拥有相同多的石头，一定有胜负之分。<br>举个例子，<code>piles=[2, 1, 9, 5]</code>，你先拿，可以拿 2 或者 5，你选择 2。<br><code>piles=[1, 9, 5]</code>，轮到对手，可以拿 1 或 5，他选择 5。<br><code>piles=[1, 9]</code> 轮到你拿，你拿 9。<br>最后，你的对手只能拿 1 了。<br>这样下来，你总共拥有 <code>2 + 9 = 11</code> 颗石头，对手有 <code>5 + 1 = 6</code> 颗石头，你是可以赢的，所以算法应该返回 true。<br>你看到了，并不是简单的挑数字大的选，为什么第一次选择 2 而不是 5 呢？因为 5 后面是 9，你要是贪图一时的利益，就把 9 这堆石头暴露给对手了，那你就要输了。<br>这也是强调双方都很聪明的原因，算法也是求最优决策过程下你是否能赢。<br>这道题又涉及到两人的博弈，也可以用动态规划算法暴力试，比较麻烦。但我们只要对规则深入思考，就会大惊失色：只要你足够聪明，你是必胜无疑的，因为你是先手。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">stoneGame</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] piles)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是为什么呢，因为题目有两个条件很重要：一是石头总共有偶数堆，石头的总数是奇数。这两个看似增加游戏公平性的条件，反而使该游戏成为了一个割韭菜游戏。我们以 <code>piles=[2, 1, 9, 5]</code> 讲解，假设这四堆石头从左到右的索引分别是 1，2，3，4。<br>如果我们把这四堆石头按索引的奇偶分为两组，即第 1、3 堆和第 2、4 堆，那么这两组石头的数量一定不同，也就是说一堆多一堆少。因为石头的总数是奇数，不能被平分。<br>而作为第一个拿石头的人，你可以控制自己拿到所有偶数堆，或者所有的奇数堆。<br>你最开始可以选择第 1 堆或第 4 堆。如果你想要偶数堆，你就拿第 4 堆，这样留给对手的选择只有第 1、3 堆，他不管怎么拿，第 2 堆又会暴露出来，你就可以拿。同理，如果你想拿奇数堆，你就拿第 1 堆，留给对手的只有第 2、4 堆，他不管怎么拿，第 3 堆又给你暴露出来了。<br>也就是说，你可以在第一步就观察好，奇数堆的石头总数多，还是偶数堆的石头总数多，然后步步为营，就一切尽在掌控之中了。知道了这个漏洞，可以整一整不知情的同学了。</p><h3 id="三、电灯开关问题"><a href="#三、电灯开关问题" class="headerlink" title="三、电灯开关问题"></a>三、电灯开关问题</h3><p>这个问题是这样描述的：有 n 盏电灯，最开始时都是关着的。现在要进行 n 轮操作：<br>第 1 轮操作是把每一盏电灯的开关按一下（全部打开）。<br>第 2 轮操作是把每两盏灯的开关按一下（就是按第 2，4，6… 盏灯的开关，它们被关闭）。<br>第 3 轮操作是把每三盏灯的开关按一下（就是按第 3，6，9… 盏灯的开关，有的被关闭，比如 3，有的被打开，比如 6）…<br>如此往复，直到第 n 轮，即只按一下第 n 盏灯的开关。<br>现在给你输入一个正整数 n 代表电灯的个数，问你经过 n 轮操作后，这些电灯有多少盏是亮的？<br>我们当然可以用一个布尔数组表示这些灯的开关情况，然后模拟这些操作过程，最后去数一下就能出结果。但是这样显得没有灵性，最好的解法是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bulbSwitch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>)Math.sqrt(n);<br>&#125;<br></code></pre></td></tr></table></figure><p>什么？这个问题跟平方根有什么关系？其实这个解法挺精妙，如果没人告诉你解法，还真不好想明白。<br>首先，因为电灯一开始都是关闭的，所以某一盏灯最后如果是点亮的，必然要被按奇数次开关。<br>我们假设只有 6 盏灯，而且我们只看第 6 盏灯。需要进行 6 轮操作对吧，请问对于第 6 盏灯，会被按下几次开关呢？这不难得出，第 1 轮会被按，第 2 轮，第 3 轮，第 6 轮都会被按。<br>为什么第 1、2、3、6 轮会被按呢？因为 <code>6=1x6=2x3</code>。一般情况下，因子都是成对出现的，也就是说开关被按的次数一般是偶数次。但是有特殊情况，比如说总共有 16 盏灯，那么第 16 盏灯会被按几次?<br><code>16=1x16=2x8=4x4</code><br>其中因子 4 重复出现，所以第 16 盏灯会被按 5 次，奇数次。现在你应该理解这个问题为什么和平方根有关了吧？<br>不过，我们不是要算最后有几盏灯亮着吗，这样直接平方根一下是啥意思呢？稍微思考一下就能理解了。<br>就假设现在总共有 16 盏灯，我们求 16 的平方根，等于 4，这就说明最后会有 4 盏灯亮着，它们分别是第 <code>1x1=1</code> 盏、第 <code>2x2=4</code> 盏、第 <code>3x3=9</code> 盏和第 <code>4x4=16</code> 盏。<br>就算有的 n 平方根结果是小数，强转成 int 型，也相当于一个最大整数上界，比这个上界小的所有整数，平方后的索引都是最后亮着的灯的索引。所以说我们直接把平方根转成整数，就是这个问题的答案。</p><p><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/UnionFind%E7%AE%97%E6%B3%95%E5%BA%94%E7%94%A8">上一篇：Union-Find算法应用</a><br><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%88%A4%E5%AE%9A%E5%AD%90%E5%BA%8F%E5%88%97">下一篇：二分查找高效判定子序列</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断回文链表</title>
      <link href="2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%88%A4%E6%96%AD%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/"/>
      <url>2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%88%A4%E6%96%AD%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>我们之前有两篇文章写了回文串和回文序列相关的问题。<br><strong>寻找</strong>回文串的核心思想是从中心向两端扩展：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">palindrome</span><span class="hljs-params">(<span class="hljs-built_in">string</span>&amp; s, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br>    <span class="hljs-comment">// 防止索引越界</span><br>    <span class="hljs-keyword">while</span> (l &gt;= <span class="hljs-number">0</span> &amp;&amp; r &lt; s.size()<br>            &amp;&amp; s[l] == s[r]) &#123;<br>        <span class="hljs-comment">// 向两边展开</span><br>        l--; r++;<br>    &#125;<br>    <span class="hljs-comment">// 返回以 s[l] 和 s[r] 为中心的最长回文串</span><br>    <span class="hljs-keyword">return</span> s.substr(l + <span class="hljs-number">1</span>, r - l - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>因为回文串长度可能为奇数也可能是偶数，长度为奇数时只存在一个中心点，而长度为偶数时存在两个中心点，所以上面这个函数需要传入<code>l</code>和<code>r</code>。<br>而<strong>判断</strong>一个字符串是不是回文串就简单很多，不需要考虑奇偶情况，只需要「双指针技巧」，从两端向中间逼近即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = s.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>        <span class="hljs-keyword">if</span> (s[left] != s[right])<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        left++; right--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码很好理解吧，<strong>因为回文串是对称的，所以正着读和倒着读应该是一样的，这一特点是解决回文串问题的关键</strong>。<br>下面扩展这一最简单的情况，来解决：如何判断一个「单链表」是不是回文。</p><h3 id="一、判断回文单链表"><a href="#一、判断回文单链表" class="headerlink" title="一、判断回文单链表"></a>一、判断回文单链表</h3><p>输入一个单链表的头结点，判断这个链表中的数字是不是回文：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 单链表节点的定义：</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(ListNode head)</span></span>;<br>输入: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-keyword">null</span><br>输出: <span class="hljs-keyword">false</span><br>输入: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">1</span>-&gt;<span class="hljs-keyword">null</span><br>输出: <span class="hljs-keyword">true</span><br></code></pre></td></tr></table></figure><p>这道题的关键在于，单链表无法倒着遍历，无法使用双指针技巧。那么最简单的办法就是，把原始链表反转存入一条新的链表，然后比较这两条链表是否相同。关于如何反转链表，可以参见前文「递归操作链表」。<br>其实，<strong>借助二叉树后序遍历的思路，不需要显式反转原始链表也可以倒序遍历链表</strong>，下面来具体聊聊。<br>对于二叉树的几种遍历方式，我们再熟悉不过了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    <span class="hljs-comment">// 前序遍历代码</span><br>    traverse(root.left);<br>    <span class="hljs-comment">// 中序遍历代码</span><br>    traverse(root.right);<br>    <span class="hljs-comment">// 后序遍历代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在「学习数据结构的框架思维」中说过，链表兼具递归结构，树结构不过是链表的衍生。那么，<strong>链表其实也可以有前序遍历和后序遍历</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    <span class="hljs-comment">// 前序遍历代码</span><br>    traverse(head.next);<br>    <span class="hljs-comment">// 后序遍历代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这个框架有什么指导意义呢？如果我想正序打印链表中的<code>val</code>值，可以在前序遍历位置写代码；反之，如果想倒序遍历链表，就可以在后序遍历位置操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 倒序打印单链表中的元素值 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span>;<br>    traverse(head.next);<br>    <span class="hljs-comment">// 后序遍历代码</span><br>    print(head.val);<br>&#125;<br></code></pre></td></tr></table></figure><p>说到这了，其实可以稍作修改，模仿双指针实现回文判断的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 左侧指针</span><br>ListNode left;<br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    left = head;<br>    <span class="hljs-keyword">return</span> traverse(head);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">traverse</span><span class="hljs-params">(ListNode right)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (right == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">boolean</span> res = traverse(right.next);<br>    <span class="hljs-comment">// 后序遍历代码</span><br>    res = res &amp;&amp; (right.val == left.val);<br>    left = left.next;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>这么做的核心逻辑是什么呢？<strong>实际上就是把链表节点放入一个栈，然后再拿出来，这时候元素顺序就是反的</strong>，只不过我们利用的是递归函数的堆栈而已。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/1.gif"><br>当然，无论造一条反转链表还是利用后续遍历，算法的时间和空间复杂度都是 O(N)。下面我们想想，能不能不用额外的空间，解决这个问题呢？</p><h3 id="二、优化空间复杂度"><a href="#二、优化空间复杂度" class="headerlink" title="二、优化空间复杂度"></a>二、优化空间复杂度</h3><p>更好的思路是这样的：<br><strong>1、先通过「双指针技巧」中的快慢指针来找到链表的中点</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">ListNode slow, fast;<br>slow = fast = head;<br><span class="hljs-keyword">while</span> (fast != <span class="hljs-keyword">null</span> &amp;&amp; fast.next != <span class="hljs-keyword">null</span>) &#123;<br>    slow = slow.next;<br>    fast = fast.next.next;<br>&#125;<br><span class="hljs-comment">// slow 指针现在指向链表中点</span><br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/1.jpg"><br><strong>2、如果<code>fast</code>指针没有指向<code>null</code>，说明链表长度为奇数，<code>slow</code>还要再前进一步</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (fast != <span class="hljs-keyword">null</span>)<br>    slow = slow.next;<br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/2.jpg"><br><strong>3、从<code>slow</code>开始反转后面的链表，现在就可以开始比较回文串了</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">ListNode left = head;<br>ListNode right = reverse(slow);<br><span class="hljs-keyword">while</span> (right != <span class="hljs-keyword">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (left.val != right.val)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    left = left.next;<br>    right = right.next;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/3.jpg"><br>至此，把上面 3 段代码合在一起就高效地解决这个问题了，其中<code>reverse</code>函数很容易实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">ListNode <span class="hljs-title">reverse</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    ListNode pre = <span class="hljs-keyword">null</span>, cur = head;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>        ListNode next = cur.next;<br>        cur.next = pre;<br>        pre = cur;<br>        cur = next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pre;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kgroup/8.gif"><br>算法总体的时间复杂度 O(N)，空间复杂度 O(1)，已经是最优的了。<br>我知道肯定有读者会问：这种解法虽然高效，但破坏了输入链表的原始结构，能不能避免这个瑕疵呢？<br>其实这个问题很好解决，关键在于得到<code>p, q</code>这两个指针位置：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/4.jpg"><br>这样，只要在函数 return 之前加一段代码即可恢复原先链表顺序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">p.next = reverse(q);<br></code></pre></td></tr></table></figure><p>篇幅所限，我就不写了，读者可以自己尝试一下。</p><h3 id="三、最后总结"><a href="#三、最后总结" class="headerlink" title="三、最后总结"></a>三、最后总结</h3><p>首先，寻找回文串是从中间向两端扩展，判断回文串是从两端向中间收缩。对于单链表，无法直接倒序遍历，可以造一条新的反转链表，可以利用链表的后序遍历，也可以用栈结构倒序处理单链表。<br>具体到回文链表的判断问题，由于回文的特殊性，可以不完全反转链表，而是仅仅反转部分链表，将空间复杂度降到 O(1)。</p><p><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E7%BC%BA%E5%A4%B1%E5%92%8C%E9%87%8D%E5%A4%8D%E7%9A%84%E5%85%83%E7%B4%A0">上一篇：如何寻找缺失和重复的元素</a><br><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%B0%B4%E5%A1%98%E6%8A%BD%E6%A0%B7">下一篇：如何在无限序列中随机抽取元素</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合法括号判定</title>
      <link href="2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%90%88%E6%B3%95%E6%8B%AC%E5%8F%B7%E5%88%A4%E5%AE%9A/"/>
      <url>2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%90%88%E6%B3%95%E6%8B%AC%E5%8F%B7%E5%88%A4%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="如何判定括号合法性"><a href="#如何判定括号合法性" class="headerlink" title="如何判定括号合法性"></a>如何判定括号合法性</h1><p>对括号的合法性判断是一个很常见且实用的问题，比如说我们写的代码，编辑器和编译器都会检查括号是否正确闭合。而且我们的代码可能会包含三种括号 <code>[]()&#123;&#125;</code>，判断起来有一点难度。<br>本文就来聊一道关于括号合法性判断的算法题，相信能加深你对<strong>栈</strong>这种数据结构的理解。<br>题目很简单，输入一个字符串，其中包含 <code>[]()&#123;&#125;</code> 六种括号，请你判断这个字符串组成的括号是否合法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">Input: &quot;()[]&#123;&#125;&quot;<br>Output: true<br>Input: &quot;([)]&quot;<br>Output: false<br>Input: &quot;&#123;[]&#125;&quot;<br>Output: true<br></code></pre></td></tr></table></figure><p>解决这个问题之前，我们先降低难度，思考一下，**如果只有一种括号 <code>()</code>**，应该如何判断字符串组成的括号是否合法呢？</p><h3 id="一、处理一种括号"><a href="#一、处理一种括号" class="headerlink" title="一、处理一种括号"></a>一、处理一种括号</h3><p>字符串中只有圆括号，如果想让括号字符串合法，那么必须做到：<br><strong>每个右括号 <code>)</code> 的左边必须有一个左括号 <code>(</code> 和它匹配</strong>。<br>比如说字符串 <code>()))((</code> 中，中间的两个右括号<strong>左边</strong>就没有左括号匹配，所以这个括号组合是不合法的。<br>那么根据这个思路，我们可以写出算法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isValid</span><span class="hljs-params">(<span class="hljs-built_in">string</span> str)</span> </span>&#123;<br>    <span class="hljs-comment">// 待匹配的左括号数量</span><br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> c : str) &#123;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;(&#x27;</span>)<br>            left++;<br>        <span class="hljs-keyword">else</span> <span class="hljs-comment">// 遇到右括号</span><br>            left--;<br>        <span class="hljs-keyword">if</span> (left &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> left == <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果只有圆括号，这样就能正确判断合法性。对于三种括号的情况，我一开始想模仿这个思路，定义三个变量 <code>left1</code>，<code>left2</code>，<code>left3</code> 分别处理每种括号，虽然要多写不少 if else 分支，但是似乎可以解决问题。<br>但实际上直接照搬这种思路是不行的，比如说只有一个括号的情况下 <code>(())</code> 是合法的，但是多种括号的情况下， <code>[(])</code> 显然是不合法的。<br>仅仅记录每种左括号出现的次数已经不能做出正确判断了，我们要加大存储的信息量，可以利用栈来模仿类似的思路。</p><h3 id="二、处理多种括号"><a href="#二、处理多种括号" class="headerlink" title="二、处理多种括号"></a>二、处理多种括号</h3><p>栈是一种先进后出的数据结构，处理括号问题的时候尤其有用。<br>我们这道题就用一个名为 <code>left</code> 的栈代替之前思路中的 <code>left</code> 变量，<strong>遇到左括号就入栈，遇到右括号就去栈中寻找最近的左括号，看是否匹配</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isValid</span><span class="hljs-params">(<span class="hljs-built_in">string</span> str)</span> </span>&#123;<br>    <span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">char</span>&gt; left;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> c : str) &#123;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;(&#x27;</span> || c == <span class="hljs-string">&#x27;&#123;&#x27;</span> || c == <span class="hljs-string">&#x27;[&#x27;</span>)<br>            left.push(c);<br>        <span class="hljs-keyword">else</span> <span class="hljs-comment">// 字符 c 是右括号</span><br>            <span class="hljs-keyword">if</span> (!left.empty() &amp;&amp; leftOf(c) == left.top())<br>                left.pop();<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-comment">// 和最近的左括号不匹配</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">// 是否所有的左括号都被匹配了</span><br>    <span class="hljs-keyword">return</span> left.empty();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">char</span> <span class="hljs-title">leftOf</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;&#125;&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#123;&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;)&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;(&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;[&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/k%E4%B8%AA%E4%B8%80%E7%BB%84%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8">上一篇：如何k个一组反转链表</a><br><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%B6%88%E5%A4%B1%E7%9A%84%E5%85%83%E7%B4%A0">下一篇：如何寻找消失的元素</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何去除有序数组的重复元素</title>
      <link href="2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%A6%82%E4%BD%95%E5%8E%BB%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"/>
      <url>2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%A6%82%E4%BD%95%E5%8E%BB%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="如何去除有序数组的重复元素"><a href="#如何去除有序数组的重复元素" class="headerlink" title="如何去除有序数组的重复元素"></a>如何去除有序数组的重复元素</h1><p>我们知道对于数组来说，在尾部插入、删除元素是比较高效的，时间复杂度是 O(1)，但是如果在中间或者开头插入、删除元素，就会涉及数据的搬移，时间复杂度为 O(N)，效率较低。<br>所以对于一般处理数组的算法问题，我们要尽可能只对数组尾部的元素进行操作，以避免额外的时间复杂度。<br>这篇文章讲讲如何对一个有序数组去重，先看下题目：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/title.png"><br>显然，由于数组已经排序，所以重复的元素一定连在一起，找出它们并不难，但如果毎找到一个重复元素就立即删除它，就是在数组中间进行删除操作，整个时间复杂度是会达到 O(N^2)。而且题目要求我们原地修改，也就是说不能用辅助数组，空间复杂度得是 O(1)。<br>其实，<strong>对于数组相关的算法问题，有一个通用的技巧：要尽量避免在中间删除元素，那我就想先办法把这个元素换到最后去</strong>。这样的话，最终待删除的元素都拖在数组尾部，一个一个 pop 掉就行了，每次操作的时间复杂度也就降低到 O(1) 了。<br>按照这个思路呢，又可以衍生出解决类似需求的通用方式：双指针技巧。具体一点说，应该是快慢指针。<br>我们让慢指针 <code>slow</code> 走左后面，快指针 <code>fast</code> 走在前面探路，找到一个不重复的元素就告诉 <code>slow</code> 并让 <code>slow</code> 前进一步。这样当 <code>fast</code> 指针遍历完整个数组 <code>nums</code> 后，**<code>nums[0..slow]</code> 就是不重复元素，之后的所有元素都是重复元素**。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = nums.length;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> slow = <span class="hljs-number">0</span>, fast = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (fast &lt; n) &#123;<br>        <span class="hljs-keyword">if</span> (nums[fast] != nums[slow]) &#123;<br>            slow++;<br>            <span class="hljs-comment">// 维护 nums[0..slow] 无重复</span><br>            nums[slow] = nums[fast];<br>        &#125;<br>        fast++;<br>    &#125;<br>    <span class="hljs-comment">// 长度为索引 + 1</span><br>    <span class="hljs-keyword">return</span> slow + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>看下算法执行的过程：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/1.gif"><br>再简单扩展一下，如果给你一个有序链表，如何去重呢？其实和数组是一模一样的，唯一的区别是把数组赋值操作变成操作指针而已：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">ListNode <span class="hljs-title">deleteDuplicates</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    ListNode slow = head, fast = head.next;<br>    <span class="hljs-keyword">while</span> (fast != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (fast.val != slow.val) &#123;<br>            <span class="hljs-comment">// nums[slow] = nums[fast];</span><br>            slow.next = fast;<br>            <span class="hljs-comment">// slow++;</span><br>            slow = slow.next;<br>        &#125;<br>        <span class="hljs-comment">// fast++</span><br>        fast = fast.next;<br>    &#125;<br>    <span class="hljs-comment">// 断开与后面重复元素的连接</span><br>    slow.next = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/2.gif"></p><p><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%8E%A5%E9%9B%A8%E6%B0%B4">上一篇：如何高效解决接雨水问题</a><br><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2">下一篇：如何寻找最长回文子串</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>子集排列组合</title>
      <link href="2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%AD%90%E9%9B%86%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/"/>
      <url>2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%AD%90%E9%9B%86%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>今天就来聊三道考察频率高，而且容易让人搞混的算法问题，分别是求子集（subset），求排列（permutation），求组合（combination）。<br>这几个问题都可以用回溯算法模板解决，同时子集问题还可以用数学归纳思想解决。读者可以记住这几个问题的回溯套路，就不怕搞不清了。</p><h3 id="一、子集"><a href="#一、子集" class="headerlink" title="一、子集"></a>一、子集</h3><p>问题很简单，输入一个<strong>不包含重复数字</strong>的数组，要求算法输出这些数字的所有子集。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-title">subsets</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span></span>;<br></code></pre></td></tr></table></figure><p>比如输入 <code>nums = [1,2,3]</code>，你的算法应输出 8 个子集，包含空集和本身，顺序可以不同：<br>[ [],[1],[2],[3],[1,3],[2,3],[1,2],[1,2,3] ]<br><strong>第一个解法是利用数学归纳的思想</strong>：假设我现在知道了规模更小的子问题的结果，如何推导出当前问题的结果呢？<br>具体来说就是，现在让你求 <code>[1,2,3]</code> 的子集，如果你知道了 <code>[1,2]</code> 的子集，是否可以推导出 <code>[1,2,3]</code> 的子集呢？先把  <code>[1,2]</code> 的子集写出来瞅瞅：<br>[ [],[1],[2],[1,2] ]<br>你会发现这样一个规律：<br>subset(<code>[1,2,3]</code>) - subset(<code>[1,2]</code>)<br>= [3],[1,3],[2,3],[1,2,3]<br>而这个结果，就是把 sebset(<code>[1,2]</code>) 的结果中每个集合再添加上 3。<br>换句话说，如果 <code>A = subset([1,2])</code> ，那么：<br>subset(<code>[1,2,3]</code>)<br>= A + [A[i].add(3) for i = 1..len(A)]<br>这就是一个典型的递归结构嘛，<code>[1,2,3]</code> 的子集可以由 <code>[1,2]</code> 追加得出，<code>[1,2]</code> 的子集可以由 <code>[1]</code> 追加得出，base case 显然就是当输入集合为空集时，输出子集也就是一个空集。<br>翻译成代码就很容易理解了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-title">subsets</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>    <span class="hljs-comment">// base case，返回一个空集</span><br>    <span class="hljs-keyword">if</span> (nums.empty()) <span class="hljs-keyword">return</span> &#123;&#123;&#125;&#125;;<br>    <span class="hljs-comment">// 把最后一个元素拿出来</span><br>    <span class="hljs-keyword">int</span> n = nums.back();<br>    nums.pop_back();<br>    <span class="hljs-comment">// 先递归算出前面元素的所有子集</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; res = subsets(nums);<br>    <span class="hljs-keyword">int</span> size = res.size();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>        <span class="hljs-comment">// 然后在之前的结果之上追加</span><br>        res.push_back(res[i]);<br>        res.back().push_back(n);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>这个问题的时间复杂度计算比较容易坑人</strong>。我们之前说的计算递归算法时间复杂度的方法，是找到递归深度，然后乘以每次递归中迭代的次数。对于这个问题，递归深度显然是 N，但我们发现每次递归 for 循环的迭代次数取决于 <code>res</code> 的长度，并不是固定的。<br>根据刚才的思路，<code>res</code> 的长度应该是每次递归都翻倍，所以说总的迭代次数应该是 2^N。或者不用这么麻烦，你想想一个大小为 N 的集合的子集总共有几个？2^N 个对吧，所以说至少要对 <code>res</code> 添加 2^N 次元素。<br>那么算法的时间复杂度就是 O(2^N) 吗？还是不对，2^N 个子集是 <code>push_back</code> 添加进 <code>res</code> 的，所以要考虑 <code>push_back</code> 这个操作的效率：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>    res.push_back(res[i]); <span class="hljs-comment">// O(N)</span><br>    res.back().push_back(n); <span class="hljs-comment">// O(1)</span><br>&#125;<br></code></pre></td></tr></table></figure><p>因为 <code>res[i]</code> 也是一个数组呀，<code>push_back</code> 是把 <code>res[i]</code> copy 一份然后添加到数组的最后，所以一次操作的时间是 O(N)。<br>综上，总的时间复杂度就是 O(N<em>2^N)，还是比较耗时的。<br>空间复杂度的话，如果不计算储存返回结果所用的空间的，只需要 O(N) 的递归堆栈空间。如果计算 <code>res</code> 所需的空间，应该是 O(N</em>2^N)。<br><strong>第二种通用方法就是回溯算法</strong>。旧文「回溯算法详解」写过回溯算法的模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">result = []<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">backtrack</span>(<span class="hljs-params">路径, 选择列表</span>):</span><br>    <span class="hljs-keyword">if</span> 满足结束条件:<br>        result.add(路径)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">for</span> 选择 <span class="hljs-keyword">in</span> 选择列表:<br>        做选择<br>        backtrack(路径, 选择列表)<br>        撤销选择<br></code></pre></td></tr></table></figure><p>只要改造回溯算法的模板就行了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; res;<br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-title">subsets</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>    <span class="hljs-comment">// 记录走过的路径</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; track;<br>    backtrack(nums, <span class="hljs-number">0</span>, track);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> start, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; track)</span> </span>&#123;<br>    res.push_back(track);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = start; i &lt; nums.size(); i++) &#123;<br>        <span class="hljs-comment">// 做选择</span><br>        track.push_back(nums[i]);<br>        <span class="hljs-comment">// 回溯</span><br>        backtrack(nums, i + <span class="hljs-number">1</span>, track);<br>        <span class="hljs-comment">// 撤销选择</span><br>        track.pop_back();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看见，对 <code>res</code> 更新的位置处在前序遍历，也就是说，**<code>res</code> 就是树上的所有节点**：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%AD%90%E9%9B%86/1.jpg"></p><h3 id="二、组合"><a href="#二、组合" class="headerlink" title="二、组合"></a>二、组合</h3><p>输入两个数字 <code>n, k</code>，算法输出 <code>[1..n]</code> 中 k 个数字的所有组合。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-title">combine</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> k)</span></span>;<br></code></pre></td></tr></table></figure><p>比如输入 <code>n = 4, k = 2</code>，输出如下结果，顺序无所谓，但是不能包含重复（按照组合的定义，<code>[1,2]</code> 和 <code>[2,1]</code> 也算重复）：<br>[<br>  [1,2],<br>  [1,3],<br>  [1,4],<br>  [2,3],<br>  [2,4],<br>  [3,4]<br>]<br>这也是典型的回溯算法，<code>k</code> 限制了树的高度，<code>n</code> 限制了树的宽度，继续套我们以前讲过的回溯算法模板框架就行了：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%AD%90%E9%9B%86/2.jpg"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;res;<br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-title">combine</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (k &lt;= <span class="hljs-number">0</span> || n &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> res;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; track;<br>    backtrack(n, k, <span class="hljs-number">1</span>, track);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> start, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; track)</span> </span>&#123;<br>    <span class="hljs-comment">// 到达树的底部</span><br>    <span class="hljs-keyword">if</span> (k == track.size()) &#123;<br>        res.push_back(track);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 注意 i 从 start 开始递增</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = start; i &lt;= n; i++) &#123;<br>        <span class="hljs-comment">// 做选择</span><br>        track.push_back(i);<br>        backtrack(n, k, i + <span class="hljs-number">1</span>, track);<br>        <span class="hljs-comment">// 撤销选择</span><br>        track.pop_back();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>backtrack</code> 函数和计算子集的差不多，区别在于，更新 <code>res</code> 的时机是树到达底端时。</p><h3 id="三、排列"><a href="#三、排列" class="headerlink" title="三、排列"></a>三、排列</h3><p>输入一个<strong>不包含重复数字</strong>的数组 <code>nums</code>，返回这些数字的全部排列。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-title">permute</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span></span>;<br></code></pre></td></tr></table></figure><p>比如说输入数组 <code>[1,2,3]</code>，输出结果应该如下，顺序无所谓，不能有重复：<br>[<br>  [1,2,3],<br>  [1,3,2],<br>  [2,1,3],<br>  [2,3,1],<br>  [3,1,2],<br>  [3,2,1]<br>]<br>「回溯算法详解」中就是拿这个问题来解释回溯模板的。这里又列出这个问题，是将「排列」和「组合」这两个回溯算法的代码拿出来对比。<br>首先画出回溯树来看一看：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%AD%90%E9%9B%86/3.jpg"><br>我们当时使用 Java 代码写的解法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><span class="hljs-comment">/* 主函数，输入一组不重复的数字，返回它们的全排列 */</span><br>List&lt;List&lt;Integer&gt;&gt; permute(<span class="hljs-keyword">int</span>[] nums) &#123;<br>    <span class="hljs-comment">// 记录「路径」</span><br>    LinkedList&lt;Integer&gt; track = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    backtrack(nums, track);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, LinkedList&lt;Integer&gt; track)</span> </span>&#123;<br>    <span class="hljs-comment">// 触发结束条件</span><br>    <span class="hljs-keyword">if</span> (track.size() == nums.length) &#123;<br>        res.add(<span class="hljs-keyword">new</span> LinkedList(track));<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        <span class="hljs-comment">// 排除不合法的选择</span><br>        <span class="hljs-keyword">if</span> (track.contains(nums[i]))<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-comment">// 做选择</span><br>        track.add(nums[i]);<br>        <span class="hljs-comment">// 进入下一层决策树</span><br>        backtrack(nums, track);<br>        <span class="hljs-comment">// 取消选择</span><br>        track.removeLast();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>回溯模板依然没有变，但是根据排列问题和组合问题画出的树来看，排列问题的树比较对称，而组合问题的树越靠右节点越少。<br>在代码中的体现就是，排列问题每次通过 <code>contains</code> 方法来排除在 <code>track</code> 中已经选择过的数字；而组合问题通过传入一个 <code>start</code> 参数，来排除 <code>start</code> 索引之前的数字。<br><strong>以上，就是排列组合和子集三个问题的解法，总结一下</strong>：<br>子集问题可以利用数学归纳思想，假设已知一个规模较小的问题的结果，思考如何推导出原问题的结果。也可以用回溯算法，要用 <code>start</code> 参数排除已选择的数字。<br>组合问题利用的是回溯思想，结果可以表示成树结构，我们只要套用回溯算法模板即可，关键点在于要用一个 <code>start</code> 排除已经选择过的数字。<br>排列问题是回溯思想，也可以表示成树结构套用算法模板，关键点在于使用 <code>contains</code> 方法排除已经选择的数字，前文有详细分析，这里主要是和组合问题作对比。<br>记住这几种树的形状，就足以应对大部分回溯算法问题了，无非就是 <code>start</code> 或者 <code>contains</code> 剪枝，也没啥别的技巧了。</p><p><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E4%BF%AE%E8%AE%A2%E7%89%88">上一篇：回溯算法详解</a><br><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E8%AF%A6%E8%A7%A3">下一篇：二分查找详解</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>座位调度</title>
      <link href="2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%BA%A7%E4%BD%8D%E8%B0%83%E5%BA%A6/"/>
      <url>2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%BA%A7%E4%BD%8D%E8%B0%83%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="如何调度考生的座位"><a href="#如何调度考生的座位" class="headerlink" title="如何调度考生的座位"></a>如何调度考生的座位</h1><p>这是 LeetCode 第 885 题，有趣且具有一定技巧性。这种题目并不像动态规划这类算法拼智商，而是看你对常用数据结构的理解和写代码的水平，个人认为值得重视和学习。<br>另外说句题外话，很多读者都问，算法框架是如何总结出来的，其实框架反而是慢慢从细节里抠出来的。希望大家看了我们的文章之后，最好能抽时间把相关的问题亲自做一做，纸上得来终觉浅，绝知此事要躬行嘛。<br>先来描述一下题目：假设有一个考场，考场有一排共 <code>N</code> 个座位，索引分别是 <code>[0..N-1]</code>，考生会<strong>陆续</strong>进入考场考试，并且可能在<strong>任何时候</strong>离开考场。<br>你作为考官，要安排考生们的座位，满足：<strong>每当一个学生进入时，你需要最大化他和最近其他人的距离；如果有多个这样的座位，安排到他到索引最小的那个座位</strong>。这很符合实际情况对吧，<br>也就是请你实现下面这样一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExamRoom</span> </span>&#123;<br>    <span class="hljs-comment">// 构造函数，传入座位总数 N</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ExamRoom</span><span class="hljs-params">(<span class="hljs-keyword">int</span> N)</span></span>;<br>    <span class="hljs-comment">// 来了一名考生，返回你给他分配的座位</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">seat</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">// 坐在 p 位置的考生离开了</span><br>    <span class="hljs-comment">// 可以认为 p 位置一定坐有考生</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">leave</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>比方说考场有 5 个座位，分别是 <code>[0..4]</code>：<br>第一名考生进入时（调用 <code>seat()</code>），坐在任何位置都行，但是要给他安排索引最小的位置，也就是返回位置 0。<br>第二名学生进入时（再调用 <code>seat()</code>），要和旁边的人距离最远，也就是返回位置 4。<br>第三名学生进入时，要和旁边的人距离最远，应该做到中间，也就是座位 2。<br>如果再进一名学生，他可以坐在座位 1 或者 3，取较小的索引 1。<br>以此类推。<br>刚才所说的情况，没有调用 <code>leave</code> 函数，不过读者肯定能够发现规律：<br><strong>如果将每两个相邻的考生看做线段的两端点，新安排考生就是找最长的线段，然后让该考生在中间把这个线段「二分」，中点就是给他分配的座位。<code>leave(p)</code> 其实就是去除端点 <code>p</code>，使得相邻两个线段合并为一个</strong>。<br>核心思路很简单对吧，所以这个问题实际上实在考察你对数据结构的理解。对于上述这个逻辑，你用什么数据结构来实现呢？</p><h3 id="一、思路分析"><a href="#一、思路分析" class="headerlink" title="一、思路分析"></a>一、思路分析</h3><p>根据上述思路，首先需要把坐在教室的学生抽象成线段，我们可以简单的用一个大小为 2 的数组表示。<br>另外，思路需要我们找到「最长」的线段，还需要去除线段，增加线段。<br><strong>但凡遇到在动态过程中取最值的要求，肯定要使用有序数据结构，我们常用的数据结构就是二叉堆和平衡二叉搜索树了</strong>。二叉堆实现的优先级队列取最值的时间复杂度是 O(logN)，但是只能删除最大值。平衡二叉树也可以取最值，也可以修改、删除任意一个值，而且时间复杂度都是 O(logN)。<br>综上，二叉堆不能满足 <code>leave</code> 操作，应该使用平衡二叉树。所以这里我们会用到 Java 的一种数据结构 <code>TreeSet</code>，这是一种有序数据结构，底层由红黑树维护有序性。<br>这里顺便提一下，一说到集合（Set）或者映射（Map），有的读者可能就想当然的认为是哈希集合（HashSet）或者哈希表（HashMap），这样理解是有点问题的。<br>因为哈希集合/映射底层是由哈希函数和数组实现的，特性是遍历无固定顺序，但是操作效率高，时间复杂度为 O(1)。<br>而集合/映射还可以依赖其他底层数据结构，常见的就是红黑树（一种平衡二叉搜索树），特性是自动维护其中元素的顺序，操作效率是 O(logN)。这种一般称为「有序集合/映射」。<br>我们使用的 <code>TreeSet</code> 就是一个有序集合，目的就是为了保持线段长度的有序性，快速查找最大线段，快速删除和插入。</p><h3 id="二、简化问题"><a href="#二、简化问题" class="headerlink" title="二、简化问题"></a>二、简化问题</h3><p>首先，如果有多个可选座位，需要选择索引最小的座位对吧？<strong>我们先简化一下问题，暂时不管这个要求</strong>，实现上述思路。<br>这个问题还用到一个常用的编程技巧，就是使用一个「虚拟线段」让算法正确启动，这就和链表相关的算法需要「虚拟头结点」一个道理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 将端点 p 映射到以 p 为左端点的线段</span><br><span class="hljs-keyword">private</span> Map&lt;Integer, <span class="hljs-keyword">int</span>[]&gt; startMap;<br><span class="hljs-comment">// 将端点 p 映射到以 p 为右端点的线段</span><br><span class="hljs-keyword">private</span> Map&lt;Integer, <span class="hljs-keyword">int</span>[]&gt; endMap;<br><span class="hljs-comment">// 根据线段长度从小到大存放所有线段</span><br><span class="hljs-keyword">private</span> TreeSet&lt;<span class="hljs-keyword">int</span>[]&gt; pq;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> N;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ExamRoom</span><span class="hljs-params">(<span class="hljs-keyword">int</span> N)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.N = N;<br>    startMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    endMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    pq = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;((a, b) -&gt; &#123;<br>        <span class="hljs-comment">// 算出两个线段的长度</span><br>        <span class="hljs-keyword">int</span> distA = distance(a);<br>        <span class="hljs-keyword">int</span> distB = distance(b);<br>        <span class="hljs-comment">// 长度更长的更大，排后面</span><br>        <span class="hljs-keyword">return</span> distA - distB;<br>    &#125;);<br>    <span class="hljs-comment">// 在有序集合中先放一个虚拟线段</span><br>    addInterval(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;-<span class="hljs-number">1</span>, N&#125;);<br>&#125;<br><span class="hljs-comment">/* 去除一个线段 */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeInterval</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] intv)</span> </span>&#123;<br>    pq.remove(intv);<br>    startMap.remove(intv[<span class="hljs-number">0</span>]);<br>    endMap.remove(intv[<span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-comment">/* 增加一个线段 */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterval</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] intv)</span> </span>&#123;<br>    pq.add(intv);<br>    startMap.put(intv[<span class="hljs-number">0</span>], intv);<br>    endMap.put(intv[<span class="hljs-number">1</span>], intv);<br>&#125;<br><span class="hljs-comment">/* 计算一个线段的长度 */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">distance</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] intv)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> intv[<span class="hljs-number">1</span>] - intv[<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>「虚拟线段」其实就是为了将所有座位表示为一个线段：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%BA%A7%E4%BD%8D%E8%B0%83%E5%BA%A6/1.jpg"><br>有了上述铺垫，主要 API <code>seat</code> 和 <code>leave</code> 就可以写了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">seat</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 从有序集合拿出最长的线段</span><br>    <span class="hljs-keyword">int</span>[] longest = pq.last();<br>    <span class="hljs-keyword">int</span> x = longest[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">int</span> y = longest[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">int</span> seat;<br>    <span class="hljs-keyword">if</span> (x == -<span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 情况一</span><br>        seat = <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (y == N) &#123; <span class="hljs-comment">// 情况二</span><br>        seat = N - <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 情况三</span><br>        seat = (y - x) / <span class="hljs-number">2</span> + x;<br>    &#125;<br>    <span class="hljs-comment">// 将最长的线段分成两段</span><br>    <span class="hljs-keyword">int</span>[] left = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;x, seat&#125;;<br>    <span class="hljs-keyword">int</span>[] right = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;seat, y&#125;;<br>    removeInterval(longest);<br>    addInterval(left);<br>    addInterval(right);<br>    <span class="hljs-keyword">return</span> seat;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">leave</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;<br>    <span class="hljs-comment">// 将 p 左右的线段找出来</span><br>    <span class="hljs-keyword">int</span>[] right = startMap.get(p);<br>    <span class="hljs-keyword">int</span>[] left = endMap.get(p);<br>    <span class="hljs-comment">// 合并两个线段成为一个线段</span><br>    <span class="hljs-keyword">int</span>[] merged = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;left[<span class="hljs-number">0</span>], right[<span class="hljs-number">1</span>]&#125;;<br>    removeInterval(left);<br>    removeInterval(right);<br>    addInterval(merged);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%BA%A7%E4%BD%8D%E8%B0%83%E5%BA%A6/2.jpg" alt="三种情况"><br>至此，算法就基本实现了，代码虽多，但思路很简单：找最长的线段，从中间分隔成两段，中点就是 <code>seat()</code> 的返回值；找 <code>p</code> 的左右线段，合并成一个线段，这就是 <code>leave(p)</code> 的逻辑。</p><h3 id="三、进阶问题"><a href="#三、进阶问题" class="headerlink" title="三、进阶问题"></a>三、进阶问题</h3><p>但是，题目要求多个选择时选择索引最小的那个座位，我们刚才忽略了这个问题。比如下面这种情况会出错：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%BA%A7%E4%BD%8D%E8%B0%83%E5%BA%A6/3.jpg"><br>现在有序集合里有线段 <code>[0,4]</code> 和 <code>[4,9]</code>，那么最长线段 <code>longest</code> 就是后者，按照 <code>seat</code> 的逻辑，就会分割 <code>[4,9]</code>，也就是返回座位 6。但正确答案应该是座位 2，因为 2 和 6 都满足最大化相邻考生距离的条件，二者应该取较小的。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%BA%A7%E4%BD%8D%E8%B0%83%E5%BA%A6/4.jpg"><br><strong>遇到题目的这种要求，解决方式就是修改有序数据结构的排序方式</strong>。具体到这个问题，就是修改 <code>TreeMap</code> 的比较函数逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">pq = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;((a, b) -&gt; &#123;<br>    <span class="hljs-keyword">int</span> distA = distance(a);<br>    <span class="hljs-keyword">int</span> distB = distance(b);<br>    <span class="hljs-comment">// 如果长度相同，就比较索引</span><br>    <span class="hljs-keyword">if</span> (distA == distB)<br>        <span class="hljs-keyword">return</span> b[<span class="hljs-number">0</span>] - a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">return</span> distA - distB;<br>&#125;);<br></code></pre></td></tr></table></figure><p>除此之外，还要改变 <code>distance</code> 函数，<strong>不能简单地让它计算一个线段两个端点间的长度，而是让它计算该线段中点和端点之间的长度</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">distance</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] intv)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = intv[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">int</span> y = intv[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span> (x == -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> y;<br>    <span class="hljs-keyword">if</span> (y == N) <span class="hljs-keyword">return</span> N - <span class="hljs-number">1</span> - x;<br>    <span class="hljs-comment">// 中点和端点之间的长度</span><br>    <span class="hljs-keyword">return</span> (y - x) / <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%BA%A7%E4%BD%8D%E8%B0%83%E5%BA%A6/5.jpg"><br>这样，<code>[0,4]</code> 和 <code>[4,9]</code> 的 <code>distance</code> 值就相等了，算法会比较二者的索引，取较小的线段进行分割。到这里，这道算法题目算是完全解决了。</p><h3 id="四、最后总结"><a href="#四、最后总结" class="headerlink" title="四、最后总结"></a>四、最后总结</h3><p>本文聊的这个问题其实并不算难，虽然看起来代码很多。核心问题就是考察有序数据结构的理解和使用，来梳理一下。<br>处理动态问题一般都会用到有序数据结构，比如平衡二叉搜索树和二叉堆，二者的时间复杂度差不多，但前者支持的操作更多。<br>既然平衡二叉搜索树这么好用，还用二叉堆干嘛呢？因为二叉堆底层就是数组，实现简单啊，详见旧文「二叉堆详解」。你实现个红黑树试试？操作复杂，而且消耗的空间相对来说会多一些。具体问题，还是要选择恰当的数据结构来解决。<br>希望本文对大家有帮助。</p><p><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%B0%B4%E5%A1%98%E6%8A%BD%E6%A0%B7">上一篇：如何在无限序列中随机抽取元素</a><br><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/UnionFind%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3">下一篇：Union-Find算法详解</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打印素数</title>
      <link href="2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%89%93%E5%8D%B0%E7%B4%A0%E6%95%B0/"/>
      <url>2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%89%93%E5%8D%B0%E7%B4%A0%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="如何高效寻找素数"><a href="#如何高效寻找素数" class="headerlink" title="如何高效寻找素数"></a>如何高效寻找素数</h1><p>素数的定义看起来很简单，如果一个数如果只能被 1 和它本身整除，那么这个数就是素数。<br>不要觉得素数的定义简单，恐怕没多少人真的能把素数相关的算法写得高效。比如让你写这样一个函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 返回区间 [2, n) 中有几个素数 </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">countPrimes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"><span class="hljs-comment">// 比如 countPrimes(10) 返回 4</span></span><br><span class="hljs-function"><span class="hljs-comment">// 因为 2,3,5,7 是素数</span></span><br></code></pre></td></tr></table></figure><p>你会如何写这个函数？我想大家应该会这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">countPrimes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++)<br>        <span class="hljs-keyword">if</span> (isPrim(i)) count++;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><span class="hljs-comment">// 判断整数 n 是否是素数</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isPrime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++)<br>        <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>)<br>            <span class="hljs-comment">// 有其他整除因子</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样写的话时间复杂度 O(n^2)，问题很大。<strong>首先你用 isPrime 函数来辅助的思路就不够高效；而且就算你要用 isPrime 函数，这样写算法也是存在计算冗余的</strong>。<br>先来简单说下<strong>如果你要判断一个数是不是素数，应该如何写算法</strong>。只需稍微修改一下上面的 isPrim 代码中的 for 循环条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isPrime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i * i &lt;= n; i++)<br>        ...<br>&#125;<br></code></pre></td></tr></table></figure><p>换句话说，<code>i</code> 不需要遍历到 <code>n</code>，而只需要到 <code>sqrt(n)</code> 即可。为什么呢，我们举个例子，假设 <code>n = 12</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">12</span> = <span class="hljs-number">2</span> × <span class="hljs-number">6</span><br><span class="hljs-number">12</span> = <span class="hljs-number">3</span> × <span class="hljs-number">4</span><br><span class="hljs-number">12</span> = sqrt(<span class="hljs-number">12</span>) <span class="hljs-function">× <span class="hljs-title">sqrt</span><span class="hljs-params">(<span class="hljs-number">12</span>)</span></span><br><span class="hljs-function">12 </span>= <span class="hljs-number">4</span> × <span class="hljs-number">3</span><br><span class="hljs-number">12</span> = <span class="hljs-number">6</span> × <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>可以看到，后两个乘积就是前面两个反过来，反转临界点就在 <code>sqrt(n)</code>。<br>换句话说，如果在 <code>[2,sqrt(n)]</code> 这个区间之内没有发现可整除因子，就可以直接断定 <code>n</code> 是素数了，因为在区间 <code>[sqrt(n),n]</code> 也一定不会发现可整除因子。<br>现在，<code>isPrime</code> 函数的时间复杂度降为 O(sqrt(N))，<strong>但是我们实现 <code>countPrimes</code> 函数其实并不需要这个函数</strong>，以上只是希望读者明白 <code>sqrt(n)</code> 的含义，因为等会还会用到。</p><h3 id="高效实现-countPrimes"><a href="#高效实现-countPrimes" class="headerlink" title="高效实现 countPrimes"></a>高效实现 <code>countPrimes</code></h3><p>高效解决这个问题的核心思路是和上面的常规思路反着来：<br>首先从 2 开始，我们知道 2 是一个素数，那么 2 × 2 = 4, 3 × 2 = 6, 4 × 2 = 8… 都不可能是素数了。<br>然后我们发现 3 也是素数，那么 3 × 2 = 6, 3 × 3 = 9, 3 × 4 = 12… 也都不可能是素数了。<br>看到这里，你是否有点明白这个排除法的逻辑了呢？先看我们的第一版代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">countPrimes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">boolean</span>[] isPrim = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[n];<br>    <span class="hljs-comment">// 将数组都初始化为 true</span><br>    Arrays.fill(isPrim, <span class="hljs-keyword">true</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++) <br>        <span class="hljs-keyword">if</span> (isPrim[i]) <br>            <span class="hljs-comment">// i 的倍数不可能是素数了</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span> * i; j &lt; n; j += i) <br>                    isPrim[j] = <span class="hljs-keyword">false</span>;<br>    <br>    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++)<br>        <span class="hljs-keyword">if</span> (isPrim[i]) count++;<br>    <br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果上面这段代码你能够理解，那么你已经掌握了整体思路，但是还有两个细微的地方可以优化。<br>首先，回想刚才判断一个数是否是素数的 <code>isPrime</code> 函数，由于因子的对称性，其中的 for 循环只需要遍历 <code>[2,sqrt(n)]</code> 就够了。这里也是类似的，我们外层的 for 循环也只需要遍历到 <code>sqrt(n)</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i * i &lt; n; i++) <br>    <span class="hljs-keyword">if</span> (isPrim[i]) <br>        ...<br></code></pre></td></tr></table></figure><p>除此之外，很难注意到内层的 for 循环也可以优化。我们之前的做法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span> * i; j &lt; n; j += i) <br>    isPrim[j] = <span class="hljs-keyword">false</span>;<br></code></pre></td></tr></table></figure><p>这样可以把 <code>i</code> 的整数倍都标记为 <code>false</code>，但是仍然存在计算冗余。<br>比如 <code>n = 25</code>，<code>i = 4</code> 时算法会标记 4 × 2 = 8，4 × 3 = 12 等等数字，但是这两个数字已经被 <code>i = 2</code> 和 <code>i = 3</code> 的 2 × 4 和 3 × 4 标记了。<br>我们可以稍微优化一下，让 <code>j</code> 从 <code>i</code> 的平方开始遍历，而不是从 <code>2 * i</code> 开始：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i * i; j &lt; n; j += i) <br>    isPrim[j] = <span class="hljs-keyword">false</span>;<br></code></pre></td></tr></table></figure><p>这样，素数计数的算法就高效实现了，其实这个算法有一个名字，叫做 Sieve of Eratosthenes。看下完整的最终代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">countPrimes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">boolean</span>[] isPrim = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[n];<br>    Arrays.fill(isPrim, <span class="hljs-keyword">true</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i * i &lt; n; i++) <br>        <span class="hljs-keyword">if</span> (isPrim[i]) <br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i * i; j &lt; n; j += i) <br>                isPrim[j] = <span class="hljs-keyword">false</span>;<br>    <br>    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++)<br>        <span class="hljs-keyword">if</span> (isPrim[i]) count++;<br>    <br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>该算法的时间复杂度比较难算</strong>，显然时间跟这两个嵌套的 for 循环有关，其操作数应该是：<br>  n/2 + n/3 + n/5 + n/7 + …<br>= n × (1/2 + 1/3 + 1/5 + 1/7…)<br>括号中是素数的倒数。其最终结果是 O(N * loglogN)，有兴趣的读者可以查一下该算法的时间复杂度证明。<br>以上就是素数算法相关的全部内容。怎么样，是不是看似简单的问题却有不少细节可以打磨呀？</p><p><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/LRU%E7%AE%97%E6%B3%95">上一篇：如何实现LRU算法</a><br><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB">下一篇：如何计算编辑距离</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接雨水</title>
      <link href="2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%8E%A5%E9%9B%A8%E6%B0%B4/"/>
      <url>2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%8E%A5%E9%9B%A8%E6%B0%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="接雨水问题详解"><a href="#接雨水问题详解" class="headerlink" title="接雨水问题详解"></a>接雨水问题详解</h1><p>接雨水这道题目挺有意思，在面试题中出现频率还挺高的，本文就来步步优化，讲解一下这道题。<br>先看一下题目：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%8E%A5%E9%9B%A8%E6%B0%B4/title.png"><br>就是用一个数组表示一个条形图，问你这个条形图最多能接多少水。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">trap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] height)</span></span>;<br></code></pre></td></tr></table></figure><p>下面就来由浅入深介绍暴力解法 -&gt; 备忘录解法 -&gt; 双指针解法，在 O(N) 时间 O(1) 空间内解决这个问题。</p><h3 id="一、核心思路"><a href="#一、核心思路" class="headerlink" title="一、核心思路"></a>一、核心思路</h3><p>我第一次看到这个问题，无计可施，完全没有思路，相信很多朋友跟我一样。所以对于这种问题，我们不要想整体，而应该去想局部；就像之前的文章处理字符串问题，不要考虑如何处理整个字符串，而是去思考应该如何处理每一个字符。<br>这么一想，可以发现这道题的思路其实很简单。具体来说，仅仅对于位置 i，能装下多少水呢？<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%8E%A5%E9%9B%A8%E6%B0%B4/0.jpg"><br>能装 2 格水。为什么恰好是两格水呢？因为 height[i] 的高度为 0，而这里最多能盛 2 格水，2-0=2。<br>为什么位置 i 最多能盛 2 格水呢？因为，位置 i 能达到的水柱高度和其左边的最高柱子、右边的最高柱子有关，我们分别称这两个柱子高度为 <code>l_max</code> 和 <code>r_max</code>；<strong>位置 i 最大的水柱高度就是 <code>min(l_max, r_max)</code>。</strong><br>更进一步，对于位置 i，能够装的水为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">water[i] = min(<br>               <span class="hljs-comment"># 左边最高的柱子</span><br>               max(height[<span class="hljs-number">0.</span>.i]),  <br>               <span class="hljs-comment"># 右边最高的柱子</span><br>               max(height[i..end]) <br>            ) - height[i]<br>    <br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%8E%A5%E9%9B%A8%E6%B0%B4/1.jpg"><br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%8E%A5%E9%9B%A8%E6%B0%B4/2.jpg"><br>这就是本问题的核心思路，我们可以简单写一个暴力算法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">trap</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; height)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = height.size();<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">int</span> l_max = <span class="hljs-number">0</span>, r_max = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 找右边最高的柱子</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &lt; n; j++)<br>            r_max = max(r_max, height[j]);<br>        <span class="hljs-comment">// 找左边最高的柱子</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &gt;= <span class="hljs-number">0</span>; j--)<br>            l_max = max(l_max, height[j]);<br>        <span class="hljs-comment">// 如果自己就是最高的话，</span><br>        <span class="hljs-comment">// l_max == r_max == height[i]</span><br>        ans += min(l_max, r_max) - height[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><p>有之前的思路，这个解法应该是很直接粗暴的，时间复杂度 O(N^2)，空间复杂度 O(1)。但是很明显这种计算 <code>r_max</code> 和 <code>l_max</code> 的方式非常笨拙，一般的优化方法就是备忘录。</p><h3 id="二、备忘录优化"><a href="#二、备忘录优化" class="headerlink" title="二、备忘录优化"></a>二、备忘录优化</h3><p>之前的暴力解法，不是在每个位置 i 都要计算 <code>r_max</code> 和 <code>l_max</code> 吗？我们直接把结果都缓存下来，别傻不拉几的每次都遍历，这时间复杂度不就降下来了嘛。<br>我们开两个<strong>数组</strong> <code>r_max</code> 和 <code>l_max</code> 充当备忘录，<code>l_max[i]</code> 表示位置 i 左边最高的柱子高度，<code>r_max[i]</code> 表示位置 i 右边最高的柱子高度。预先把这两个数组计算好，避免重复计算：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">trap</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; height)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (height.empty()) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> n = height.size();<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 数组充当备忘录</span><br>    vector&lt;int&gt; l_max(n), r_max(n);<br>    <span class="hljs-comment">// 初始化 base case</span><br>    l_max[<span class="hljs-number">0</span>] = height[<span class="hljs-number">0</span>];<br>    r_max[n - <span class="hljs-number">1</span>] = height[n - <span class="hljs-number">1</span>];<br>    <span class="hljs-comment">// 从左向右计算 l_max</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>        l_max[i] = max(height[i], l_max[i - <span class="hljs-number">1</span>]);<br>    <span class="hljs-comment">// 从右向左计算 r_max</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) <br>        r_max[i] = max(height[i], r_max[i + <span class="hljs-number">1</span>]);<br>    <span class="hljs-comment">// 计算答案</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n - <span class="hljs-number">1</span>; i++) <br>        ans += min(l_max[i], r_max[i]) - height[i];<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个优化其实和暴力解法差不多，就是避免了重复计算，把时间复杂度降低为 O(N)，已经是最优了，但是空间复杂度是 O(N)。下面来看一个精妙一些的解法，能够把空间复杂度降低到 O(1)。</p><h3 id="三、双指针解法"><a href="#三、双指针解法" class="headerlink" title="三、双指针解法"></a>三、双指针解法</h3><p>这种解法的思路是完全相同的，但在实现手法上非常巧妙，我们这次也不要用备忘录提前计算了，而是用双指针<strong>边走边算</strong>，节省下空间复杂度。<br>首先，看一部分代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">trap</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; height)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = height.size();<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = n - <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">int</span> l_max = height[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">int</span> r_max = height[n - <span class="hljs-number">1</span>];<br>    <br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>        l_max = max(l_max, height[left]);<br>        r_max = max(r_max, height[right]);<br>        left++; right--;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于这部分代码，请问 <code>l_max</code> 和 <code>r_max</code> 分别表示什么意义呢？<br>很容易理解，**<code>l_max</code> 是 <code>height[0..left]</code> 中最高柱子的高度，<code>r_max</code> 是 <code>height[right..end]</code> 的最高柱子的高度**。<br>明白了这一点，直接看解法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">trap</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; height)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (height.empty()) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> n = height.size();<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = n - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">int</span> l_max = height[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">int</span> r_max = height[n - <span class="hljs-number">1</span>];<br>    <br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>        l_max = max(l_max, height[left]);<br>        r_max = max(r_max, height[right]);<br>        <br>        <span class="hljs-comment">// ans += min(l_max, r_max) - height[i]</span><br>        <span class="hljs-keyword">if</span> (l_max &lt; r_max) &#123;<br>            ans += l_max - height[left];<br>            left++; <br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ans += r_max - height[right];<br>            right--;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><p>你看，其中的核心思想和之前一模一样，换汤不换药。但是细心的读者可能会发现次解法还是有点细节差异：<br>之前的备忘录解法，<code>l_max[i]</code> 和 <code>r_max[i]</code> 代表的是 <code>height[0..i]</code> 和 <code>height[i..end]</code> 的最高柱子高度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ans += min(l_max[i], r_max[i]) - height[i];<br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%8E%A5%E9%9B%A8%E6%B0%B4/3.jpg"><br>但是双指针解法中，<code>l_max</code> 和 <code>r_max</code> 代表的是 <code>height[0..left]</code> 和 <code>height[right..end]</code> 的最高柱子高度。比如这段代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (l_max &lt; r_max) &#123;<br>    ans += l_max - height[left];<br>    left++; <br>&#125; <br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%8E%A5%E9%9B%A8%E6%B0%B4/4.jpg"><br>此时的 <code>l_max</code> 是 <code>left</code> 指针左边的最高柱子，但是 <code>r_max</code> 并不一定是 <code>left</code> 指针右边最高的柱子，这真的可以得到正确答案吗？<br>其实这个问题要这么思考，我们只在乎 <code>min(l_max, r_max)</code>。对于上图的情况，我们已经知道 <code>l_max &lt; r_max</code> 了，至于这个 <code>r_max</code> 是不是右边最大的，不重要，重要的是 <code>height[i]</code> 能够装的水只和 <code>l_max</code> 有关。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E6%8E%A5%E9%9B%A8%E6%B0%B4/5.jpg"></p><p><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/koko%E5%81%B7%E9%A6%99%E8%95%89">上一篇：如何运用二分查找算法</a><br><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%A6%82%E4%BD%95%E5%8E%BB%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0">下一篇：如何去除有序数组的重复元素</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长回文子串</title>
      <link href="2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
      <url>2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="如何寻找最长回文子串"><a href="#如何寻找最长回文子串" class="headerlink" title="如何寻找最长回文子串"></a>如何寻找最长回文子串</h1><p>回文串是面试常常遇到的问题（虽然问题本身没啥意义），本文就告诉你回文串问题的核心思想是什么。<br>首先，明确一下什：<strong>回文串就是正着读和反着读都一样的字符串</strong>。<br>比如说字符串 <code>aba</code> 和 <code>abba</code> 都是回文串，因为它们对称，反过来还是和本身一样。反之，字符串 <code>abac</code> 就不是回文串。<br>可以看到回文串的的长度可能是奇数，也可能是偶数，这就添加了回文串问题的难度，解决该类问题的核心是<strong>双指针</strong>。下面就通过一道最长回文子串的问题来具体理解一下回文串问题：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%9B%9E%E6%96%87/title.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="一、思考"><a href="#一、思考" class="headerlink" title="一、思考"></a>一、思考</h3><p>对于这个问题，我们首先应该思考的是，给一个字符串 <code>s</code>，如何在 <code>s</code> 中找到一个回文子串？<br>有一个很有趣的思路：既然回文串是一个正着反着读都一样的字符串，那么如果我们把 <code>s</code> 反转，称为 <code>s&#39;</code>，然后在 <code>s</code> 和 <code>s&#39;</code> 中寻找<strong>最长公共子串</strong>，这样应该就能找到最长回文子串。<br>比如说字符串 <code>abacd</code>，反过来是 <code>dcaba</code>，它的最长公共子串是 <code>aba</code>，也就是最长回文子串。<br>但是这个思路是错误的，比如说字符串 <code>aacxycaa</code>，反转之后是 <code>aacyxcaa</code>，最长公共子串是 <code>aac</code>，但是最长回文子串应该是 <code>aa</code>。<br>虽然这个思路不正确，但是<strong>这种把问题转化为其他形式的思考方式是非常值得提倡的</strong>。<br>下面，就来说一下正确的思路，如何使用双指针。<br><strong>寻找回文串的问题核心思想是：从中间开始向两边扩散来判断回文串</strong>。对于最长回文子串，就是这个意思：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> <span class="hljs-number">0</span> &lt;= i &lt; len(s):<br>    找到以 s[i] 为中心的回文串<br>    更新答案<br></code></pre></td></tr></table></figure><p>但是呢，我们刚才也说了，回文串的长度可能是奇数也可能是偶数，如果是 <code>abba</code>这种情况，没有一个中心字符，上面的算法就没辙了。所以我们可以修改一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> <span class="hljs-number">0</span> &lt;= i &lt; len(s):<br>    找到以 s[i] 为中心的回文串<br>    找到以 s[i] 和 s[i+<span class="hljs-number">1</span>] 为中心的回文串<br>    更新答案<br></code></pre></td></tr></table></figure><p>PS：读者可能发现这里的索引会越界，等会会处理。</p><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><p>按照上面的思路，先要实现一个函数来寻找最长回文串，这个函数是有点技巧的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">palindrome</span><span class="hljs-params">(<span class="hljs-built_in">string</span>&amp; s, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br>    <span class="hljs-comment">// 防止索引越界</span><br>    <span class="hljs-keyword">while</span> (l &gt;= <span class="hljs-number">0</span> &amp;&amp; r &lt; s.size()<br>            &amp;&amp; s[l] == s[r]) &#123;<br>        <span class="hljs-comment">// 向两边展开</span><br>        l--; r++;<br>    &#125;<br>    <span class="hljs-comment">// 返回以 s[l] 和 s[r] 为中心的最长回文串</span><br>    <span class="hljs-keyword">return</span> s.substr(l + <span class="hljs-number">1</span>, r - l - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么要传入两个指针 <code>l</code> 和 <code>r</code> 呢？<strong>因为这样实现可以同时处理回文串长度为奇数和偶数的情况</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> <span class="hljs-number">0</span> &lt;= i &lt; len(s):<br>    <span class="hljs-comment"># 找到以 s[i] 为中心的回文串</span><br>    palindrome(s, i, i)<br>    <span class="hljs-comment"># 找到以 s[i] 和 s[i+1] 为中心的回文串</span><br>    palindrome(s, i, i + <span class="hljs-number">1</span>)<br>    更新答案<br></code></pre></td></tr></table></figure><p>下面看下 <code>longestPalindrome</code> 的完整代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span> </span>&#123;<br>    <span class="hljs-built_in">string</span> res;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.size(); i++) &#123;<br>        <span class="hljs-comment">// 以 s[i] 为中心的最长回文子串</span><br>        <span class="hljs-built_in">string</span> s1 = palindrome(s, i, i);<br>        <span class="hljs-comment">// 以 s[i] 和 s[i+1] 为中心的最长回文子串</span><br>        <span class="hljs-built_in">string</span> s2 = palindrome(s, i, i + <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// res = longest(res, s1, s2)</span><br>        res = res.size() &gt; s1.size() ? res : s1;<br>        res = res.size() &gt; s2.size() ? res : s2;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，这道最长回文子串的问题就解决了，时间复杂度 O(N^2)，空间复杂度 O(1)。<br>值得一提的是，这个问题可以用动态规划方法解决，时间复杂度一样，但是空间复杂度至少要 O(N^2) 来存储 DP table。这道题是少有的动态规划非最优解法的问题。<br>另外，这个问题还有一个巧妙的解法，时间复杂度只需要 O(N)，不过该解法比较复杂，我个人认为没必要掌握。该算法的名字叫 Manacher’s Algorithm（马拉车算法），有兴趣的读者可以自行搜索一下。</p><p><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%A6%82%E4%BD%95%E5%8E%BB%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0">上一篇：如何去除有序数组的重复元素</a><br><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/k%E4%B8%AA%E4%B8%80%E7%BB%84%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8">下一篇：如何k个一组反转链表</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水塘抽样</title>
      <link href="2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%B0%B4%E5%A1%98%E6%8A%BD%E6%A0%B7/"/>
      <url>2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%B0%B4%E5%A1%98%E6%8A%BD%E6%A0%B7/</url>
      
        <content type="html"><![CDATA[<p>我最近在 LeetCode 上做到两道非常有意思的题目，382 和 398 题，关于水塘抽样算法（Reservoir Sampling），本质上是一种随机概率算法，解法应该说会者不难，难者不会。<br>我第一次见到这个算法问题是谷歌的一道算法题：给你一个<strong>未知长度</strong>的链表，请你设计一个算法，<strong>只能遍历一次</strong>，随机地返回链表中的一个节点。<br>这里说的随机是均匀随机（uniform random），也就是说，如果有 <code>n</code> 个元素，每个元素被选中的概率都是 <code>1/n</code>，不可以有统计意义上的偏差。<br>一般的想法就是，我先遍历一遍链表，得到链表的总长度 <code>n</code>，再生成一个 <code>[1,n]</code> 之间的随机数为索引，然后找到索引对应的节点，不就是一个随机的节点了吗？<br>但题目说了，只能遍历一次，意味着这种思路不可行。题目还可以再泛化，给一个未知长度的序列，如何在其中随机地选择 <code>k</code> 个元素？想要解决这个问题，就需要著名的水塘抽样算法了。</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><p><strong>先解决只抽取一个元素的问题</strong>，这个问题的难点在于，随机选择是「动态」的，比如说你现在你有 5 个元素，你已经随机选取了其中的某个元素 <code>a</code> 作为结果，但是现在再给你一个新元素 <code>b</code>，你应该留着 <code>a</code> 还是将 <code>b</code> 作为结果呢，以什么逻辑选择 <code>a</code> 和 <code>b</code> 呢，怎么证明你的选择方法在概率上是公平的呢？<br><strong>先说结论，当你遇到第 <code>i</code> 个元素时，应该有 <code>1/i</code> 的概率选择该元素，<code>1 - 1/i</code> 的概率保持原有的选择</strong>。看代码容易理解这个思路：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 返回链表中一个随机节点的值 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getRandom</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    Random r = <span class="hljs-keyword">new</span> Random();<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, res = <span class="hljs-number">0</span>;<br>    ListNode p = head;<br>    <span class="hljs-comment">// while 循环遍历链表</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">// 生成一个 [0, i) 之间的整数</span><br>        <span class="hljs-comment">// 这个整数等于 0 的概率就是 1/i</span><br>        <span class="hljs-keyword">if</span> (r.nextInt(++i) == <span class="hljs-number">0</span>) &#123;<br>            res = p.val;<br>        &#125;<br>        p = p.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于概率算法，代码往往都是很浅显的，但是这种问题的关键在于证明，你的算法为什么是对的？为什么每次以 <code>1/i</code> 的概率更新结果就可以保证结果是平均随机（uniform random）？<br><strong>证明</strong>：假设总共有 <code>n</code> 个元素，我们要的随机性无非就是每个元素被选择的概率都是 <code>1/n</code> 对吧，那么对于第 <code>i</code> 个元素，它被选择的概率就是：<br>$$<br>\begin{aligned}<br>    &amp;\frac{1}{i} \times (1 - \frac{1}{i+1}) \times (1 - \frac{1}{i+2}) \times … \times (1 - \frac{1}{n}) \<br>    = &amp;\frac{1}{i} \times \frac{i}{i+1} \times \frac{i+1}{i+2} \times … \times \frac{n-1}{n} \<br>    = &amp;\frac{1}{n}<br>\end{aligned}<br>$$<br>第 <code>i</code> 个元素被选择的概率是 <code>1/i</code>，第 <code>i+1</code> 次不被替换的概率是 <code>1 - 1/(i+1)</code>，以此类推，相乘就是第 <code>i</code> 个元素最终被选中的概率，就是 <code>1/n</code>。<br>因此，该算法的逻辑是正确的。<br><strong>同理，如果要随机选择 <code>k</code> 个数，只要在第 <code>i</code> 个元素处以 <code>k/i</code> 的概率选择该元素，以 <code>1 - k/i</code> 的概率保持原有选择即可</strong>。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 返回链表中 k 个随机节点的值 */</span><br><span class="hljs-keyword">int</span>[] getRandom(ListNode head, <span class="hljs-keyword">int</span> k) &#123;<br>    Random r = <span class="hljs-keyword">new</span> Random();<br>    <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[k];<br>    ListNode p = head;<br>    <span class="hljs-comment">// 前 k 个元素先默认选上</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; k &amp;&amp; p != <span class="hljs-keyword">null</span>; j++) &#123;<br>        res[j] = p.val;<br>        p = p.next;<br>    &#125;<br>    <span class="hljs-keyword">int</span> i = k;<br>    <span class="hljs-comment">// while 循环遍历链表</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">// 生成一个 [0, i) 之间的整数</span><br>        <span class="hljs-keyword">int</span> j = r.nextInt(++i);<br>        <span class="hljs-comment">// 这个整数小于 k 的概率就是 k/i</span><br>        <span class="hljs-keyword">if</span> (j &lt; k) &#123;<br>            res[j] = p.val;<br>        &#125;<br>        p = p.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于数学证明，和上面区别不大：<br>$$<br>\begin{aligned}<br>    &amp;\frac{k}{i} \times (1 - \frac{k}{i+1} \times \frac{1}{k}) \times (1 - \frac{k}{i+2} \times \frac{1}{k}) \times … \times (1 - \frac{k}{n} \times \frac{1}{k}) \<br>    = &amp;\frac{k}{i} \times (1 - \frac{1}{i+1}) \times (1 - \frac{1}{i+2}) \times … \times (1 - \frac{1}{n}) \<br>    = &amp;\frac{k}{i} \times \frac{i}{i+1} \times \frac{i+1}{i+2} \times … \times \frac{n-1}{n} \<br>    = &amp;\frac{k}{n}<br>\end{aligned}<br>$$<br>因为虽然每次更新选择的概率增大了 <code>k</code> 倍，但是选到具体第 <code>i</code> 个元素的概率还是要乘 <code>1/k</code>，也就回到了上一个推导。</p><h3 id="拓展延伸"><a href="#拓展延伸" class="headerlink" title="拓展延伸"></a>拓展延伸</h3><p>以上的抽样算法时间复杂度是 O(n)，但不是最优的方法，更优化的算法基于几何分布（geometric distribution），时间复杂度为 O(k + klog(n/k))。由于涉及的数学知识比较多，这里就不列出了，有兴趣的读者可以自行搜索一下。<br>还有一种思路是基于「Fisher–Yates 洗牌算法」的。随机抽取 <code>k</code> 个元素，等价于对所有元素洗牌，然后选取前 <code>k</code> 个。只不过，洗牌算法需要对元素的随机访问，所以只能对数组这类支持随机存储的数据结构有效。<br>另外有一种思路也比较有启发意义：给每一个元素关联一个随机数，然后把每个元素插入一个容量为 <code>k</code> 的二叉堆（优先级队列）按照配对的随机数进行排序，最后剩下的 <code>k</code> 个元素也是随机的。<br>这个方案看起来似乎有点多此一举，因为插入二叉堆需要 O(logk) 的时间复杂度，所以整个抽样算法就需要 O(nlogk) 的复杂度，还不如我们最开始的算法。但是，这种思路可以指导我们解决<strong>加权随机抽样算法</strong>，权重越高，被随机选中的概率相应增大，这种情况在现实生活中是很常见的，比如你不往游戏里充钱，就永远抽不到皮肤。<br>最后，我想说随机算法虽然不多，但其实很有技巧的，读者不妨思考两个常见且看起来很简单的问题：<br>1、如何对带有权重的样本进行加权随机抽取？比如给你一个数组 <code>w</code>，每个元素 <code>w[i]</code> 代表权重，请你写一个算法，按照权重随机抽取索引。比如 <code>w = [1,99]</code>，算法抽到索引 0 的概率是 1%，抽到索引 1 的概率是 99%。<br>2、实现一个生成器类，构造函数传入一个很长的数组，请你实现 <code>randomGet</code> 方法，每次调用随机返回数组中的一个元素，多次调用不能重复返回相同索引的元素。要求不能对该数组进行任何形式的修改，且操作的时间复杂度是 O(1)。<br>这两个问题都是比较困难的，以后有时间我会写一写相关的文章。</p><p><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%88%A4%E6%96%AD%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8">上一篇：如何判断回文链表</a><br><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%BA%A7%E4%BD%8D%E8%B0%83%E5%BA%A6">下一篇：如何调度考生的座位</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消失的元素</title>
      <link href="2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%B6%88%E5%A4%B1%E7%9A%84%E5%85%83%E7%B4%A0/"/>
      <url>2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%B6%88%E5%A4%B1%E7%9A%84%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="如何寻找消失的元素"><a href="#如何寻找消失的元素" class="headerlink" title="如何寻找消失的元素"></a>如何寻找消失的元素</h1><p>之前也有文章写过几个有趣的智力题，今天再聊一道巧妙的题目。<br>题目非常简单：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E7%BC%BA%E5%A4%B1%E5%85%83%E7%B4%A0/title.png"><br>给一个长度为 n 的数组，其索引应该在 <code>[0,n)</code>，但是现在你要装进去 n + 1 个元素 <code>[0,n]</code>，那么肯定有一个元素装不下嘛，请你找出这个缺失的元素。<br>这道题不难的，我们应该很容易想到，把这个数组排个序，然后遍历一遍，不就很容易找到缺失的那个元素了吗？<br>或者说，借助数据结构的特性，用一个 HashSet 把数组里出现的数字都储存下来，再遍历 <code>[0,n]</code> 之间的数字，去 HashSet 中查询，也可以很容易查出那个缺失的元素。<br>排序解法的时间复杂度是 O(NlogN)，HashSet 的解法时间复杂度是 O(N)，但是还需要 O(N) 的空间复杂度存储 HashSet。<br><strong>第三种方法是位运算</strong>。<br>对于异或运算（<code>^</code>），我们知道它有一个特殊性质：一个数和它本身做异或运算结果为 0，一个数和 0 做异或运算还是它本身。<br>而且异或运算满足交换律和结合律，也就是说：<br>2 ^ 3 ^ 2 = 3 ^ (2 ^ 2) = 3 ^ 0 = 3<br>而这道题索就可以通过这些性质巧妙算出缺失的那个元素。比如说 <code>nums = [0,3,1,4]</code>：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E7%BC%BA%E5%A4%B1%E5%85%83%E7%B4%A0/1.jpg"></p><p>为了容易理解，我们假设先把索引补一位，然后让每个元素和自己相等的索引相对应：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E7%BC%BA%E5%A4%B1%E5%85%83%E7%B4%A0/2.jpg"></p><p>这样做了之后，就可以发现除了缺失元素之外，所有的索引和元素都组成一对儿了，现在如果把这个落单的索引 2 找出来，也就找到了缺失的那个元素。<br>如何找这个落单的数字呢，<strong>只要把所有的元素和索引做异或运算，成对儿的数字都会消为 0，只有这个落单的元素会剩下</strong>，也就达到了我们的目的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">missingNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = nums.length;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 先和新补的索引异或一下</span><br>    res ^= n;<br>    <span class="hljs-comment">// 和其他的元素、索引做异或</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        res ^= i ^ nums[i];<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E7%BC%BA%E5%A4%B1%E5%85%83%E7%B4%A0/3.jpg"><br>由于异或运算满足交换律和结合律，所以总是能把成对儿的数字消去，留下缺失的那个元素的。<br>至此，时间复杂度 O(N)，空间复杂度 O(1)，已经达到了最优，我们是否就应该打道回府了呢？<br>如果这样想，说明我们受算法的毒害太深，随着我们学习的知识越来越多，反而容易陷入思维定式，这个问题其实还有一个特别简单的解法：<strong>等差数列求和公式</strong>。<br>题目的意思可以这样理解：现在有个等差数列 0, 1, 2,…, n，其中少了某一个数字，请你把它找出来。那这个数字不就是 <code>sum(0,1,..n) - sum(nums)</code> 嘛？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">missingNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = nums.length;<br>    <span class="hljs-comment">// 公式：(首项 + 末项) * 项数 / 2</span><br>    <span class="hljs-keyword">int</span> expect = (<span class="hljs-number">0</span> + n) * (n + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x : nums) <br>        sum += x;<br>    <span class="hljs-keyword">return</span> expect - sum;<br></code></pre></td></tr></table></figure><p>你看，这种解法应该是最简单的，但说实话，我自己也没想到这个解法，而且我去问了几个大佬，他们也没想到这个最简单的思路。相反，如果去问一个初中生，他也许很快就能想到。<br>做到这一步了，我们是否就应该打道回府了呢？<br>如果这样想，说明我们对细节的把控还差点火候。在用求和公式计算 <code>expect</code> 时，你考虑过<strong>整型溢出</strong>吗？如果相乘的结果太大导致溢出，那么结果肯定是错误的。<br>刚才我们的思路是把两个和都加出来然后相减，为了避免溢出，干脆一边求和一边减算了。很类似刚才位运算解法的思路，仍然假设 <code>nums = [0,3,1,4]</code>，先补一位索引再让元素跟索引配对：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E7%BC%BA%E5%A4%B1%E5%85%83%E7%B4%A0/xor.png"></p><p>我们让每个索引减去其对应的元素，再把相减的结果加起来，不就是那个缺失的元素吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">missingNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = nums.length;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 新补的索引</span><br>    res += n - <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 剩下索引和元素的差加起来</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <br>        res += i - nums[i];<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于加减法满足交换律和结合律，所以总是能把成对儿的数字消去，留下缺失的那个元素的。<br>至此这道算法题目经历九曲十八弯，终于再也没有什么坑了。</p><p><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%90%88%E6%B3%95%E6%8B%AC%E5%8F%B7%E5%88%A4%E5%AE%9A">上一篇：如何判定括号合法性</a><br><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E7%BC%BA%E5%A4%B1%E5%92%8C%E9%87%8D%E5%A4%8D%E7%9A%84%E5%85%83%E7%B4%A0">下一篇：如何寻找缺失和重复的元素</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缺失和重复的元素</title>
      <link href="2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E7%BC%BA%E5%A4%B1%E5%92%8C%E9%87%8D%E5%A4%8D%E7%9A%84%E5%85%83%E7%B4%A0/"/>
      <url>2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E7%BC%BA%E5%A4%B1%E5%92%8C%E9%87%8D%E5%A4%8D%E7%9A%84%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p>今天就聊一道很看起来简单却十分巧妙的问题，寻找缺失和重复的元素。之前的一篇文章「寻找缺失元素」也写过类似的问题，不过这次的和上次的问题使用的技巧不同。<br>这是 LeetCode 645 题，我来描述一下这个题目：<br>给一个长度为 <code>N</code> 的数组 <code>nums</code>，其中本来装着 <code>[1..N]</code> 这 <code>N</code> 个元素，无序。但是现在出现了一些错误，<code>nums</code> 中的一个元素出现了重复，也就同时导致了另一个元素的缺失。请你写一个算法，找到 <code>nums</code> 中的重复元素和缺失元素的值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 返回两个数字，分别是 &#123;dup, missing&#125;</span><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">findErrorNums</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span></span>;<br></code></pre></td></tr></table></figure><p>比如说输入：<code>nums = [1,2,2,4]</code>，算法返回 <code>[2,3]</code>。<br>其实很容易解决这个问题，先遍历一次数组，用一个哈希表记录每个数字出现的次数，然后遍历一次 <code>[1..N]</code>，看看那个元素重复出现，那个元素没有出现，就 OK 了。<br>但问题是，这个常规解法需要一个哈希表，也就是 O(N) 的空间复杂度。你看题目给的条件那么巧，在 <code>[1..N]</code> 的几个数字中恰好有一个重复，一个缺失，<strong>事出反常必有妖</strong>，对吧。<br>O(N) 的时间复杂度遍历数组是无法避免的，所以我们可以想想办法如何降低空间复杂度，是否可以在 O(1) 的空间复杂度之下找到重复和确实的元素呢？</p><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>这个问题的特点是，每个元素和数组索引有一定的对应关系。<br>我们现在自己改造下问题，<strong>暂且将 <code>nums</code> 中的元素变为 <code>[0..N-1]</code>，这样每个元素就和一个数组索引完全对应了，这样方便理解一些</strong>。<br>如果说 <code>nums</code> 中不存在重复元素和缺失元素，那么每个元素就和唯一一个索引值对应，对吧？<br>现在的问题是，有一个元素重复了，同时导致一个元素缺失了，这会产生什么现象呢？<strong>会导致有两个元素对应到了同一个索引，而且会有一个索引没有元素对应过去</strong>。<br>那么，如果我能够通过某些方法，找到这个重复对应的索引，不就是找到了那个重复元素么？找到那个没有元素对应的索引，不就是找到了那个缺失的元素了么？<br>那么，如何不使用额外空间判断某个索引有多少个元素对应呢？这就是这个问题的精妙之处了：<br><strong>通过将每个索引对应的元素变成负数，以表示这个索引被对应过一次了</strong>：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/dupmissing/1.gif"><br>如果出现重复元素 <code>4</code>，直观结果就是，索引 <code>4</code> 所对应的元素已经是负数了：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/dupmissing/2.jpg"><br>对于缺失元素 <code>3</code>，直观结果就是，索引 <code>3</code> 所对应的元素是正数：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/dupmissing/3.jpg"><br>对于这个现象，我们就可以翻译成代码了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">findErrorNums</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = nums.size();<br>    <span class="hljs-keyword">int</span> dup = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">int</span> index = <span class="hljs-built_in">abs</span>(nums[i]);<br>        <span class="hljs-comment">// nums[index] 小于 0 则说明重复访问</span><br>        <span class="hljs-keyword">if</span> (nums[index] &lt; <span class="hljs-number">0</span>)<br>            dup = <span class="hljs-built_in">abs</span>(nums[i]);<br>        <span class="hljs-keyword">else</span><br>            nums[index] *= <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> missing = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-comment">// nums[i] 大于 0 则说明没有访问</span><br>        <span class="hljs-keyword">if</span> (nums[i] &gt; <span class="hljs-number">0</span>)<br>            missing = i;<br>    <br>    <span class="hljs-keyword">return</span> &#123;dup, missing&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个问题就基本解决了，别忘了我们刚才为了方便分析，假设元素是 <code>[0..N-1]</code>，但题目要求是 <code>[1..N]</code>，所以只要简单修改两处地方即可得到原题的答案：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">findErrorNums</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = nums.size();<br>    <span class="hljs-keyword">int</span> dup = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-comment">// 现在的元素是从 1 开始的</span><br>        <span class="hljs-keyword">int</span> index = <span class="hljs-built_in">abs</span>(nums[i]) - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (nums[index] &lt; <span class="hljs-number">0</span>)<br>            dup = <span class="hljs-built_in">abs</span>(nums[i]);<br>        <span class="hljs-keyword">else</span><br>            nums[index] *= <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> missing = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-keyword">if</span> (nums[i] &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-comment">// 将索引转换成元素</span><br>            missing = i + <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">return</span> &#123;dup, missing&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实，元素从 1 开始是有道理的，也必须从一个非零数开始。因为如果元素从 0 开始，那么 0 的相反数还是自己，所以如果数字 0 出现了重复或者缺失，算法就无法判断 0 是否被访问过。我们之前的假设只是为了简化题目，更通俗易懂。</p><h3 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h3><p>对于这种数组问题，<strong>关键点在于元素和索引是成对儿出现的，常用的方法是排序、异或、映射</strong>。<br>映射的思路就是我们刚才的分析，将每个索引和元素映射起来，通过正负号记录某个元素是否被映射。<br>排序的方法也很好理解，对于这个问题，可以想象如果元素都被从小到大排序，如果发现索引对应的元素如果不相符，就可以找到重复和缺失的元素。<br>异或运算也是常用的，因为异或性质 <code>a ^ a = 0, a ^ 0 = a</code>，如果将索引和元素同时异或，就可以消除成对儿的索引和元素，留下的就是重复或者缺失的元素。可以看看前文「寻找缺失元素」，介绍过这种方法。</p><p><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%B6%88%E5%A4%B1%E7%9A%84%E5%85%83%E7%B4%A0">上一篇：如何寻找消失的元素</a><br><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%88%A4%E6%96%AD%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8">下一篇：如何判断回文链表</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高频面试系列</title>
      <link href="2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/"/>
      <url>2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="高频面试系列"><a href="#高频面试系列" class="headerlink" title="高频面试系列"></a>高频面试系列</h1><ul><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/LRU%E7%AE%97%E6%B3%95">如何实现LRU算法</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%89%93%E5%8D%B0%E7%B4%A0%E6%95%B0">如何高效寻找素数</a></li><li><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB">如何计算编辑距离</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/koko%E5%81%B7%E9%A6%99%E8%95%89">如何运用二分查找算法</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%8E%A5%E9%9B%A8%E6%B0%B4">如何高效解决接雨水问题</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%A6%82%E4%BD%95%E5%8E%BB%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0">如何去除有序数组的重复元素</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2">如何寻找最长回文子串</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/k%E4%B8%AA%E4%B8%80%E7%BB%84%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8">如何k个一组反转链表</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%90%88%E6%B3%95%E6%8B%AC%E5%8F%B7%E5%88%A4%E5%AE%9A">如何判定括号合法性</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%B6%88%E5%A4%B1%E7%9A%84%E5%85%83%E7%B4%A0">如何寻找消失的元素</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E7%BC%BA%E5%A4%B1%E5%92%8C%E9%87%8D%E5%A4%8D%E7%9A%84%E5%85%83%E7%B4%A0">如何寻找缺失和重复的元素</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%88%A4%E6%96%AD%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8">如何判断回文链表</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E6%B0%B4%E5%A1%98%E6%8A%BD%E6%A0%B7">如何在无限序列中随机抽取元素</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E5%BA%A7%E4%BD%8D%E8%B0%83%E5%BA%A6">如何调度考生的座位</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/UnionFind%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3">Union-Find算法详解</a></li><li><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/UnionFind%E7%AE%97%E6%B3%95%E5%BA%94%E7%94%A8">Union-Find算法应用</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E8%A7%A3%E5%86%B3%E7%9A%84%E6%99%BA%E5%8A%9B%E9%A2%98">一行代码就能解决的算法题</a></li><li><a href="/2016/01/01/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%88%A4%E5%AE%9A%E5%AD%90%E5%BA%8F%E5%88%97">二分查找高效判定子序列</a><br>8 说了，本章都是高频面试题，配合前面的动态规划系列，祝各位马到成功！</li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划之KMP字符匹配算法</title>
      <link href="2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8BKMP%E5%AD%97%E7%AC%A6%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/"/>
      <url>2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8BKMP%E5%AD%97%E7%AC%A6%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>title: 动态规划之KMP字符匹配算法<br>author: 远方<br>tags:</p><ul><li>LeetCode</li><li>算法<br>categories:</li><li>LeetCode破局攻略<br>date: 2016-01-01 19:20:00</li></ul><hr><h1 id="动态规划之KMP字符匹配算法"><a href="#动态规划之KMP字符匹配算法" class="headerlink" title="动态规划之KMP字符匹配算法"></a>动态规划之KMP字符匹配算法</h1><p>KMP 算法（Knuth-Morris-Pratt 算法）是一个著名的字符串匹配算法，效率很高，但是确实有点复杂。<br>很多读者抱怨 KMP 算法无法理解，这很正常，想到大学教材上关于 KMP 算法的讲解，也不知道有多少未来的 Knuth、Morris、Pratt 被提前劝退了。有一些优秀的同学通过手推 KMP 算法的过程来辅助理解该算法，这是一种办法，不过本文要从逻辑层面帮助读者理解算法的原理。十行代码之间，KMP 灰飞烟灭。<br><strong>先在开头约定，本文用 <code>pat</code> 表示模式串，长度为 <code>M</code>，<code>txt</code> 表示文本串，长度为 <code>N</code>。KMP 算法是在 <code>txt</code> 中查找子串 <code>pat</code>，如果存在，返回这个子串的起始索引，否则返回 -1</strong>。<br>为什么我认为 KMP 算法就是个动态规划问题呢，等会再解释。对于动态规划，之前多次强调了要明确 <code>dp</code> 数组的含义，而且同一个问题可能有不止一种定义 <code>dp</code> 数组含义的方法，不同的定义会有不同的解法。<br>读者见过的 KMP 算法应该是，一波诡异的操作处理 <code>pat</code> 后形成一个一维的数组 <code>next</code>，然后根据这个数组经过又一波复杂操作去匹配 <code>txt</code>。时间复杂度 O(N)，空间复杂度 O(M)。其实它这个 <code>next</code> 数组就相当于 <code>dp</code> 数组，其中元素的含义跟 <code>pat</code> 的前缀和后缀有关，判定规则比较复杂，不好理解。<strong>本文则用一个二维的 <code>dp</code> 数组（但空间复杂度还是 O(M)），重新定义其中元素的含义，使得代码长度大大减少，可解释性大大提高</strong>。<br>PS：本文的代码参考《算法4》，原代码使用的数组名称是 <code>dfa</code>（确定有限状态机），因为我们的公众号之前有一系列动态规划的文章，就不说这么高大上的名词了，我对书中代码进行了一点修改，并沿用 <code>dp</code> 数组的名称。</p><h3 id="一、KMP-算法概述"><a href="#一、KMP-算法概述" class="headerlink" title="一、KMP 算法概述"></a>一、KMP 算法概述</h3><p>首先还是简单介绍一下 KMP 算法和暴力匹配算法的不同在哪里，难点在哪里，和动态规划有啥关系。<br>暴力的字符串匹配算法很容易写，看一下它的运行逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 暴力匹配（伪码）</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">search</span><span class="hljs-params">(String pat, String txt)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> M = pat.length;<br>    <span class="hljs-keyword">int</span> N = txt.length;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= N - M; i++) &#123;<br>        <span class="hljs-keyword">int</span> j;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; M; j++) &#123;<br>            <span class="hljs-keyword">if</span> (pat[j] != txt[i+j])<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">// pat 全都匹配了</span><br>        <span class="hljs-keyword">if</span> (j == M) <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-comment">// txt 中不存在 pat 子串</span><br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于暴力算法，如果出现不匹配字符，同时回退 <code>txt</code> 和 <code>pat</code> 的指针，嵌套 for 循环，时间复杂度 $O(MN)$，空间复杂度$O(1)$。最主要的问题是，如果字符串中重复的字符比较多，该算法就显得很蠢。<br>比如 txt = “aaacaaab” pat = “aaab”：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kmp/1.gif" alt="brutal"><br>很明显，<code>pat</code> 中根本没有字符 c，根本没必要回退指针 <code>i</code>，暴力解法明显多做了很多不必要的操作。<br>KMP 算法的不同之处在于，它会花费空间来记录一些信息，在上述情况中就会显得很聪明：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kmp/2.gif" alt="kmp1"><br>再比如类似的 txt = “aaaaaaab” pat = “aaab”，暴力解法还会和上面那个例子一样蠢蠢地回退指针 <code>i</code>，而 KMP 算法又会耍聪明：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kmp/3.gif" alt="kmp2"><br>因为 KMP 算法知道字符 b 之前的字符 a 都是匹配的，所以每次只需要比较字符 b 是否被匹配就行了。<br><strong>KMP 算法永不回退 <code>txt</code> 的指针 <code>i</code>，不走回头路（不会重复扫描 <code>txt</code>），而是借助 <code>dp</code> 数组中储存的信息把 <code>pat</code> 移到正确的位置继续匹配</strong>，时间复杂度只需 O(N)，用空间换时间，所以我认为它是一种动态规划算法。<br>KMP 算法的难点在于，如何计算 <code>dp</code> 数组中的信息？如何根据这些信息正确地移动 <code>pat</code> 的指针？这个就需要<strong>确定有限状态自动机</strong>来辅助了，别怕这种高大上的文学词汇，其实和动态规划的 <code>dp</code> 数组如出一辙，等你学会了也可以拿这个词去吓唬别人。<br>还有一点需要明确的是：<strong>计算这个 <code>dp</code> 数组，只和 <code>pat</code> 串有关</strong>。意思是说，只要给我个 <code>pat</code>，我就能通过这个模式串计算出 <code>dp</code> 数组，然后你可以给我不同的 <code>txt</code>，我都不怕，利用这个 <code>dp</code> 数组我都能在 O(N) 时间完成字符串匹配。<br>具体来说，比如上文举的两个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">txt1 = <span class="hljs-string">&quot;aaacaaab&quot;</span> <br>pat = <span class="hljs-string">&quot;aaab&quot;</span><br>txt2 = <span class="hljs-string">&quot;aaaaaaab&quot;</span> <br>pat = <span class="hljs-string">&quot;aaab&quot;</span><br></code></pre></td></tr></table></figure><p>我们的 <code>txt</code> 不同，但是 <code>pat</code> 是一样的，所以 KMP 算法使用的 <code>dp</code> 数组是同一个。<br>只不过对于 <code>txt1</code> 的下面这个即将出现的未匹配情况：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kmp/txt1.jpg"><br><code>dp</code> 数组指示 <code>pat</code> 这样移动：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kmp/txt2.jpg"><br>PS：这个<code>j</code> 不要理解为索引，它的含义更准确地说应该是<strong>状态</strong>（state），所以它会出现这个奇怪的位置，后文会详述。<br>而对于 <code>txt2</code> 的下面这个即将出现的未匹配情况：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kmp/txt3.jpg"><br><code>dp</code> 数组指示 <code>pat</code> 这样移动：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kmp/txt4.jpg"><br>明白了 <code>dp</code> 数组只和 <code>pat</code> 有关，那么我们这样设计 KMP 算法就会比较漂亮：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KMP</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[][] dp;<br>    <span class="hljs-keyword">private</span> String pat;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">KMP</span><span class="hljs-params">(String pat)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.pat = pat;<br>        <span class="hljs-comment">// 通过 pat 构建 dp 数组</span><br>        <span class="hljs-comment">// 需要 O(M) 时间</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">search</span><span class="hljs-params">(String txt)</span> </span>&#123;<br>        <span class="hljs-comment">// 借助 dp 数组去匹配 txt</span><br>        <span class="hljs-comment">// 需要 O(N) 时间</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，当我们需要用同一 <code>pat</code> 去匹配不同 <code>txt</code> 时，就不需要浪费时间构造 <code>dp</code> 数组了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">KMP kmp = <span class="hljs-keyword">new</span> KMP(<span class="hljs-string">&quot;aaab&quot;</span>);<br><span class="hljs-keyword">int</span> pos1 = kmp.search(<span class="hljs-string">&quot;aaacaaab&quot;</span>); <span class="hljs-comment">//4</span><br><span class="hljs-keyword">int</span> pos2 = kmp.search(<span class="hljs-string">&quot;aaaaaaab&quot;</span>); <span class="hljs-comment">//4</span><br></code></pre></td></tr></table></figure><h3 id="二、状态机概述"><a href="#二、状态机概述" class="headerlink" title="二、状态机概述"></a>二、状态机概述</h3><p>为什么说 KMP 算法和状态机有关呢？是这样的，我们可以认为 <code>pat</code> 的匹配就是状态的转移。比如当 pat = “ABABC”：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kmp/state.jpg"><br>如上图，圆圈内的数字就是状态，状态 0 是起始状态，状态 5（<code>pat.length</code>）是终止状态。开始匹配时 <code>pat</code> 处于起始状态，一旦转移到终止状态，就说明在 <code>txt</code> 中找到了 <code>pat</code>。比如说当前处于状态 2，就说明字符 “AB” 被匹配：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kmp/state2.jpg"><br>另外，处于不同状态时，<code>pat</code> 状态转移的行为也不同。比如说假设现在匹配到了状态 4，如果遇到字符 A 就应该转移到状态 3，遇到字符 C 就应该转移到状态 5，如果遇到字符 B 就应该转移到状态 0：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kmp/state4.jpg"><br>具体什么意思呢，我们来一个个举例看看。用变量 <code>j</code> 表示指向当前状态的指针，当前 <code>pat</code> 匹配到了状态 4：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kmp/exp1.jpg"><br>如果遇到了字符 “A”，根据箭头指示，转移到状态 3 是最聪明的：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kmp/exp3.jpg"><br>如果遇到了字符 “B”，根据箭头指示，只能转移到状态 0（一夜回到解放前）：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kmp/exp5.jpg"><br>如果遇到了字符 “C”，根据箭头指示，应该转移到终止状态 5，这也就意味着匹配完成：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kmp/exp7.jpg"></p><p>当然了，还可能遇到其他字符，比如 Z，但是显然应该转移到起始状态 0，因为 <code>pat</code> 中根本都没有字符 Z：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kmp/z.jpg"><br>这里为了清晰起见，我们画状态图时就把其他字符转移到状态 0 的箭头省略，只画 <code>pat</code> 中出现的字符的状态转移：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kmp/allstate.jpg"><br>KMP 算法最关键的步骤就是构造这个状态转移图。<strong>要确定状态转移的行为，得明确两个变量，一个是当前的匹配状态，另一个是遇到的字符</strong>；确定了这两个变量后，就可以知道这个情况下应该转移到哪个状态。<br>下面看一下 KMP 算法根据这幅状态转移图匹配字符串 <code>txt</code> 的过程：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kmp/kmp.gif"><br><strong>请记住这个 GIF 的匹配过程，这就是 KMP 算法的核心逻辑</strong>！<br>为了描述状态转移图，我们定义一个二维 dp 数组，它的含义如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">dp[j][c] = next<br><span class="hljs-number">0</span> &lt;= j &lt; M，代表当前的状态<br><span class="hljs-number">0</span> &lt;= c &lt; <span class="hljs-number">256</span>，代表遇到的字符（ASCII 码）<br><span class="hljs-number">0</span> &lt;= next &lt;= M，代表下一个状态<br>dp[<span class="hljs-number">4</span>][<span class="hljs-string">&#x27;A&#x27;</span>] = <span class="hljs-number">3</span> 表示：<br>当前是状态 <span class="hljs-number">4</span>，如果遇到字符 A，<br>pat 应该转移到状态 <span class="hljs-number">3</span><br>dp[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;B&#x27;</span>] = <span class="hljs-number">2</span> 表示：<br>当前是状态 <span class="hljs-number">1</span>，如果遇到字符 B，<br>pat 应该转移到状态 <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>根据我们这个 dp 数组的定义和刚才状态转移的过程，我们可以先写出 KMP 算法的 search 函数代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">search</span><span class="hljs-params">(String txt)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> M = pat.length();<br>    <span class="hljs-keyword">int</span> N = txt.length();<br>    <span class="hljs-comment">// pat 的初始态为 0</span><br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-comment">// 当前是状态 j，遇到字符 txt[i]，</span><br>        <span class="hljs-comment">// pat 应该转移到哪个状态？</span><br>        j = dp[j][txt.charAt(i)];<br>        <span class="hljs-comment">// 如果达到终止态，返回匹配开头的索引</span><br>        <span class="hljs-keyword">if</span> (j == M) <span class="hljs-keyword">return</span> i - M + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 没到达终止态，匹配失败</span><br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>到这里，应该还是很好理解的吧，<code>dp</code> 数组就是我们刚才画的那幅状态转移图，如果不清楚的话回去看下 GIF 的算法演进过程。下面讲解：如何通过 <code>pat</code> 构建这个 <code>dp</code> 数组？</p><h3 id="三、构建状态转移图"><a href="#三、构建状态转移图" class="headerlink" title="三、构建状态转移图"></a>三、构建状态转移图</h3><p>回想刚才说的：<strong>要确定状态转移的行为，必须明确两个变量，一个是当前的匹配状态，另一个是遇到的字符</strong>，而且我们已经根据这个逻辑确定了 <code>dp</code> 数组的含义，那么构造 <code>dp</code> 数组的框架就是这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> <span class="hljs-number">0</span> &lt;= j &lt; M: <span class="hljs-comment"># 状态</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-number">0</span> &lt;= c &lt; <span class="hljs-number">256</span>: <span class="hljs-comment"># 字符</span><br>        dp[j][c] = next<br></code></pre></td></tr></table></figure><p>这个 next 状态应该怎么求呢？显然，<strong>如果遇到的字符 <code>c</code> 和 <code>pat[j]</code> 匹配的话</strong>，状态就应该向前推进一个，也就是说 <code>next = j + 1</code>，我们不妨称这种情况为<strong>状态推进</strong>：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kmp/forward.jpg"><br><strong>如果字符 <code>c</code> 和 <code>pat[j]</code> 不匹配的话</strong>，状态就要回退（或者原地不动），我们不妨称这种情况为<strong>状态重启</strong>：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kmp/back.jpg"><br>那么，如何得知在哪个状态重启呢？解答这个问题之前，我们再定义一个名字：<strong>影子状态</strong>（我编的名字），用变量 <code>X</code> 表示。<strong>所谓影子状态，就是和当前状态具有相同的前缀</strong>。比如下面这种情况：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kmp/shadow.jpg"><br>当前状态 <code>j = 4</code>，其影子状态为 <code>X = 2</code>，它们都有相同的前缀 “AB”。因为状态 <code>X</code> 和状态 <code>j</code> 存在相同的前缀，所以当状态 <code>j</code> 准备进行状态重启的时候（遇到的字符 <code>c</code> 和 <code>pat[j]</code> 不匹配），可以通过 <code>X</code> 的状态转移图来获得<strong>最近的重启位置</strong>。<br>比如说刚才的情况，如果状态 <code>j</code> 遇到一个字符 “A”，应该转移到哪里呢？首先只有遇到 “C” 才能推进状态，遇到 “A” 显然只能进行状态重启。<strong>状态 <code>j</code> 会把这个字符委托给状态 <code>X</code> 处理，也就是 <code>dp[j][&#39;A&#39;] = dp[X][&#39;A&#39;]</code>**：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kmp/shadow1.jpg"><br>为什么这样可以呢？因为：既然 <code>j</code> 这边已经确定字符 “A” 无法推进状态，</strong>只能回退<strong>，而且 KMP 就是要</strong>尽可能少的回退**，以免多余的计算。那么 <code>j</code> 就可以去问问和自己具有相同前缀的 <code>X</code>，如果 <code>X</code> 遇见 “A” 可以进行「状态推进」，那就转移过去，因为这样回退最少。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kmp/A.gif"><br>当然，如果遇到的字符是 “B”，状态 <code>X</code> 也不能进行「状态推进」，只能回退，<code>j</code> 只要跟着 <code>X</code> 指引的方向回退就行了：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kmp/shadow2.jpg"><br>你也许会问，这个 <code>X</code> 怎么知道遇到字符 “B” 要回退到状态 0 呢？因为 <code>X</code> 永远跟在 <code>j</code> 的身后，状态 <code>X</code> 如何转移，在之前就已经算出来了。动态规划算法不就是利用过去的结果解决现在的问题吗？<br>这样，我们就细化一下刚才的框架代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">int X <span class="hljs-comment"># 影子状态</span><br><span class="hljs-keyword">for</span> <span class="hljs-number">0</span> &lt;= j &lt; M:<br>    <span class="hljs-keyword">for</span> <span class="hljs-number">0</span> &lt;= c &lt; <span class="hljs-number">256</span>:<br>        <span class="hljs-keyword">if</span> c == pat[j]:<br>            <span class="hljs-comment"># 状态推进</span><br>            dp[j][c] = j + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>: <br>            <span class="hljs-comment"># 状态重启</span><br>            <span class="hljs-comment"># 委托 X 计算重启位置</span><br>            dp[j][c] = dp[X][c] <br></code></pre></td></tr></table></figure><h3 id="四、代码实现"><a href="#四、代码实现" class="headerlink" title="四、代码实现"></a>四、代码实现</h3><p>如果之前的内容你都能理解，恭喜你，现在就剩下一个问题：影子状态 <code>X</code> 是如何得到的呢？下面先直接看完整代码吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KMP</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[][] dp;<br>    <span class="hljs-keyword">private</span> String pat;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">KMP</span><span class="hljs-params">(String pat)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.pat = pat;<br>        <span class="hljs-keyword">int</span> M = pat.length();<br>        <span class="hljs-comment">// dp[状态][字符] = 下个状态</span><br>        dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[M][<span class="hljs-number">256</span>];<br>        <span class="hljs-comment">// base case</span><br>        dp[<span class="hljs-number">0</span>][pat.charAt(<span class="hljs-number">0</span>)] = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 影子状态 X 初始为 0</span><br>        <span class="hljs-keyword">int</span> X = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 当前状态 j 从 1 开始</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; M; j++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>; c &lt; <span class="hljs-number">256</span>; c++) &#123;<br>                <span class="hljs-keyword">if</span> (pat.charAt(j) == c) <br>                    dp[j][c] = j + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> <br>                    dp[j][c] = dp[X][c];<br>            &#125;<br>            <span class="hljs-comment">// 更新影子状态</span><br>            X = dp[X][pat.charAt(j)];<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">search</span><span class="hljs-params">(String txt)</span> </span>&#123;...&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>先解释一下这一行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// base case</span><br>dp[<span class="hljs-number">0</span>][pat.charAt(<span class="hljs-number">0</span>)] = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>这行代码是 base case，只有遇到 pat[0] 这个字符才能使状态从 0 转移到 1，遇到其它字符的话还是停留在状态 0（Java 默认初始化数组全为 0）。<br>影子状态 <code>X</code> 是先初始化为 0，然后随着 <code>j</code> 的前进而不断更新的。下面看看到底应该**如何更新影子状态 <code>X</code>**：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> X = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; M; j++) &#123;<br>    ...<br>    <span class="hljs-comment">// 更新影子状态</span><br>    <span class="hljs-comment">// 当前是状态 X，遇到字符 pat[j]，</span><br>    <span class="hljs-comment">// pat 应该转移到哪个状态？</span><br>    X = dp[X][pat.charAt(j)];<br>&#125;<br></code></pre></td></tr></table></figure><p>更新 <code>X</code> 其实和 <code>search</code> 函数中更新状态 <code>j</code> 的过程是非常相似的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>    <span class="hljs-comment">// 当前是状态 j，遇到字符 txt[i]，</span><br>    <span class="hljs-comment">// pat 应该转移到哪个状态？</span><br>    j = dp[j][txt.charAt(i)];<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>其中的原理非常微妙</strong>，注意代码中 for 循环的变量初始值，可以这样理解：后者是在 <code>txt</code> 中匹配 <code>pat</code>，前者是在 <code>pat</code> 中匹配 <code>pat[1..end]</code>，状态 <code>X</code> 总是落后状态 <code>j</code> 一个状态，与 <code>j</code> 具有最长的相同前缀。所以我把 <code>X</code> 比喻为影子状态，似乎也有一点贴切。<br>另外，构建 dp 数组是根据 base case <code>dp[0][..]</code> 向后推演。这就是我认为 KMP 算法就是一种动态规划算法的原因。<br>下面来看一下状态转移图的完整构造过程，你就能理解状态 <code>X</code> 作用之精妙了：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/kmp/dfa.gif"><br>至此，KMP 算法的核心终于写完啦啦啦啦！看下 KMP 算法的完整代码吧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KMP</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[][] dp;<br>    <span class="hljs-keyword">private</span> String pat;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">KMP</span><span class="hljs-params">(String pat)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.pat = pat;<br>        <span class="hljs-keyword">int</span> M = pat.length();<br>        <span class="hljs-comment">// dp[状态][字符] = 下个状态</span><br>        dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[M][<span class="hljs-number">256</span>];<br>        <span class="hljs-comment">// base case</span><br>        dp[<span class="hljs-number">0</span>][pat.charAt(<span class="hljs-number">0</span>)] = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 影子状态 X 初始为 0</span><br>        <span class="hljs-keyword">int</span> X = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 构建状态转移图（稍改的更紧凑了）</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; M; j++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>; c &lt; <span class="hljs-number">256</span>; c++)<br>                dp[j][c] = dp[X][c];<br>            dp[j][pat.charAt(j)] = j + <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 更新影子状态</span><br>            X = dp[X][pat.charAt(j)];<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">search</span><span class="hljs-params">(String txt)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> M = pat.length();<br>        <span class="hljs-keyword">int</span> N = txt.length();<br>        <span class="hljs-comment">// pat 的初始态为 0</span><br>        <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            <span class="hljs-comment">// 计算 pat 的下一个状态</span><br>            j = dp[j][txt.charAt(i)];<br>            <span class="hljs-comment">// 到达终止态，返回结果</span><br>            <span class="hljs-keyword">if</span> (j == M) <span class="hljs-keyword">return</span> i - M + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 没到达终止态，匹配失败</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>经过之前的详细举例讲解，你应该可以理解这段代码的含义了，当然你也可以把 KMP 算法写成一个函数。核心代码也就是两个函数中 for 循环的部分，数一下有超过十行吗？</p><h3 id="五、最后总结"><a href="#五、最后总结" class="headerlink" title="五、最后总结"></a>五、最后总结</h3><p>传统的 KMP 算法是使用一个一维数组 <code>next</code> 记录前缀信息，而本文是使用一个二维数组 <code>dp</code> 以状态转移的角度解决字符匹配问题，但是空间复杂度仍然是 O(256M) = O(M)。<br>在 <code>pat</code> 匹配 <code>txt</code> 的过程中，只要明确了「当前处在哪个状态」和「遇到的字符是什么」这两个问题，就可以确定应该转移到哪个状态（推进或回退）。<br>对于一个模式串 <code>pat</code>，其总共就有 M 个状态，对于 ASCII 字符，总共不会超过 256 种。所以我们就构造一个数组 <code>dp[M][256]</code> 来包含所有情况，并且明确 <code>dp</code> 数组的含义：<br><code>dp[j][c] = next</code> 表示，当前是状态 <code>j</code>，遇到了字符 <code>c</code>，应该转移到状态 <code>next</code>。<br>明确了其含义，就可以很容易写出 search 函数的代码。<br>对于如何构建这个 <code>dp</code> 数组，需要一个辅助状态 <code>X</code>，它永远比当前状态 <code>j</code> 落后一个状态，拥有和 <code>j</code> 最长的相同前缀，我们给它起了个名字叫「影子状态」。<br>在构建当前状态 <code>j</code> 的转移方向时，只有字符 <code>pat[j]</code> 才能使状态推进（<code>dp[j][pat[j]] = j+1</code>）；而对于其他字符只能进行状态回退，应该去请教影子状态 <code>X</code> 应该回退到哪里（<code>dp[j][other] = dp[X][other]</code>，其中 <code>other</code> 是除了 <code>pat[j]</code> 之外所有字符）。<br>对于影子状态 <code>X</code>，我们把它初始化为 0，并且随着 <code>j</code> 的前进进行更新，更新的方式和 search 过程更新 <code>j</code> 的过程非常相似（<code>X = dp[X][pat[j]]</code>）。<br>KMP 算法也就是动态规划那点事，我们的公众号文章目录有一系列专门讲动态规划的，而且都是按照一套框架来的，无非就是描述问题逻辑，明确 <code>dp</code> 数组含义，定义 base case 这点破事。希望这篇文章能让大家对动态规划有更深的理解。</p><p><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E4%B9%8B%E5%8C%BA%E9%97%B4%E8%B0%83%E5%BA%A6%E9%97%AE%E9%A2%98">上一篇：贪心算法之区间调度问题</a><br><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%9B%A2%E7%81%AD%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98">下一篇：团灭 LeetCode 股票买卖问题</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划详解进阶</title>
      <link href="2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3%E8%BF%9B%E9%98%B6/"/>
      <url>2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划详解"><a href="#动态规划详解" class="headerlink" title="动态规划详解"></a>动态规划详解</h1><p>这篇文章是我们号半年前一篇 200 多赞赏的成名之作「动态规划详解」的进阶版。由于账号迁移的原因，旧文无法被搜索到，所以我润色了本文，并添加了更多干货内容，希望本文成为解决动态规划的一部「指导方针」。</p><p>再说句题外话，我们的公众号开号至今写了起码十几篇文章拆解动态规划问题，我都整理到了公众号菜单的「文章目录」中，<strong>它们都提到了动态规划的解题框架思维，本文就系统总结一下</strong>。这段时间本人也从非科班小白成长到刷通半个 LeetCode，所以我总结的套路可能不适合各路大神，但是应该适合大众，毕竟我自己也是一路摸爬滚打过来的。</p><p>算法技巧就那几个套路，如果你心里有数，就会轻松很多，本文就来扒一扒动态规划的裤子，形成一套解决这类问题的思维框架。废话不多说了，上干货。</p><p><strong>动态规划问题的一般形式就是求最值</strong>。动态规划其实是运筹学的一种最优化方法，只不过在计算机问题上应用比较多，比如说让你求<strong>最长</strong>递增子序列呀，<strong>最小</strong>编辑距离呀等等。</p><p>既然是要求最值，核心问题是什么呢？<strong>求解动态规划的核心问题是穷举</strong>。因为要求最值，肯定要把所有可行的答案穷举出来，然后在其中找最值呗。</p><p>动态规划就这么简单，就是穷举就完事了？我看到的动态规划问题都很难啊！</p><p>首先，动态规划的穷举有点特别，因为这类问题<strong>存在「重叠子问题」</strong>，如果暴力穷举的话效率会极其低下，所以需要「备忘录」或者「DP table」来优化穷举过程，避免不必要的计算。</p><p>而且，动态规划问题一定会<strong>具备「最优子结构」</strong>，才能通过子问题的最值得到原问题的最值。</p><p>另外，虽然动态规划的核心思想就是穷举求最值，但是问题可以千变万化，穷举所有可行解其实并不是一件容易的事，只有列出<strong>正确的「状态转移方程</strong>」才能正确地穷举。</p><p>以上提到的重叠子问题、最优子结构、状态转移方程就是动态规划三要素。具体什么意思等会会举例详解，但是在实际的算法问题中，<strong>写出状态转移方程是最困难的</strong>，这也就是为什么很多朋友觉得动态规划问题困难的原因，我来提供我研究出来的一个思维框架，辅助你思考状态转移方程：</p><p>明确「状态」 -&gt; 定义 dp 数组/函数的含义 -&gt; 明确「选择」-&gt; 明确 base case。</p><p>下面通过斐波那契数列问题和凑零钱问题来详解动态规划的基本原理。前者主要是让你明白什么是重叠子问题（斐波那契数列严格来说不是动态规划问题），后者主要举集中于如何列出状态转移方程。</p><p>请读者不要嫌弃这个例子简单，<strong>只有简单的例子才能让你把精力充分集中在算法背后的通用思想和技巧上，而不会被那些隐晦的细节问题搞的莫名其妙</strong>。想要困难的例子，历史文章里有的是。</p><h3 id="一、斐波那契数列"><a href="#一、斐波那契数列" class="headerlink" title="一、斐波那契数列"></a>一、斐波那契数列</h3><p><strong>1、暴力递归</strong></p><p>斐波那契数列的数学形式就是递归的，写成代码就是这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fib</span><span class="hljs-params">(<span class="hljs-keyword">int</span> N)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (N == <span class="hljs-number">1</span> || N == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> fib(N - <span class="hljs-number">1</span>) + fib(N - <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个不用多说了，学校老师讲递归的时候似乎都是拿这个举例。我们也知道这样写代码虽然简洁易懂，但是十分低效，低效在哪里？假设 n = 20，请画出递归树。</p><p>PS：但凡遇到需要递归的问题，最好都画出递归树，这对你分析算法的复杂度，寻找算法低效的原因都有巨大帮助。</p><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3%E8%BF%9B%E9%98%B6/1.jpg"></p><p>这个递归树怎么理解？就是说想要计算原问题 <code>f(20)</code>，我就得先计算出子问题 <code>f(19)</code> 和 <code>f(18)</code>，然后要计算 <code>f(19)</code>，我就要先算出子问题 <code>f(18)</code> 和 <code>f(17)</code>，以此类推。最后遇到 <code>f(1)</code> 或者 <code>f(2)</code> 的时候，结果已知，就能直接返回结果，递归树不再向下生长了。</p><p><strong>递归算法的时间复杂度怎么计算？子问题个数乘以解决一个子问题需要的时间。</strong></p><p>子问题个数，即递归树中节点的总数。显然二叉树节点总数为指数级别，所以子问题个数为 O(2^n)。</p><p>解决一个子问题的时间，在本算法中，没有循环，只有 f(n - 1) + f(n - 2) 一个加法操作，时间为 O(1)。</p><p>所以，这个算法的时间复杂度为 O(2^n)，指数级别，爆炸。</p><p>观察递归树，很明显发现了算法低效的原因：存在大量重复计算，比如 <code>f(18)</code> 被计算了两次，而且你可以看到，以 <code>f(18)</code> 为根的这个递归树体量巨大，多算一遍，会耗费巨大的时间。更何况，还不止 <code>f(18)</code> 这一个节点被重复计算，所以这个算法及其低效。</p><p>这就是动态规划问题的第一个性质：<strong>重叠子问题</strong>。下面，我们想办法解决这个问题。</p><p><strong>2、带备忘录的递归解法</strong></p><p>明确了问题，其实就已经把问题解决了一半。即然耗时的原因是重复计算，那么我们可以造一个「备忘录」，每次算出某个子问题的答案后别急着返回，先记到「备忘录」里再返回；每次遇到一个子问题先去「备忘录」里查一查，如果发现之前已经解决过这个问题了，直接把答案拿出来用，不要再耗时去计算了。</p><p>一般使用一个数组充当这个「备忘录」，当然你也可以使用哈希表（字典），思想都是一样的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fib</span><span class="hljs-params">(<span class="hljs-keyword">int</span> N)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (N &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 备忘录全初始化为 0</span><br>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">memo</span><span class="hljs-params">(N + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-comment">// 初始化最简情况</span><br>    <span class="hljs-keyword">return</span> helper(memo, N);<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">helper</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; memo, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">// base case </span><br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span> || n == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 已经计算过</span><br>    <span class="hljs-keyword">if</span> (memo[n] != <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> memo[n];<br>    memo[n] = helper(memo, n - <span class="hljs-number">1</span>) + <br>                helper(memo, n - <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">return</span> memo[n];<br>&#125;<br></code></pre></td></tr></table></figure><p>现在，画出递归树，你就知道「备忘录」到底做了什么。</p><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3%E8%BF%9B%E9%98%B6/2.jpg"></p><p>实际上，带「备忘录」的递归算法，把一棵存在巨量冗余的递归树通过「剪枝」，改造成了一幅不存在冗余的递归图，极大减少了子问题（即递归图中节点）的个数。</p><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3%E8%BF%9B%E9%98%B6/3.jpg"></p><p>递归算法的时间复杂度怎么算？子问题个数乘以解决一个子问题需要的时间。</p><p>子问题个数，即图中节点的总数，由于本算法不存在冗余计算，子问题就是 <code>f(1)</code>, <code>f(2)</code>, <code>f(3)</code> … <code>f(20)</code>，数量和输入规模 n = 20 成正比，所以子问题个数为 O(n)。</p><p>解决一个子问题的时间，同上，没有什么循环，时间为 O(1)。</p><p>所以，本算法的时间复杂度是 O(n)。比起暴力算法，是降维打击。</p><p>至此，带备忘录的递归解法的效率已经和迭代的动态规划解法一样了。实际上，这种解法和迭代的动态规划已经差不多了，只不过这种方法叫做「自顶向下」，动态规划叫做「自底向上」。</p><p>啥叫「自顶向下」？注意我们刚才画的递归树（或者说图），是从上向下延伸，都是从一个规模较大的原问题比如说 <code>f(20)</code>，向下逐渐分解规模，直到 <code>f(1)</code> 和 <code>f(2)</code> 触底，然后逐层返回答案，这就叫「自顶向下」。</p><p>啥叫「自底向上」？反过来，我们直接从最底下，最简单，问题规模最小的 <code>f(1)</code> 和 <code>f(2)</code> 开始往上推，直到推到我们想要的答案 <code>f(20)</code>，这就是动态规划的思路，这也是为什么动态规划一般都脱离了递归，而是由循环迭代完成计算。</p><p><strong>3、dp 数组的迭代解法</strong></p><p>有了上一步「备忘录」的启发，我们可以把这个「备忘录」独立出来成为一张表，就叫做 DP table 吧，在这张表上完成「自底向上」的推算岂不美哉！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fib</span><span class="hljs-params">(<span class="hljs-keyword">int</span> N)</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(N + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-comment">// base case</span><br>    dp[<span class="hljs-number">1</span>] = dp[<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">3</span>; i &lt;= N; i++)<br>        dp[i] = dp[i - <span class="hljs-number">1</span>] + dp[i - <span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">return</span> dp[N];<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3%E8%BF%9B%E9%98%B6/4.jpg"></p><p>画个图就很好理解了，而且你发现这个 DP table 特别像之前那个「剪枝」后的结果，只是反过来算而已。实际上，带备忘录的递归解法中的「备忘录」，最终完成后就是这个 DP table，所以说这两种解法其实是差不多的，大部分情况下，效率也基本相同。</p><p>这里，引出「状态转移方程」这个名词，实际上就是描述问题结构的数学形式：</p><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3%E8%BF%9B%E9%98%B6/fib.png"></p><p>为啥叫「状态转移方程」？为了听起来高端。你把 f(n) 想做一个状态 n，这个状态 n 是由状态 n - 1 和状态 n - 2 相加转移而来，这就叫状态转移，仅此而已。</p><p>你会发现，上面的几种解法中的所有操作，例如 return f(n - 1) + f(n - 2)，dp[i] = dp[i - 1] + dp[i - 2]，以及对备忘录或 DP table 的初始化操作，都是围绕这个方程式的不同表现形式。可见列出「状态转移方程」的重要性，它是解决问题的核心。很容易发现，其实状态转移方程直接代表着暴力解法。</p><p><strong>千万不要看不起暴力解，动态规划问题最困难的就是写出状态转移方程</strong>，即这个暴力解。优化方法无非是用备忘录或者 DP table，再无奥妙可言。</p><p>这个例子的最后，讲一个细节优化。细心的读者会发现，根据斐波那契数列的状态转移方程，当前状态只和之前的两个状态有关，其实并不需要那么长的一个 DP table 来存储所有的状态，只要想办法存储之前的两个状态就行了。所以，可以进一步优化，把空间复杂度降为 O(1)：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fib</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">2</span> || n == <span class="hljs-number">1</span>) <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> prev = <span class="hljs-number">1</span>, curr = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">3</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">int</span> sum = prev + curr;<br>        prev = curr;<br>        curr = sum;<br>    &#125;<br>    <span class="hljs-keyword">return</span> curr;<br>&#125;<br></code></pre></td></tr></table></figure><p>有人会问，动态规划的另一个重要特性「最优子结构」，怎么没有涉及？下面会涉及。斐波那契数列的例子严格来说不算动态规划，因为没有涉及求最值，以上旨在演示算法设计螺旋上升的过程。下面，看第二个例子，凑零钱问题。</p><h3 id="二、凑零钱问题"><a href="#二、凑零钱问题" class="headerlink" title="二、凑零钱问题"></a>二、凑零钱问题</h3><p>先看下题目：给你 <code>k</code> 种面值的硬币，面值分别为 <code>c1, c2 ... ck</code>，每种硬币的数量无限，再给一个总金额 <code>amount</code>，问你<strong>最少</strong>需要几枚硬币凑出这个金额，如果不可能凑出，算法返回 -1 。算法的函数签名如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// coins 中是可选硬币面值，amount 是目标金额</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">coinChange</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] coins, <span class="hljs-keyword">int</span> amount)</span></span>;<br></code></pre></td></tr></table></figure><p>比如说 <code>k = 3</code>，面值分别为 1，2，5，总金额 <code>amount = 11</code>。那么最少需要 3 枚硬币凑出，即 11 = 5 + 5 + 1。</p><p>你认为计算机应该如何解决这个问题？显然，就是把所有肯能的凑硬币方法都穷举出来，然后找找看最少需要多少枚硬币。</p><p><strong>1、暴力递归</strong></p><p>首先，这个问题是动态规划问题，因为它具有「最优子结构」的。<strong>要符合「最优子结构」，子问题间必须互相独立</strong>。啥叫相互独立？你肯定不想看数学证明，我用一个直观的例子来讲解。</p><p>比如说，你的原问题是考出最高的总成绩，那么你的子问题就是要把语文考到最高，数学考到最高…… 为了每门课考到最高，你要把每门课相应的选择题分数拿到最高，填空题分数拿到最高…… 当然，最终就是你每门课都是满分，这就是最高的总成绩。</p><p>得到了正确的结果：最高的总成绩就是总分。因为这个过程符合最优子结构，“每门科目考到最高”这些子问题是互相独立，互不干扰的。</p><p>但是，如果加一个条件：你的语文成绩和数学成绩会互相制约，此消彼长。这样的话，显然你能考到的最高总成绩就达不到总分了，按刚才那个思路就会得到错误的结果。因为子问题并不独立，语文数学成绩无法同时最优，所以最优子结构被破坏。</p><p>回到凑零钱问题，为什么说它符合最优子结构呢？比如你想求 <code>amount = 11</code> 时的最少硬币数（原问题），如果你知道凑出 <code>amount = 10</code> 的最少硬币数（子问题），你只需要把子问题的答案加一（再选一枚面值为 1 的硬币）就是原问题的答案，因为硬币的数量是没有限制的，子问题之间没有相互制，是互相独立的。</p><p>那么，既然知道了这是个动态规划问题，就要思考<strong>如何列出正确的状态转移方程</strong>？</p><p><strong>先确定「状态」</strong>，也就是原问题和子问题中变化的变量。由于硬币数量无限，所以唯一的状态就是目标金额 <code>amount</code>。</p><p><strong>然后确定 <code>dp</code> 函数的定义</strong>：当前的目标金额是 <code>n</code>，至少需要 <code>dp(n)</code> 个硬币凑出该金额。</p><p><strong>然后确定「选择」并择优</strong>，也就是对于每个状态，可以做出什么选择改变当前状态。具体到这个问题，无论当的目标金额是多少，选择就是从面额列表 <code>coins</code> 中选择一个硬币，然后目标金额就会减少：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 伪码框架</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">coinChange</span>(<span class="hljs-params">coins: List[int], amount: int</span>):</span><br>    <span class="hljs-comment"># 定义：要凑出金额 n，至少要 dp(n) 个硬币</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dp</span>(<span class="hljs-params">n</span>):</span><br>        <span class="hljs-comment"># 做选择，选择需要硬币最少的那个结果</span><br>        <span class="hljs-keyword">for</span> coin <span class="hljs-keyword">in</span> coins:<br>            res = min(res, <span class="hljs-number">1</span> + dp(n - coin))<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-comment"># 我们要求的问题是 dp(amount)</span><br>    <span class="hljs-keyword">return</span> dp(amount)<br></code></pre></td></tr></table></figure><p><strong>最后明确 base case</strong>，显然目标金额为 0 时，所需硬币数量为 0；当目标金额小于 0 时，无解，返回 -1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">coinChange</span>(<span class="hljs-params">coins: List[int], amount: int</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dp</span>(<span class="hljs-params">n</span>):</span><br>        <span class="hljs-comment"># base case</span><br>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>        <span class="hljs-comment"># 求最小值，所以初始化为正无穷</span><br>        res = float(<span class="hljs-string">&#x27;INF&#x27;</span>)<br>        <span class="hljs-keyword">for</span> coin <span class="hljs-keyword">in</span> coins:<br>            subproblem = dp(n - coin)<br>            <span class="hljs-comment"># 子问题无解，跳过</span><br>            <span class="hljs-keyword">if</span> subproblem == <span class="hljs-number">-1</span>: <span class="hljs-keyword">continue</span><br>            res = min(res, <span class="hljs-number">1</span> + subproblem)<br><br>        <span class="hljs-keyword">return</span> res <span class="hljs-keyword">if</span> res != float(<span class="hljs-string">&#x27;INF&#x27;</span>) <span class="hljs-keyword">else</span> <span class="hljs-number">-1</span><br>    <br>    <span class="hljs-keyword">return</span> dp(amount)<br></code></pre></td></tr></table></figure><p>至此，状态转移方程其实已经完成了，以上算法已经是暴力解法了，以上代码的数学形式就是状态转移方程：</p><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3%E8%BF%9B%E9%98%B6/coin.png"></p><p>至此，这个问题其实就解决了，只不过需要消除一下重叠子问题，比如 <code>amount = 11, coins = &#123;1,2,5&#125;</code> 时画出递归树看看：</p><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3%E8%BF%9B%E9%98%B6/5.jpg"></p><p><strong>时间复杂度分析：子问题总数 x 每个子问题的时间</strong>。</p><p>子问题总数为递归树节点个数，这个比较难看出来，是 O(n^k)，总之是指数级别的。每个子问题中含有一个 for 循环，复杂度为 O(k)。所以总时间复杂度为 O(k * n^k)，指数级别。</p><p><strong>2、带备忘录的递归</strong></p><p>只需要稍加修改，就可以通过备忘录消除子问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">coinChange</span>(<span class="hljs-params">coins: List[int], amount: int</span>):</span><br>    <span class="hljs-comment"># 备忘录</span><br>    memo = dict()<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dp</span>(<span class="hljs-params">n</span>):</span><br>        <span class="hljs-comment"># 查备忘录，避免重复计算</span><br>        <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> memo: <span class="hljs-keyword">return</span> memo[n]<br><br>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>        res = float(<span class="hljs-string">&#x27;INF&#x27;</span>)<br>        <span class="hljs-keyword">for</span> coin <span class="hljs-keyword">in</span> coins:<br>            subproblem = dp(n - coin)<br>            <span class="hljs-keyword">if</span> subproblem == <span class="hljs-number">-1</span>: <span class="hljs-keyword">continue</span><br>            res = min(res, <span class="hljs-number">1</span> + subproblem)<br>        <br>        <span class="hljs-comment"># 记入备忘录</span><br>        memo[n] = res <span class="hljs-keyword">if</span> res != float(<span class="hljs-string">&#x27;INF&#x27;</span>) <span class="hljs-keyword">else</span> <span class="hljs-number">-1</span><br>        <span class="hljs-keyword">return</span> memo[n]<br>    <br>    <span class="hljs-keyword">return</span> dp(amount)<br></code></pre></td></tr></table></figure><p>不画图了，很显然「备忘录」大大减小了子问题数目，完全消除了子问题的冗余，所以子问题总数不会超过金额数 n，即子问题数目为 O(n)。处理一个子问题的时间不变，仍是 O(k)，所以总的时间复杂度是 O(kn)。</p><p><strong>3、dp 数组的迭代解法</strong></p><p>当然，我们也可以自底向上使用 dp table 来消除重叠子问题，<code>dp</code> 数组的定义和刚才 <code>dp</code> 函数类似，定义也是一样的：</p><p><strong><code>dp[i] = x</code> 表示，当目标金额为 <code>i</code> 时，至少需要 <code>x</code> 枚硬币</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">coinChange</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; coins, <span class="hljs-keyword">int</span> amount)</span> </span>&#123;<br>    <span class="hljs-comment">// 数组大小为 amount + 1，初始值也为 amount + 1</span><br>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(amount + <span class="hljs-number">1</span>, amount + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-comment">// base case</span><br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; dp.size(); i++) &#123;<br>        <span class="hljs-comment">// 内层 for 在求所有子问题 + 1 的最小值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> coin : coins) &#123;<br>            <span class="hljs-comment">// 子问题无解，跳过</span><br>            <span class="hljs-keyword">if</span> (i - coin &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>            dp[i] = min(dp[i], <span class="hljs-number">1</span> + dp[i - coin]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (dp[amount] == amount + <span class="hljs-number">1</span>) ? <span class="hljs-number">-1</span> : dp[amount];<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%AF%A6%E8%A7%A3%E8%BF%9B%E9%98%B6/6.jpg"></p><p>PS：为啥 <code>dp</code> 数组初始化为 <code>amount + 1</code> 呢，因为凑成 <code>amount</code> 金额的硬币数最多只可能等于 <code>amount</code>（全用 1 元面值的硬币），所以初始化为 <code>amount + 1</code> 就相当于初始化为正无穷，便于后续取最小值。</p><h3 id="三、最后总结"><a href="#三、最后总结" class="headerlink" title="三、最后总结"></a>三、最后总结</h3><p>第一个斐波那契数列的问题，解释了如何通过「备忘录」或者「dp table」的方法来优化递归树，并且明确了这两种方法本质上是一样的，只是自顶向下和自底向上的不同而已。</p><p>第二个凑零钱的问题，展示了如何流程化确定「状态转移方程」，只要通过状态转移方程写出暴力递归解，剩下的也就是优化递归树，消除重叠子问题而已。</p><p>如果你不太了解动态规划，还能看到这里，真得给你鼓掌，相信你已经掌握了这个算法的设计技巧。</p><p><strong>计算机解决问题其实没有任何奇技淫巧，它唯一的解决办法就是穷举</strong>，穷举所有可能性。算法设计无非就是先思考“如何穷举”，然后再追求“如何聪明地穷举”。</p><p>列出动态转移方程，就是在解决“如何穷举”的问题。之所以说它难，一是因为很多穷举需要递归实现，二是因为有的问题本身的解空间复杂，不那么容易穷举完整。</p><p>备忘录、DP table 就是在追求“如何聪明地穷举”。用空间换时间的思路，是降低时间复杂度的不二法门，除此之外，试问，还能玩出啥花活？</p><p><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%954">上一篇：学习数据结构和算法读什么书</a></p><p><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E6%9C%80%E4%BC%98%E5%AD%90%E7%BB%93%E6%9E%84">下一篇：动态规划答疑篇</a></p><p><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>团灭股票问题</title>
      <link href="2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%9B%A2%E7%81%AD%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98/"/>
      <url>2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%9B%A2%E7%81%AD%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>title: 团灭股票问题<br>author: 远方<br>tags:</p><ul><li>LeetCode</li><li>算法<br>categories:</li><li>LeetCode破局攻略<br>date: 2016-01-01 19:20:00</li></ul><hr><h1 id="团灭-LeetCode-股票买卖问题"><a href="#团灭-LeetCode-股票买卖问题" class="headerlink" title="团灭 LeetCode 股票买卖问题"></a>团灭 LeetCode 股票买卖问题</h1><p>很多读者抱怨 LeetCode 的股票系列问题奇技淫巧太多，如果面试真的遇到这类问题，基本不会想到那些巧妙的办法，怎么办？<strong>所以本文拒绝奇技淫巧，而是稳扎稳打，只用一种通用方法解决所用问题，以不变应万变</strong>。<br>这篇文章用状态机的技巧来解决，可以全部提交通过。不要觉得这个名词高大上，文学词汇而已，实际上就是 DP table，看一眼就明白了。<br>PS：本文参考自<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/discuss/39038">英文版 LeetCode 的一篇题解</a>。<br>先随便抽出一道题，看看别人的解法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; prices)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(prices.empty()) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> s1=-prices[<span class="hljs-number">0</span>],s2=INT_MIN,s3=INT_MIN,s4=INT_MIN;<br>        <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;prices.size();++i) &#123;            <br>        s1 = max(s1, -prices[i]);<br>        s2 = max(s2, s1+prices[i]);<br>        s3 = max(s3, s2-prices[i]);<br>        s4 = max(s4, s3+prices[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> max(<span class="hljs-number">0</span>,s4);<br>&#125;<br></code></pre></td></tr></table></figure><p>能看懂吧？会做了吗？不可能的，你看不懂，这才正常。就算你勉强看懂了，下一个问题你还是做不出来。为什么别人能写出这么诡异却又高效的解法呢？因为这类问题是有框架的，但是人家不会告诉你的，因为一旦告诉你，你五分钟就学会了，该算法题就不再神秘，变得不堪一击了。<br>本文就来告诉你这个框架，然后带着你一道一道秒杀。这篇文章用状态机的技巧来解决，可以全部提交通过。不要觉得这个名词高大上，文学词汇而已，实际上就是 DP table，看一眼就明白了。<br>这 6 道题目是有共性的，我就抽出来第 4 道题目，因为这道题是一个最泛化的形式，其他的问题都是这个形式的简化，看下题目：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98/title.png"><br>第一题是只进行一次交易，相当于 k = 1；第二题是不限交易次数，相当于 k = +infinity（正无穷）；第三题是只进行 2 次交易，相当于 k = 2；剩下两道也是不限次数，但是加了交易「冷冻期」和「手续费」的额外条件，其实就是第二题的变种，都很容易处理。<br>如果你还不熟悉题目，可以去 LeetCode 查看这些题目的内容，本文为了节省篇幅，就不列举这些题目的具体内容了。下面言归正传，开始解题。<br><strong>一、穷举框架</strong><br>首先，还是一样的思路：如何穷举？这里的穷举思路和上篇文章递归的思想不太一样。<br>递归其实是符合我们思考的逻辑的，一步步推进，遇到无法解决的就丢给递归，一不小心就做出来了，可读性还很好。缺点就是一旦出错，你也不容易找到错误出现的原因。比如上篇文章的递归解法，肯定还有计算冗余，但确实不容易找到。<br>而这里，我们不用递归思想进行穷举，而是利用「状态」进行穷举。我们具体到每一天，看看总共有几种可能的「状态」，再找出每个「状态」对应的「选择」。我们要穷举所有「状态」，穷举的目的是根据对应的「选择」更新状态。听起来抽象，你只要记住「状态」和「选择」两个词就行，下面实操一下就很容易明白了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> 状态<span class="hljs-number">1</span> <span class="hljs-keyword">in</span> 状态<span class="hljs-number">1</span>的所有取值：<br>    <span class="hljs-keyword">for</span> 状态<span class="hljs-number">2</span> <span class="hljs-keyword">in</span> 状态<span class="hljs-number">2</span>的所有取值：<br>        <span class="hljs-keyword">for</span> ...<br>            dp[状态<span class="hljs-number">1</span>][状态<span class="hljs-number">2</span>][...] = 择优(选择<span class="hljs-number">1</span>，选择<span class="hljs-number">2.</span>..)<br></code></pre></td></tr></table></figure><p>比如说这个问题，<strong>每天都有三种「选择」</strong>：买入、卖出、无操作，我们用 buy, sell, rest 表示这三种选择。但问题是，并不是每天都可以任意选择这三种选择的，因为 sell 必须在 buy 之后，buy 必须在 sell 之后。那么 rest 操作还应该分两种状态，一种是 buy 之后的 rest（持有了股票），一种是 sell 之后的 rest（没有持有股票）。而且别忘了，我们还有交易次数 k 的限制，就是说你 buy 还只能在 k &gt; 0 的前提下操作。<br>很复杂对吧，不要怕，我们现在的目的只是穷举，你有再多的状态，老夫要做的就是一把梭全部列举出来。<strong>这个问题的「状态」有三个</strong>，第一个是天数，第二个是允许交易的最大次数，第三个是当前的持有状态（即之前说的 rest 的状态，我们不妨用 1 表示持有，0 表示没有持有）。然后我们用一个三维数组就可以装下这几种状态的全部组合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">dp[i][k][<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span>]<br><span class="hljs-number">0</span> &lt;= i &lt;= n<span class="hljs-number">-1</span>, <span class="hljs-number">1</span> &lt;= k &lt;= K<br>n 为天数，大 K 为最多交易数<br>此问题共 n × K × <span class="hljs-number">2</span> 种状态，全部穷举就能搞定。<br><span class="hljs-keyword">for</span> <span class="hljs-number">0</span> &lt;= i &lt; n:<br>    <span class="hljs-keyword">for</span> <span class="hljs-number">1</span> &lt;= k &lt;= K:<br>        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;:<br>            dp[i][k][s] = max(buy, sell, rest)<br></code></pre></td></tr></table></figure><p>而且我们可以用自然语言描述出每一个状态的含义，比如说 <code>dp[3][2][1]</code> 的含义就是：今天是第三天，我现在手上持有着股票，至今最多进行 2 次交易。再比如 <code>dp[2][3][0]</code> 的含义：今天是第二天，我现在手上没有持有股票，至今最多进行 3 次交易。很容易理解，对吧？<br>我们想求的最终答案是 dp[n - 1][K][0]，即最后一天，最多允许 K 次交易，最多获得多少利润。读者可能问为什么不是 dp[n - 1][K][1]？因为 [1] 代表手上还持有股票，[0] 表示手上的股票已经卖出去了，很显然后者得到的利润一定大于前者。<br>记住如何解释「状态」，一旦你觉得哪里不好理解，把它翻译成自然语言就容易理解了。<br><strong>二、状态转移框架</strong><br>现在，我们完成了「状态」的穷举，我们开始思考每种「状态」有哪些「选择」，应该如何更新「状态」。只看「持有状态」，可以画个状态转移图。<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98/1.png"><br>通过这个图可以很清楚地看到，每种状态（0 和 1）是如何转移而来的。根据这个图，我们来写一下状态转移方程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">dp[i][k][0] &#x3D; max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])<br>              max(   选择 rest  ,             选择 sell      )<br>解释：今天我没有持有股票，有两种可能：<br>要么是我昨天就没有持有，然后今天选择 rest，所以我今天还是没有持有；<br>要么是我昨天持有股票，但是今天我 sell 了，所以我今天没有持有股票了。<br>dp[i][k][1] &#x3D; max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])<br>              max(   选择 rest  ,           选择 buy         )<br>解释：今天我持有着股票，有两种可能：<br>要么我昨天就持有着股票，然后今天选择 rest，所以我今天还持有着股票；<br>要么我昨天本没有持有，但今天我选择 buy，所以今天我就持有股票了。<br></code></pre></td></tr></table></figure><p>这个解释应该很清楚了，如果 buy，就要从利润中减去 prices[i]，如果 sell，就要给利润增加 prices[i]。今天的最大利润就是这两种可能选择中较大的那个。而且注意 k 的限制，我们在选择 buy 的时候，把 k 减小了 1，很好理解吧，当然你也可以在 sell 的时候减 1，一样的。<br>现在，我们已经完成了动态规划中最困难的一步：状态转移方程。<strong>如果之前的内容你都可以理解，那么你已经可以秒杀所有问题了，只要套这个框架就行了。</strong>不过还差最后一点点，就是定义 base case，即最简单的情况。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">dp[-1][k][0] &#x3D; 0<br>解释：因为 i 是从 0 开始的，所以 i &#x3D; -1 意味着还没有开始，这时候的利润当然是 0 。<br>dp[-1][k][1] &#x3D; -infinity<br>解释：还没开始的时候，是不可能持有股票的，用负无穷表示这种不可能。<br>dp[i][0][0] &#x3D; 0<br>解释：因为 k 是从 1 开始的，所以 k &#x3D; 0 意味着根本不允许交易，这时候利润当然是 0 。<br>dp[i][0][1] &#x3D; -infinity<br>解释：不允许交易的情况下，是不可能持有股票的，用负无穷表示这种不可能。<br></code></pre></td></tr></table></figure><p>把上面的状态转移方程总结一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">base case：<br>dp[-1][k][0] &#x3D; dp[i][0][0] &#x3D; 0<br>dp[-1][k][1] &#x3D; dp[i][0][1] &#x3D; -infinity<br>状态转移方程：<br>dp[i][k][0] &#x3D; max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])<br>dp[i][k][1] &#x3D; max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])<br></code></pre></td></tr></table></figure><p>读者可能会问，这个数组索引是 -1 怎么编程表示出来呢，负无穷怎么表示呢？这都是细节问题，有很多方法实现。现在完整的框架已经完成，下面开始具体化。<br><strong>三、秒杀题目</strong><br><strong>第一题，k = 1</strong><br>直接套状态转移方程，根据 base case，可以做一些化简：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">dp[i][1][0] &#x3D; max(dp[i-1][1][0], dp[i-1][1][1] + prices[i])<br>dp[i][1][1] &#x3D; max(dp[i-1][1][1], dp[i-1][0][0] - prices[i]) <br>            &#x3D; max(dp[i-1][1][1], -prices[i])<br>解释：k &#x3D; 0 的 base case，所以 dp[i-1][0][0] &#x3D; 0。<br>现在发现 k 都是 1，不会改变，即 k 对状态转移已经没有影响了。<br>可以进行进一步化简去掉所有 k：<br>dp[i][0] &#x3D; max(dp[i-1][0], dp[i-1][1] + prices[i])<br>dp[i][1] &#x3D; max(dp[i-1][1], -prices[i])<br></code></pre></td></tr></table></figure><p>直接写出代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> n = prices.length;<br><span class="hljs-keyword">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n][<span class="hljs-number">2</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>    dp[i][<span class="hljs-number">0</span>] = Math.max(dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>], dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + prices[i]);<br>    dp[i][<span class="hljs-number">1</span>] = Math.max(dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>], -prices[i]);<br>&#125;<br><span class="hljs-keyword">return</span> dp[n - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br></code></pre></td></tr></table></figure><p>显然 i = 0 时 dp[i-1] 是不合法的。这是因为我们没有对 i 的 base case 进行处理。可以这样处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>    <span class="hljs-keyword">if</span> (i - <span class="hljs-number">1</span> == -<span class="hljs-number">1</span>) &#123;<br>        dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 解释：</span><br>        <span class="hljs-comment">//   dp[i][0] </span><br>        <span class="hljs-comment">// = max(dp[-1][0], dp[-1][1] + prices[i])</span><br>        <span class="hljs-comment">// = max(0, -infinity + prices[i]) = 0</span><br>        dp[i][<span class="hljs-number">1</span>] = -prices[i];<br>        <span class="hljs-comment">//解释：</span><br>        <span class="hljs-comment">//   dp[i][1] </span><br>        <span class="hljs-comment">// = max(dp[-1][1], dp[-1][0] - prices[i])</span><br>        <span class="hljs-comment">// = max(-infinity, 0 - prices[i]) </span><br>        <span class="hljs-comment">// = -prices[i]</span><br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    dp[i][<span class="hljs-number">0</span>] = Math.max(dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>], dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + prices[i]);<br>    dp[i][<span class="hljs-number">1</span>] = Math.max(dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>], -prices[i]);<br>&#125;<br><span class="hljs-keyword">return</span> dp[n - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br></code></pre></td></tr></table></figure><p>第一题就解决了，但是这样处理 base case 很麻烦，而且注意一下状态转移方程，新状态只和相邻的一个状态有关，其实不用整个 dp 数组，只需要一个变量储存相邻的那个状态就足够了，这样可以把空间复杂度降到 O(1):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// k == 1</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxProfit_k_1</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] prices)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = prices.length;<br>    <span class="hljs-comment">// base case: dp[-1][0] = 0, dp[-1][1] = -infinity</span><br>    <span class="hljs-keyword">int</span> dp_i_0 = <span class="hljs-number">0</span>, dp_i_1 = Integer.MIN_VALUE;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-comment">// dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])</span><br>        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);<br>        <span class="hljs-comment">// dp[i][1] = max(dp[i-1][1], -prices[i])</span><br>        dp_i_1 = Math.max(dp_i_1, -prices[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp_i_0;<br>&#125;<br></code></pre></td></tr></table></figure><p>两种方式都是一样的，不过这种编程方法简洁很多。但是如果没有前面状态转移方程的引导，是肯定看不懂的。后续的题目，我主要写这种空间复杂度 O(1) 的解法。<br><strong>第二题，k = +infinity</strong><br>如果 k 为正无穷，那么就可以认为 k 和 k - 1 是一样的。可以这样改写框架：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">dp[i][k][<span class="hljs-number">0</span>] = max(dp[i<span class="hljs-number">-1</span>][k][<span class="hljs-number">0</span>], dp[i<span class="hljs-number">-1</span>][k][<span class="hljs-number">1</span>] + prices[i])<br>dp[i][k][<span class="hljs-number">1</span>] = max(dp[i<span class="hljs-number">-1</span>][k][<span class="hljs-number">1</span>], dp[i<span class="hljs-number">-1</span>][k<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>] - prices[i])<br>            = max(dp[i<span class="hljs-number">-1</span>][k][<span class="hljs-number">1</span>], dp[i<span class="hljs-number">-1</span>][k][<span class="hljs-number">0</span>] - prices[i])<br>我们发现数组中的 k 已经不会改变了，也就是说不需要记录 k 这个状态了：<br>dp[i][<span class="hljs-number">0</span>] = max(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>], dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>] + prices[i])<br>dp[i][<span class="hljs-number">1</span>] = max(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>], dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>] - prices[i])<br></code></pre></td></tr></table></figure><p>直接翻译成代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxProfit_k_inf</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] prices)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = prices.length;<br>    <span class="hljs-keyword">int</span> dp_i_0 = <span class="hljs-number">0</span>, dp_i_1 = Integer.MIN_VALUE;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">int</span> temp = dp_i_0;<br>        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);<br>        dp_i_1 = Math.max(dp_i_1, temp - prices[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp_i_0;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第三题，k = +infinity with cooldown</strong><br>每次 sell 之后要等一天才能继续交易。只要把这个特点融入上一题的状态转移方程即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">dp[i][0] &#x3D; max(dp[i-1][0], dp[i-1][1] + prices[i])<br>dp[i][1] &#x3D; max(dp[i-1][1], dp[i-2][0] - prices[i])<br>解释：第 i 天选择 buy 的时候，要从 i-2 的状态转移，而不是 i-1 。<br></code></pre></td></tr></table></figure><p>翻译成代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxProfit_with_cool</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] prices)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = prices.length;<br>    <span class="hljs-keyword">int</span> dp_i_0 = <span class="hljs-number">0</span>, dp_i_1 = Integer.MIN_VALUE;<br>    <span class="hljs-keyword">int</span> dp_pre_0 = <span class="hljs-number">0</span>; <span class="hljs-comment">// 代表 dp[i-2][0]</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">int</span> temp = dp_i_0;<br>        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);<br>        dp_i_1 = Math.max(dp_i_1, dp_pre_0 - prices[i]);<br>        dp_pre_0 = temp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp_i_0;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第四题，k = +infinity with fee</strong><br>每次交易要支付手续费，只要把手续费从利润中减去即可。改写方程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">dp[i][0] &#x3D; max(dp[i-1][0], dp[i-1][1] + prices[i])<br>dp[i][1] &#x3D; max(dp[i-1][1], dp[i-1][0] - prices[i] - fee)<br>解释：相当于买入股票的价格升高了。<br>在第一个式子里减也是一样的，相当于卖出股票的价格减小了。<br></code></pre></td></tr></table></figure><p>直接翻译成代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxProfit_with_fee</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] prices, <span class="hljs-keyword">int</span> fee)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = prices.length;<br>    <span class="hljs-keyword">int</span> dp_i_0 = <span class="hljs-number">0</span>, dp_i_1 = Integer.MIN_VALUE;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">int</span> temp = dp_i_0;<br>        dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);<br>        dp_i_1 = Math.max(dp_i_1, temp - prices[i] - fee);<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp_i_0;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第五题，k = 2</strong><br>k = 2 和前面题目的情况稍微不同，因为上面的情况都和 k 的关系不太大。要么 k 是正无穷，状态转移和 k 没关系了；要么 k = 1，跟 k = 0 这个 base case 挨得近，最后也没有存在感。<br>这道题 k = 2 和后面要讲的 k 是任意正整数的情况中，对 k 的处理就凸显出来了。我们直接写代码，边写边分析原因。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">原始的动态转移方程，没有可化简的地方<br>dp[i][k][<span class="hljs-number">0</span>] = max(dp[i-<span class="hljs-number">1</span>][k][<span class="hljs-number">0</span>], dp[i-<span class="hljs-number">1</span>][k][<span class="hljs-number">1</span>] + prices[i])<br>dp[i][k][<span class="hljs-number">1</span>] = max(dp[i-<span class="hljs-number">1</span>][k][<span class="hljs-number">1</span>], dp[i-<span class="hljs-number">1</span>][k-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] - prices[i])<br></code></pre></td></tr></table></figure><p>按照之前的代码，我们可能想当然这样写代码（错误的）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> k = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">int</span>[][][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n][k + <span class="hljs-number">1</span>][<span class="hljs-number">2</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    <span class="hljs-keyword">if</span> (i - <span class="hljs-number">1</span> == -<span class="hljs-number">1</span>) &#123; <span class="hljs-comment">/* 处理一下 base case*/</span> &#125;<br>    dp[i][k][<span class="hljs-number">0</span>] = Math.max(dp[i-<span class="hljs-number">1</span>][k][<span class="hljs-number">0</span>], dp[i-<span class="hljs-number">1</span>][k][<span class="hljs-number">1</span>] + prices[i]);<br>    dp[i][k][<span class="hljs-number">1</span>] = Math.max(dp[i-<span class="hljs-number">1</span>][k][<span class="hljs-number">1</span>], dp[i-<span class="hljs-number">1</span>][k-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] - prices[i]);<br>&#125;<br><span class="hljs-keyword">return</span> dp[n - <span class="hljs-number">1</span>][k][<span class="hljs-number">0</span>];<br></code></pre></td></tr></table></figure><p>为什么错误？我这不是照着状态转移方程写的吗？<br>还记得前面总结的「穷举框架」吗？就是说我们必须穷举所有状态。其实我们之前的解法，都在穷举所有状态，只是之前的题目中 k 都被化简掉了。比如说第一题，k = 1：<br>「代码截图」<br>这道题由于没有消掉 k 的影响，所以必须要对 k 进行穷举：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> max_k = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">int</span>[][][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n][max_k + <span class="hljs-number">1</span>][<span class="hljs-number">2</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = max_k; k &gt;= <span class="hljs-number">1</span>; k--) &#123;<br>        <span class="hljs-keyword">if</span> (i - <span class="hljs-number">1</span> == -<span class="hljs-number">1</span>) &#123; <span class="hljs-comment">/*处理 base case */</span> &#125;<br>        dp[i][k][<span class="hljs-number">0</span>] = max(dp[i-<span class="hljs-number">1</span>][k][<span class="hljs-number">0</span>], dp[i-<span class="hljs-number">1</span>][k][<span class="hljs-number">1</span>] + prices[i]);<br>        dp[i][k][<span class="hljs-number">1</span>] = max(dp[i-<span class="hljs-number">1</span>][k][<span class="hljs-number">1</span>], dp[i-<span class="hljs-number">1</span>][k-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] - prices[i]);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 穷举了 n × max_k × 2 个状态，正确。</span><br><span class="hljs-keyword">return</span> dp[n - <span class="hljs-number">1</span>][max_k][<span class="hljs-number">0</span>];<br></code></pre></td></tr></table></figure><p>如果你不理解，可以返回第一点「穷举框架」重新阅读体会一下。<br>这里 k 取值范围比较小，所以可以不用 for 循环，直接把 k = 1 和 2 的情况全部列举出来也可以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">dp[i][<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = max(dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">2</span>][<span class="hljs-number">0</span>], dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">2</span>][<span class="hljs-number">1</span>] + prices[i])<br>dp[i][<span class="hljs-number">2</span>][<span class="hljs-number">1</span>] = max(dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">2</span>][<span class="hljs-number">1</span>], dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] - prices[i])<br>dp[i][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = max(dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>], dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + prices[i])<br>dp[i][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = max(dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>], -prices[i])<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxProfit_k_2</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] prices)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> dp_i10 = <span class="hljs-number">0</span>, dp_i11 = Integer.MIN_VALUE;<br>    <span class="hljs-keyword">int</span> dp_i20 = <span class="hljs-number">0</span>, dp_i21 = Integer.MIN_VALUE;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> price : prices) &#123;<br>        dp_i20 = Math.max(dp_i20, dp_i21 + price);<br>        dp_i21 = Math.max(dp_i21, dp_i10 - price);<br>        dp_i10 = Math.max(dp_i10, dp_i11 + price);<br>        dp_i11 = Math.max(dp_i11, -price);<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp_i20;<br>&#125;<br></code></pre></td></tr></table></figure><p>有状态转移方程和含义明确的变量名指导，相信你很容易看懂。其实我们可以故弄玄虚，把上述四个变量换成 a, b, c, d。这样当别人看到你的代码时就会大惊失色，对你肃然起敬。<br><strong>第六题，k = any integer</strong><br>有了上一题 k = 2 的铺垫，这题应该和上一题的第一个解法没啥区别。但是出现了一个超内存的错误，原来是传入的 k 值会非常大，dp 数组太大了。现在想想，交易次数 k 最多有多大呢？<br>一次交易由买入和卖出构成，至少需要两天。所以说有效的限制 k 应该不超过 n/2，如果超过，就没有约束作用了，相当于 k = +infinity。这种情况是之前解决过的。<br>直接把之前的代码重用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxProfit_k_any</span><span class="hljs-params">(<span class="hljs-keyword">int</span> max_k, <span class="hljs-keyword">int</span>[] prices)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = prices.length;<br>    <span class="hljs-keyword">if</span> (max_k &gt; n / <span class="hljs-number">2</span>) <br>        <span class="hljs-keyword">return</span> maxProfit_k_inf(prices);<br>    <span class="hljs-keyword">int</span>[][][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n][max_k + <span class="hljs-number">1</span>][<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = max_k; k &gt;= <span class="hljs-number">1</span>; k--) &#123;<br>            <span class="hljs-keyword">if</span> (i - <span class="hljs-number">1</span> == -<span class="hljs-number">1</span>) &#123; <span class="hljs-comment">/* 处理 base case */</span> &#125;<br>            dp[i][k][<span class="hljs-number">0</span>] = max(dp[i-<span class="hljs-number">1</span>][k][<span class="hljs-number">0</span>], dp[i-<span class="hljs-number">1</span>][k][<span class="hljs-number">1</span>] + prices[i]);<br>            dp[i][k][<span class="hljs-number">1</span>] = max(dp[i-<span class="hljs-number">1</span>][k][<span class="hljs-number">1</span>], dp[i-<span class="hljs-number">1</span>][k-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] - prices[i]);     <br>        &#125;<br>    <span class="hljs-keyword">return</span> dp[n - <span class="hljs-number">1</span>][max_k][<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，6 道题目通过一个状态转移方程全部解决。</p><p><strong>四、最后总结</strong><br>本文给大家讲了如何通过状态转移的方法解决复杂的问题，用一个状态转移方程秒杀了 6 道股票买卖问题，现在想想，其实也不算难对吧？这已经属于动态规划问题中较困难的了。<br>关键就在于列举出所有可能的「状态」，然后想想怎么穷举更新这些「状态」。一般用一个多维 dp 数组储存这些状态，从 base case 开始向后推进，推进到最后的状态，就是我们想要的答案。想想这个过程，你是不是有点理解「动态规划」这个名词的意义了呢？<br>具体到股票买卖问题，我们发现了三个状态，使用了一个三维数组，无非还是穷举 + 更新，不过我们可以说的高大上一点，这叫「三维 DP」，怕不怕？这个大实话一说，立刻显得你高人一等，名利双收有没有，所以给个在看/分享吧，鼓励一下我。</p><p><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8BKMP%E5%AD%97%E7%AC%A6%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95">上一篇：动态规划之KMP字符匹配算法</a><br><a href="/2016/01/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E6%8A%A2%E6%88%BF%E5%AD%90">下一篇：团灭 LeetCode 打家劫舍问题</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找详解</title>
      <link href="2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E8%AF%A6%E8%A7%A3/"/>
      <url>2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="二分查找详解"><a href="#二分查找详解" class="headerlink" title="二分查找详解"></a>二分查找详解</h1><p>先给大家讲个笑话乐呵一下：<br>有一天阿东到图书馆借了 N 本书，出图书馆的时候，警报响了，于是保安把阿东拦下，要检查一下哪本书没有登记出借。阿东正准备把每一本书在报警器下过一下，以找出引发警报的书，但是保安露出不屑的眼神：你连二分查找都不会吗？于是保安把书分成两堆，让第一堆过一下报警器，报警器响；于是再把这堆书分成两堆…… 最终，检测了 logN 次之后，保安成功的找到了那本引起警报的书，露出了得意和嘲讽的笑容。于是阿东背着剩下的书走了。<br>从此，图书馆丢了 N - 1 本书。<br>二分查找并不简单，Knuth 大佬（发明 KMP 算法的那位）都说二分查找：<strong>思路很简单，细节是魔鬼</strong>。很多人喜欢拿整型溢出的 bug 说事儿，但是二分查找真正的坑根本就不是那个细节问题，而是在于到底要给 <code>mid</code> 加一还是减一，while 里到底用 <code>&lt;=</code> 还是 <code>&lt;</code>。<br>你要是没有正确理解这些细节，写二分肯定就是玄学编程，有没有 bug 只能靠菩萨保佑。<strong>我特意写了一首诗来歌颂该算法，概括本文的主要内容，建议保存</strong>：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/poem.png"><br>本文就来探究几个最常用的二分查找场景：寻找一个数、寻找左侧边界、寻找右侧边界。而且，我们就是要深入细节，比如不等号是否应该带等号，mid 是否应该加一等等。分析这些细节的差异以及出现这些差异的原因，保证你能灵活准确地写出正确的二分查找算法。</p><h3 id="零、二分查找框架"><a href="#零、二分查找框架" class="headerlink" title="零、二分查找框架"></a>零、二分查找框架</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = ...;<br>    <span class="hljs-keyword">while</span>(...) &#123;<br>        <span class="hljs-keyword">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>            ...<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>            left = ...<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>            right = ...<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ...;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析二分查找的一个技巧是：不要出现 else，而是把所有情况用 else if 写清楚，这样可以清楚地展现所有细节</strong>。本文都会使用 else if，旨在讲清楚，读者理解后可自行简化。<br>其中 <code>...</code> 标记的部分，就是可能出现细节问题的地方，当你见到一个二分查找的代码时，首先注意这几个地方。后文用实例分析这些地方能有什么样的变化。<br>另外声明一下，计算 mid 时需要防止溢出，代码中 <code>left + (right - left) / 2</code> 就和 <code>(left + right) / 2</code> 的结果相同，但是有效防止了 <code>left</code> 和 <code>right</code> 太大直接相加导致溢出。</p><h3 id="一、寻找一个数（基本的二分搜索）"><a href="#一、寻找一个数（基本的二分搜索）" class="headerlink" title="一、寻找一个数（基本的二分搜索）"></a>一、寻找一个数（基本的二分搜索）</h3><p>这个场景是最简单的，肯能也是大家最熟悉的，即搜索一个数，如果存在，返回其索引，否则返回 -1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">int</span> right = nums.length - <span class="hljs-number">1</span>; <span class="hljs-comment">// 注意</span><br>    <span class="hljs-keyword">while</span>(left &lt;= right) &#123;<br>        <span class="hljs-keyword">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(nums[mid] == target)<br>            <span class="hljs-keyword">return</span> mid; <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target)<br>            left = mid + <span class="hljs-number">1</span>; <span class="hljs-comment">// 注意</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target)<br>            right = mid - <span class="hljs-number">1</span>; <span class="hljs-comment">// 注意</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>1、为什么 while 循环的条件中是 &lt;=，而不是 &lt;**？<br>答：因为初始化 <code>right</code> 的赋值是 <code>nums.length - 1</code>，即最后一个元素的索引，而不是 <code>nums.length</code>。<br>这二者可能出现在不同功能的二分查找中，区别是：前者相当于两端都闭区间 <code>[left, right]</code>，后者相当于左闭右开区间 <code>[left, right)</code>，因为索引大小为 <code>nums.length</code> 是越界的。<br>我们这个算法中使用的是前者 <code>[left, right]</code> 两端都闭的区间。</strong>这个区间其实就是每次进行搜索的区间**。<br>什么时候应该停止搜索呢？当然，找到了目标值的时候可以终止：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(nums[mid] == target)<br>    <span class="hljs-keyword">return</span> mid; <br></code></pre></td></tr></table></figure><p>但如果没找到，就需要 while 循环终止，然后返回 -1。那 while 循环什么时候应该终止？<strong>搜索区间为空的时候应该终止</strong>，意味着你没得找了，就等于没找到嘛。<br><code>while(left &lt;= right)</code> 的终止条件是 <code>left == right + 1</code>，写成区间的形式就是 <code>[right + 1, right]</code>，或者带个具体的数字进去 <code>[3, 2]</code>，可见<strong>这时候区间为空</strong>，因为没有数字既大于等于 3 又小于等于 2 的吧。所以这时候 while 循环终止是正确的，直接返回 -1 即可。<br><code>while(left &lt; right)</code> 的终止条件是 <code>left == right</code>，写成区间的形式就是 <code>[left, right]</code>，或者带个具体的数字进去 <code>[2, 2]</code>，<strong>这时候区间非空</strong>，还有一个数 2，但此时 while 循环终止了。也就是说这区间 <code>[2, 2]</code> 被漏掉了，索引 2 没有被搜索，如果这时候直接返回 -1 就是错误的。<br>当然，如果你非要用 <code>while(left &lt; right)</code> 也可以，我们已经知道了出错的原因，就打个补丁好了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//...</span><br><span class="hljs-keyword">while</span>(left &lt; right) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><span class="hljs-keyword">return</span> nums[left] == target ? left : -<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p><strong>2、为什么 <code>left = mid + 1</code>，<code>right = mid - 1</code>？我看有的代码是 <code>right = mid</code> 或者 <code>left = mid</code>，没有这些加加减减，到底怎么回事，怎么判断</strong>？<br>答：这也是二分查找的一个难点，不过只要你能理解前面的内容，就能够很容易判断。<br>刚才明确了「搜索区间」这个概念，而且本算法的搜索区间是两端都闭的，即 <code>[left, right]</code>。那么当我们发现索引 <code>mid</code> 不是要找的 <code>target</code> 时，下一步应该去搜索哪里呢？<br>当然是去搜索 <code>[left, mid-1]</code> 或者 <code>[mid+1, right]</code> 对不对？<strong>因为 <code>mid</code> 已经搜索过，应该从搜索区间中去除</strong>。<br><strong>3、此算法有什么缺陷</strong>？<br>答：至此，你应该已经掌握了该算法的所有细节，以及这样处理的原因。但是，这个算法存在局限性。<br>比如说给你有序数组 <code>nums = [1,2,2,2,3]</code>，<code>target</code> 为 2，此算法返回的索引是 2，没错。但是如果我想得到 <code>target</code> 的左侧边界，即索引 1，或者我想得到 <code>target</code> 的右侧边界，即索引 3，这样的话此算法是无法处理的。<br>这样的需求很常见，<strong>你也许会说，找到一个 target，然后向左或向右线性搜索不行吗？可以，但是不好，因为这样难以保证二分查找对数级的复杂度了</strong>。<br>我们后续的算法就来讨论这两种二分查找的算法。</p><h3 id="二、寻找左侧边界的二分搜索"><a href="#二、寻找左侧边界的二分搜索" class="headerlink" title="二、寻找左侧边界的二分搜索"></a>二、寻找左侧边界的二分搜索</h3><p>以下是最常见的代码形式，其中的标记是需要注意的细节：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">left_bound</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> right = nums.length; <span class="hljs-comment">// 注意</span><br>    <br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123; <span class="hljs-comment">// 注意</span><br>        <span class="hljs-keyword">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>            right = mid;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>            right = mid; <span class="hljs-comment">// 注意</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> left;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>1、为什么 while 中是 <code>&lt;</code> 而不是 <code>&lt;=</code></strong>?<br>答：用相同的方法分析，因为 <code>right = nums.length</code> 而不是 <code>nums.length - 1</code>。因此每次循环的「搜索区间」是 <code>[left, right)</code> 左闭右开。<br><code>while(left &lt; right)</code> 终止的条件是 <code>left == right</code>，此时搜索区间 <code>[left, left)</code> 为空，所以可以正确终止。<br>PS：这里先要说一个搜索左右边界和上面这个算法的一个区别，也是很多读者问的：<strong>刚才的 <code>right</code> 不是 <code>nums.length - 1</code> 吗，为啥这里非要写成 <code>nums.length</code> 使得「搜索区间」变成左闭右开呢</strong>？<br>因为对于搜索左右侧边界的二分查找，这种写法比较普遍，我就拿这种写法举例了，保证你以后遇到这类代码可以理解。你非要用两端都闭的写法反而更简单，我会在后面写相关的代码，把三种二分搜索都用一种两端都闭的写法统一起来，你耐心往后看就行了。<br><strong>2、为什么没有返回 -1 的操作？如果 <code>nums</code> 中不存在 <code>target</code> 这个值，怎么办</strong>？<br>答：因为要一步一步来，先理解一下这个「左侧边界」有什么特殊含义：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/1.jpg"><br>对于这个数组，算法会返回 1。这个 1 的含义可以这样解读：<code>nums</code> 中小于 2 的元素有 1 个。<br>比如对于有序数组 <code>nums = [2,3,5,7]</code>, <code>target = 1</code>，算法会返回 0，含义是：<code>nums</code> 中小于 1 的元素有 0 个。<br>再比如说 <code>nums = [2,3,5,7], target = 8</code>，算法会返回 4，含义是：<code>nums</code> 中小于 8 的元素有 4 个。<br>综上可以看出，函数的返回值（即 <code>left</code> 变量的值）取值区间是闭区间 <code>[0, nums.length]</code>，所以我们简单添加两行代码就能在正确的时候 return -1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>    <span class="hljs-comment">//...</span><br>&#125;<br><span class="hljs-comment">// target 比所有数都大</span><br><span class="hljs-keyword">if</span> (left == nums.length) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><span class="hljs-comment">// 类似之前算法的处理方式</span><br><span class="hljs-keyword">return</span> nums[left] == target ? left : -<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p><strong>3、为什么 <code>left = mid + 1</code>，<code>right = mid</code> ？和之前的算法不一样</strong>？<br>答：这个很好解释，因为我们的「搜索区间」是 <code>[left, right)</code> 左闭右开，所以当 <code>nums[mid]</code> 被检测之后，下一步的搜索区间应该去掉 <code>mid</code> 分割成两个区间，即 <code>[left, mid)</code> 或 <code>[mid + 1, right)</code>。<br><strong>4、为什么该算法能够搜索左侧边界</strong>？<br>答：关键在于对于 <code>nums[mid] == target</code> 这种情况的处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (nums[mid] == target)<br>    right = mid;<br></code></pre></td></tr></table></figure><p>可见，找到 target 时不要立即返回，而是缩小「搜索区间」的上界 <code>right</code>，在区间 <code>[left, mid)</code> 中继续搜索，即不断向左收缩，达到锁定左侧边界的目的。<br><strong>5、为什么返回 <code>left</code> 而不是 <code>right</code>**？<br>答：都是一样的，因为 while 终止的条件是 <code>left == right</code>。<br>**6、能不能想办法把 <code>right</code> 变成 <code>nums.length - 1</code>，也就是继续使用两边都闭的「搜索区间」？这样就可以和第一种二分搜索在某种程度上统一起来了</strong>。<br>答：当然可以，只要你明白了「搜索区间」这个概念，就能有效避免漏掉元素，随便你怎么改都行。下面我们严格根据逻辑来修改：<br>因为你非要让搜索区间两端都闭，所以 <code>right</code> 应该初始化为 <code>nums.length - 1</code>，while 的终止条件应该是 <code>left == right + 1</code>，也就是其中应该用 <code>&lt;=</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">left_bound</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-comment">// 搜索区间为 [left, right]</span><br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>        <span class="hljs-keyword">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">// if else ...</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>因为搜索区间是两端都闭的，且现在是搜索左侧边界，所以 <code>left</code> 和 <code>right</code> 的更新逻辑如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>    <span class="hljs-comment">// 搜索区间变为 [mid+1, right]</span><br>    left = mid + <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>    <span class="hljs-comment">// 搜索区间变为 [left, mid-1]</span><br>    right = mid - <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>    <span class="hljs-comment">// 收缩右侧边界</span><br>    right = mid - <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于 while 的退出条件是 <code>left == right + 1</code>，所以当 <code>target</code> 比 <code>nums</code> 中所有元素都大时，会存在以下情况使得索引越界：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/2.jpg"><br>因此，最后返回结果的代码应该检查越界情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (left &gt;= nums.length || nums[left] != target)<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> left;<br></code></pre></td></tr></table></figure><p>至此，整个算法就写完了，完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">left_bound</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 搜索区间为 [left, right]</span><br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>        <span class="hljs-keyword">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>            <span class="hljs-comment">// 搜索区间变为 [mid+1, right]</span><br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>            <span class="hljs-comment">// 搜索区间变为 [left, mid-1]</span><br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>            <span class="hljs-comment">// 收缩右侧边界</span><br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 检查出界情况</span><br>    <span class="hljs-keyword">if</span> (left &gt;= nums.length || nums[left] != target)<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> left;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就和第一种二分搜索算法统一了，都是两端都闭的「搜索区间」，而且最后返回的也是 <code>left</code> 变量的值。只要把住二分搜索的逻辑，两种形式大家看自己喜欢哪种记哪种吧。</p><h3 id="三、寻找右侧边界的二分查找"><a href="#三、寻找右侧边界的二分查找" class="headerlink" title="三、寻找右侧边界的二分查找"></a>三、寻找右侧边界的二分查找</h3><p>类似寻找左侧边界的算法，这里也会提供两种写法，还是先写常见的左闭右开的写法，只有两处和搜索左侧边界不同，已标注：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">right_bound</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = nums.length;<br>    <br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>        <span class="hljs-keyword">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>            left = mid + <span class="hljs-number">1</span>; <span class="hljs-comment">// 注意</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>            right = mid;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> left - <span class="hljs-number">1</span>; <span class="hljs-comment">// 注意</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>1、为什么这个算法能够找到右侧边界</strong>？<br>答：类似地，关键点还是这里：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>    left = mid + <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>当 <code>nums[mid] == target</code> 时，不要立即返回，而是增大「搜索区间」的下界 <code>left</code>，使得区间不断向右收缩，达到锁定右侧边界的目的。<br><strong>2、为什么最后返回 <code>left - 1</code> 而不像左侧边界的函数，返回 <code>left</code>？而且我觉得这里既然是搜索右侧边界，应该返回 <code>right</code> 才对</strong>。<br>答：首先，while 循环的终止条件是 <code>left == right</code>，所以 <code>left</code> 和 <code>right</code> 是一样的，你非要体现右侧的特点，返回 <code>right - 1</code> 好了。<br>至于为什么要减一，这是搜索右侧边界的一个特殊点，关键在这个条件判断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>    left = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 这样想: mid = left - 1</span><br></code></pre></td></tr></table></figure><p><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/3.jpg"><br>因为我们对 <code>left</code> 的更新必须是 <code>left = mid + 1</code>，就是说 while 循环结束时，<code>nums[left]</code> 一定不等于 <code>target</code> 了，而 <code>nums[left-1]</code> 可能是 <code>target</code>。<br>至于为什么 <code>left</code> 的更新必须是 <code>left = mid + 1</code>，同左侧边界搜索，就不再赘述。<br><strong>3、为什么没有返回 -1 的操作？如果 <code>nums</code> 中不存在 <code>target</code> 这个值，怎么办</strong>？<br>答：类似之前的左侧边界搜索，因为 while 的终止条件是 <code>left == right</code>，就是说 <code>left</code> 的取值范围是 <code>[0, nums.length]</code>，所以可以添加两行代码，正确地返回 -1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><span class="hljs-keyword">if</span> (left == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> nums[left-<span class="hljs-number">1</span>] == target ? (left-<span class="hljs-number">1</span>) : -<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p><strong>4、是否也可以把这个算法的「搜索区间」也统一成两端都闭的形式呢？这样这三个写法就完全统一了，以后就可以闭着眼睛写出来了</strong>。<br>答：当然可以，类似搜索左侧边界的统一写法，其实只要改两个地方就行了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">right_bound</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>        <span class="hljs-keyword">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>            <span class="hljs-comment">// 这里改成收缩左侧边界即可</span><br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 这里改为检查 right 越界的情况，见下图</span><br>    <span class="hljs-keyword">if</span> (right &lt; <span class="hljs-number">0</span> || nums[right] != target)<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> right;<br>&#125;<br></code></pre></td></tr></table></figure><p>当 <code>target</code> 比所有元素都小时，<code>right</code> 会被减到 -1，所以需要在最后防止越界：<br><img src="/images/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/4.jpg"><br>至此，搜索右侧边界的二分查找的两种写法也完成了，其实将「搜索区间」统一成两端都闭反而更容易记忆，你说是吧？</p><h3 id="四、逻辑统一"><a href="#四、逻辑统一" class="headerlink" title="四、逻辑统一"></a>四、逻辑统一</h3><p>来梳理一下这些细节差异的因果逻辑：<br><strong>第一个，最基本的二分查找算法</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">因为我们初始化 right = nums.length - <span class="hljs-number">1</span><br>所以决定了我们的「搜索区间」是 [left, right]<br>所以决定了 <span class="hljs-keyword">while</span> (left &lt;= right)<br>同时也决定了 left = mid+<span class="hljs-number">1</span> 和 right = mid<span class="hljs-number">-1</span><br>因为我们只需找到一个 target 的索引即可<br>所以当 nums[mid] == target 时可以立即返回<br></code></pre></td></tr></table></figure><p><strong>第二个，寻找左侧边界的二分查找</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">因为我们初始化 right = nums.length<br>所以决定了我们的「搜索区间」是 [left, right)<br>所以决定了 <span class="hljs-keyword">while</span> (left &lt; right)<br>同时也决定了 left = mid + <span class="hljs-number">1</span> 和 right = mid<br>因为我们需找到 target 的最左侧索引<br>所以当 nums[mid] == target 时不要立即返回<br>而要收紧右侧边界以锁定左侧边界<br></code></pre></td></tr></table></figure><p><strong>第三个，寻找右侧边界的二分查找</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">因为我们初始化 right = nums.length<br>所以决定了我们的「搜索区间」是 [left, right)<br>所以决定了 <span class="hljs-keyword">while</span> (left &lt; right)<br>同时也决定了 left = mid + <span class="hljs-number">1</span> 和 right = mid<br>因为我们需找到 target 的最右侧索引<br>所以当 nums[mid] == target 时不要立即返回<br>而要收紧左侧边界以锁定右侧边界<br>又因为收紧左侧边界时必须 left = mid + <span class="hljs-number">1</span><br>所以最后无论返回 left 还是 right，必须减一<br></code></pre></td></tr></table></figure><p>对于寻找左右边界的二分搜索，常见的手法是使用左闭右开的「搜索区间」，<strong>我们还根据逻辑将「搜索区间」全都统一成了两端都闭，便于记忆，只要修改两处即可变化出三种写法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">binary_search</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>; <br>    <span class="hljs-keyword">while</span>(left &lt;= right) &#123;<br>        <span class="hljs-keyword">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>            right = mid - <span class="hljs-number">1</span>; <br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid] == target) &#123;<br>            <span class="hljs-comment">// 直接返回</span><br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 直接返回</span><br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">left_bound</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>        <span class="hljs-keyword">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>            <span class="hljs-comment">// 别返回，锁定左侧边界</span><br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 最后要检查 left 越界的情况</span><br>    <span class="hljs-keyword">if</span> (left &gt;= nums.length || nums[left] != target)<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> left;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">right_bound</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>        <span class="hljs-keyword">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>            <span class="hljs-comment">// 别返回，锁定右侧边界</span><br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 最后要检查 right 越界的情况</span><br>    <span class="hljs-keyword">if</span> (right &lt; <span class="hljs-number">0</span> || nums[right] != target)<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> right;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果以上内容你都能理解，那么恭喜你，二分查找算法的细节不过如此。<br>通过本文，你学会了：<br>1、分析二分查找代码时，不要出现 else，全部展开成 else if 方便理解。<br>2、注意「搜索区间」和 while 的终止条件，如果存在漏掉的元素，记得在最后检查。<br>3、如需定义左闭右开的「搜索区间」搜索左右边界，只要在 <code>nums[mid] == target</code> 时做修改即可，搜索右侧时需要减一。<br>4、如果将「搜索区间」全都统一成两端都闭，好记，只要稍改 <code>nums[mid] == target</code> 条件处的代码和返回的逻辑即可，<strong>推荐拿小本本记下，作为二分搜索模板</strong>。<br>呵呵，此文对二分查找的问题无敌好吧！</p><p><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E4%BF%AE%E8%AE%A2%E7%89%88">上一篇：回溯算法解题框架</a><br><a href="/2016/01/01/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%8A%80%E5%B7%A7">下一篇：滑动窗口解题框架</a><br><a href="/2050/08/05/LeetCode%E7%A0%B4%E5%B1%80%E6%94%BB%E7%95%A5#%E7%9B%AE%E5%BD%95">目录</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="about/index.html"/>
      <url>about/index.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="index.html">测试</a></li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="categories/index.html"/>
      <url>categories/index.html</url>
      
        <content type="html"><![CDATA[<p>layout: categories</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="tags/index.html"/>
      <url>tags/index.html</url>
      
        <content type="html"><![CDATA[<p>layout: tags</p>]]></content>
      
    </entry>
    
    
  
</search>
